Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AMPERSAND
    AND
    AND_ASSIGN
    BEGIN_KW
    BREAK
    CASE
    CLASS
    CLASS_VAR
    CONSTANT
    DEF
    DEFINEDQ
    DO
    ENSURE
    FALSE
    FOR
    GLOBAL_VAR
    IN
    INSTANCE_VAR
    LBRACE
    LOGICAL_NOT
    LPAREN
    MATCH_REGEX
    MODULE
    NEXT
    NIL
    NOT
    NOT_MATCH_REGEX
    OR
    OR_ASSIGN
    RANGE_EXCLUSIVE
    RANGE_INCLUSIVE
    RBRACE
    REDO
    RESCUE
    RETRY
    RETURN
    RPAREN
    SELF
    SEMICOLON
    SUPER
    SYMBOL_COLON
    TERNARY_COLON
    TERNARY_Q
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> print
Rule 5     statement -> input
Rule 6     statement -> assignment
Rule 7     statement -> expression
Rule 8     statement -> if_statement
Rule 9     print -> PUTS expression
Rule 10    input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER
Rule 11    assignment -> IDENTIFIER ASSIGN expression
Rule 12    assignment -> IDENTIFIER PLUS_ASSIGN expression
Rule 13    assignment -> IDENTIFIER MINUS_ASSIGN expression
Rule 14    assignment -> IDENTIFIER TIMES_ASSIGN expression
Rule 15    assignment -> IDENTIFIER DIVIDE_ASSIGN expression
Rule 16    expression -> expression PLUS expression
Rule 17    expression -> expression MINUS expression
Rule 18    expression -> expression TIMES expression
Rule 19    expression -> expression DIVIDE expression
Rule 20    expression -> expression POWER expression
Rule 21    expression -> expression MODULO expression
Rule 22    expression -> INTEGER
Rule 23    expression -> FLOAT
Rule 24    expression -> STRING
Rule 25    expression -> IDENTIFIER
Rule 26    condition -> expression LOGICAL_AND expression
Rule 27    condition -> expression LOGICAL_OR expression
Rule 28    condition -> expression EQUAL_EQUAL expression
Rule 29    condition -> expression NOT_EQUAL expression
Rule 30    condition -> expression GREATER_THAN expression
Rule 31    condition -> expression LESS_THAN expression
Rule 32    condition -> expression GREATER_EQUAL expression
Rule 33    condition -> expression LESS_EQUAL expression
Rule 34    if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW
Rule 35    elsif_blocks_opt -> elsif_blocks
Rule 36    elsif_blocks_opt -> empty
Rule 37    elsif_blocks -> elsif_blocks ELSIF condition statement_list
Rule 38    elsif_blocks -> ELSIF condition statement_list
Rule 39    else_block_opt -> ELSE statement_list
Rule 40    else_block_opt -> empty
Rule 41    empty -> <empty>
Rule 42    statement -> WHILE condition statement_list END_KW
Rule 43    expression -> LBRACKET elements RBRACKET
Rule 44    elements -> elements COMMA expression
Rule 45    elements -> expression
Rule 46    elements -> empty

Terminals, with rules where they appear

ALIAS                : 
AMPERSAND            : 
AND                  : 
AND_ASSIGN           : 
ASSIGN               : 10 11
BEGIN_KW             : 
BREAK                : 
CASE                 : 
CLASS                : 
CLASS_VAR            : 
COMMA                : 44
CONSTANT             : 
DEF                  : 
DEFINEDQ             : 
DIVIDE               : 19
DIVIDE_ASSIGN        : 15
DO                   : 
DOT                  : 10
ELSE                 : 39
ELSIF                : 37 38
END_KW               : 34 42
ENSURE               : 
EQUAL_EQUAL          : 28
FALSE                : 
FLOAT                : 23
FOR                  : 
GETS                 : 10
GLOBAL_VAR           : 
GREATER_EQUAL        : 32
GREATER_THAN         : 30
IDENTIFIER           : 10 10 11 12 13 14 15 25
IF                   : 34
IN                   : 
INSTANCE_VAR         : 
INTEGER              : 22
LBRACE               : 
LBRACKET             : 43
LESS_EQUAL           : 33
LESS_THAN            : 31
LOGICAL_AND          : 26
LOGICAL_NOT          : 
LOGICAL_OR           : 27
LPAREN               : 
MATCH_REGEX          : 
MINUS                : 17
MINUS_ASSIGN         : 13
MODULE               : 
MODULO               : 21
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 29
NOT_MATCH_REGEX      : 
OR                   : 
OR_ASSIGN            : 
PLUS                 : 16
PLUS_ASSIGN          : 12
POWER                : 20
PUTS                 : 9
RANGE_EXCLUSIVE      : 
RANGE_INCLUSIVE      : 
RBRACE               : 
RBRACKET             : 43
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPAREN               : 
SELF                 : 
SEMICOLON            : 
STRING               : 24
SUPER                : 
SYMBOL_COLON         : 
TERNARY_COLON        : 
TERNARY_Q            : 
THEN                 : 
TIMES                : 18
TIMES_ASSIGN         : 14
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 42
YIELD                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 6
condition            : 34 37 38 42
elements             : 43 44
else_block_opt       : 34
elsif_blocks         : 35 37
elsif_blocks_opt     : 34
empty                : 36 40 46
expression           : 7 9 11 12 13 14 15 16 16 17 17 18 18 19 19 20 20 21 21 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 44 45
if_statement         : 8
input                : 5
print                : 4
program              : 0
statement            : 2 3
statement_list       : 1 2 34 37 38 39 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    $end            reduce using rule 1 (program -> statement_list .)
    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement                      shift and go to state 17
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 3

    (3) statement_list -> statement .

    WHILE           reduce using rule 3 (statement_list -> statement .)
    PUTS            reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    INTEGER         reduce using rule 3 (statement_list -> statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement .)
    STRING          reduce using rule 3 (statement_list -> statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    END_KW          reduce using rule 3 (statement_list -> statement .)
    ELSIF           reduce using rule 3 (statement_list -> statement .)
    ELSE            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> print .

    WHILE           reduce using rule 4 (statement -> print .)
    PUTS            reduce using rule 4 (statement -> print .)
    IDENTIFIER      reduce using rule 4 (statement -> print .)
    INTEGER         reduce using rule 4 (statement -> print .)
    FLOAT           reduce using rule 4 (statement -> print .)
    STRING          reduce using rule 4 (statement -> print .)
    LBRACKET        reduce using rule 4 (statement -> print .)
    IF              reduce using rule 4 (statement -> print .)
    $end            reduce using rule 4 (statement -> print .)
    END_KW          reduce using rule 4 (statement -> print .)
    ELSIF           reduce using rule 4 (statement -> print .)
    ELSE            reduce using rule 4 (statement -> print .)


state 5

    (5) statement -> input .

    WHILE           reduce using rule 5 (statement -> input .)
    PUTS            reduce using rule 5 (statement -> input .)
    IDENTIFIER      reduce using rule 5 (statement -> input .)
    INTEGER         reduce using rule 5 (statement -> input .)
    FLOAT           reduce using rule 5 (statement -> input .)
    STRING          reduce using rule 5 (statement -> input .)
    LBRACKET        reduce using rule 5 (statement -> input .)
    IF              reduce using rule 5 (statement -> input .)
    $end            reduce using rule 5 (statement -> input .)
    END_KW          reduce using rule 5 (statement -> input .)
    ELSIF           reduce using rule 5 (statement -> input .)
    ELSE            reduce using rule 5 (statement -> input .)


state 6

    (6) statement -> assignment .

    WHILE           reduce using rule 6 (statement -> assignment .)
    PUTS            reduce using rule 6 (statement -> assignment .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    INTEGER         reduce using rule 6 (statement -> assignment .)
    FLOAT           reduce using rule 6 (statement -> assignment .)
    STRING          reduce using rule 6 (statement -> assignment .)
    LBRACKET        reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    END_KW          reduce using rule 6 (statement -> assignment .)
    ELSIF           reduce using rule 6 (statement -> assignment .)
    ELSE            reduce using rule 6 (statement -> assignment .)


state 7

    (7) statement -> expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 7 (statement -> expression .)
    PUTS            reduce using rule 7 (statement -> expression .)
    IDENTIFIER      reduce using rule 7 (statement -> expression .)
    INTEGER         reduce using rule 7 (statement -> expression .)
    FLOAT           reduce using rule 7 (statement -> expression .)
    STRING          reduce using rule 7 (statement -> expression .)
    LBRACKET        reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    END_KW          reduce using rule 7 (statement -> expression .)
    ELSIF           reduce using rule 7 (statement -> expression .)
    ELSE            reduce using rule 7 (statement -> expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 8

    (8) statement -> if_statement .

    WHILE           reduce using rule 8 (statement -> if_statement .)
    PUTS            reduce using rule 8 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> if_statement .)
    INTEGER         reduce using rule 8 (statement -> if_statement .)
    FLOAT           reduce using rule 8 (statement -> if_statement .)
    STRING          reduce using rule 8 (statement -> if_statement .)
    LBRACKET        reduce using rule 8 (statement -> if_statement .)
    IF              reduce using rule 8 (statement -> if_statement .)
    $end            reduce using rule 8 (statement -> if_statement .)
    END_KW          reduce using rule 8 (statement -> if_statement .)
    ELSIF           reduce using rule 8 (statement -> if_statement .)
    ELSE            reduce using rule 8 (statement -> if_statement .)


state 9

    (42) statement -> WHILE . condition statement_list END_KW
    (26) condition -> . expression LOGICAL_AND expression
    (27) condition -> . expression LOGICAL_OR expression
    (28) condition -> . expression EQUAL_EQUAL expression
    (29) condition -> . expression NOT_EQUAL expression
    (30) condition -> . expression GREATER_THAN expression
    (31) condition -> . expression LESS_THAN expression
    (32) condition -> . expression GREATER_EQUAL expression
    (33) condition -> . expression LESS_EQUAL expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    condition                      shift and go to state 24
    expression                     shift and go to state 25

state 10

    (9) print -> PUTS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 27

state 11

    (10) input -> IDENTIFIER . ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> IDENTIFIER . ASSIGN expression
    (12) assignment -> IDENTIFIER . PLUS_ASSIGN expression
    (13) assignment -> IDENTIFIER . MINUS_ASSIGN expression
    (14) assignment -> IDENTIFIER . TIMES_ASSIGN expression
    (15) assignment -> IDENTIFIER . DIVIDE_ASSIGN expression
    (25) expression -> IDENTIFIER .

    ASSIGN          shift and go to state 28
    PLUS_ASSIGN     shift and go to state 29
    MINUS_ASSIGN    shift and go to state 30
    TIMES_ASSIGN    shift and go to state 31
    DIVIDE_ASSIGN   shift and go to state 32
    PLUS            reduce using rule 25 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 25 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 25 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 25 (expression -> IDENTIFIER .)
    POWER           reduce using rule 25 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 25 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 25 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 25 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 25 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 25 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 25 (expression -> IDENTIFIER .)
    STRING          reduce using rule 25 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 25 (expression -> IDENTIFIER .)
    IF              reduce using rule 25 (expression -> IDENTIFIER .)
    $end            reduce using rule 25 (expression -> IDENTIFIER .)
    END_KW          reduce using rule 25 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 25 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 25 (expression -> IDENTIFIER .)


state 12

    (22) expression -> INTEGER .

    PLUS            reduce using rule 22 (expression -> INTEGER .)
    MINUS           reduce using rule 22 (expression -> INTEGER .)
    TIMES           reduce using rule 22 (expression -> INTEGER .)
    DIVIDE          reduce using rule 22 (expression -> INTEGER .)
    POWER           reduce using rule 22 (expression -> INTEGER .)
    MODULO          reduce using rule 22 (expression -> INTEGER .)
    WHILE           reduce using rule 22 (expression -> INTEGER .)
    PUTS            reduce using rule 22 (expression -> INTEGER .)
    IDENTIFIER      reduce using rule 22 (expression -> INTEGER .)
    INTEGER         reduce using rule 22 (expression -> INTEGER .)
    FLOAT           reduce using rule 22 (expression -> INTEGER .)
    STRING          reduce using rule 22 (expression -> INTEGER .)
    LBRACKET        reduce using rule 22 (expression -> INTEGER .)
    IF              reduce using rule 22 (expression -> INTEGER .)
    $end            reduce using rule 22 (expression -> INTEGER .)
    LOGICAL_AND     reduce using rule 22 (expression -> INTEGER .)
    LOGICAL_OR      reduce using rule 22 (expression -> INTEGER .)
    EQUAL_EQUAL     reduce using rule 22 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 22 (expression -> INTEGER .)
    GREATER_THAN    reduce using rule 22 (expression -> INTEGER .)
    LESS_THAN       reduce using rule 22 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 22 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 22 (expression -> INTEGER .)
    END_KW          reduce using rule 22 (expression -> INTEGER .)
    ELSIF           reduce using rule 22 (expression -> INTEGER .)
    ELSE            reduce using rule 22 (expression -> INTEGER .)
    RBRACKET        reduce using rule 22 (expression -> INTEGER .)
    COMMA           reduce using rule 22 (expression -> INTEGER .)


state 13

    (23) expression -> FLOAT .

    PLUS            reduce using rule 23 (expression -> FLOAT .)
    MINUS           reduce using rule 23 (expression -> FLOAT .)
    TIMES           reduce using rule 23 (expression -> FLOAT .)
    DIVIDE          reduce using rule 23 (expression -> FLOAT .)
    POWER           reduce using rule 23 (expression -> FLOAT .)
    MODULO          reduce using rule 23 (expression -> FLOAT .)
    WHILE           reduce using rule 23 (expression -> FLOAT .)
    PUTS            reduce using rule 23 (expression -> FLOAT .)
    IDENTIFIER      reduce using rule 23 (expression -> FLOAT .)
    INTEGER         reduce using rule 23 (expression -> FLOAT .)
    FLOAT           reduce using rule 23 (expression -> FLOAT .)
    STRING          reduce using rule 23 (expression -> FLOAT .)
    LBRACKET        reduce using rule 23 (expression -> FLOAT .)
    IF              reduce using rule 23 (expression -> FLOAT .)
    $end            reduce using rule 23 (expression -> FLOAT .)
    LOGICAL_AND     reduce using rule 23 (expression -> FLOAT .)
    LOGICAL_OR      reduce using rule 23 (expression -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 23 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 23 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 23 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 23 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 23 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 23 (expression -> FLOAT .)
    END_KW          reduce using rule 23 (expression -> FLOAT .)
    ELSIF           reduce using rule 23 (expression -> FLOAT .)
    ELSE            reduce using rule 23 (expression -> FLOAT .)
    RBRACKET        reduce using rule 23 (expression -> FLOAT .)
    COMMA           reduce using rule 23 (expression -> FLOAT .)


state 14

    (24) expression -> STRING .

    PLUS            reduce using rule 24 (expression -> STRING .)
    MINUS           reduce using rule 24 (expression -> STRING .)
    TIMES           reduce using rule 24 (expression -> STRING .)
    DIVIDE          reduce using rule 24 (expression -> STRING .)
    POWER           reduce using rule 24 (expression -> STRING .)
    MODULO          reduce using rule 24 (expression -> STRING .)
    WHILE           reduce using rule 24 (expression -> STRING .)
    PUTS            reduce using rule 24 (expression -> STRING .)
    IDENTIFIER      reduce using rule 24 (expression -> STRING .)
    INTEGER         reduce using rule 24 (expression -> STRING .)
    FLOAT           reduce using rule 24 (expression -> STRING .)
    STRING          reduce using rule 24 (expression -> STRING .)
    LBRACKET        reduce using rule 24 (expression -> STRING .)
    IF              reduce using rule 24 (expression -> STRING .)
    $end            reduce using rule 24 (expression -> STRING .)
    LOGICAL_AND     reduce using rule 24 (expression -> STRING .)
    LOGICAL_OR      reduce using rule 24 (expression -> STRING .)
    EQUAL_EQUAL     reduce using rule 24 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 24 (expression -> STRING .)
    GREATER_THAN    reduce using rule 24 (expression -> STRING .)
    LESS_THAN       reduce using rule 24 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 24 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 24 (expression -> STRING .)
    END_KW          reduce using rule 24 (expression -> STRING .)
    ELSIF           reduce using rule 24 (expression -> STRING .)
    ELSE            reduce using rule 24 (expression -> STRING .)
    RBRACKET        reduce using rule 24 (expression -> STRING .)
    COMMA           reduce using rule 24 (expression -> STRING .)


state 15

    (43) expression -> LBRACKET . elements RBRACKET
    (44) elements -> . elements COMMA expression
    (45) elements -> . expression
    (46) elements -> . empty
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (41) empty -> .

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15
    RBRACKET        reduce using rule 41 (empty -> .)
    COMMA           reduce using rule 41 (empty -> .)

    elements                       shift and go to state 33
    expression                     shift and go to state 34
    empty                          shift and go to state 35

state 16

    (34) if_statement -> IF . condition statement_list elsif_blocks_opt else_block_opt END_KW
    (26) condition -> . expression LOGICAL_AND expression
    (27) condition -> . expression LOGICAL_OR expression
    (28) condition -> . expression EQUAL_EQUAL expression
    (29) condition -> . expression NOT_EQUAL expression
    (30) condition -> . expression GREATER_THAN expression
    (31) condition -> . expression LESS_THAN expression
    (32) condition -> . expression GREATER_EQUAL expression
    (33) condition -> . expression LESS_EQUAL expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    condition                      shift and go to state 36
    expression                     shift and go to state 25

state 17

    (2) statement_list -> statement_list statement .

    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 2 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    END_KW          reduce using rule 2 (statement_list -> statement_list statement .)
    ELSIF           reduce using rule 2 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 2 (statement_list -> statement_list statement .)


state 18

    (16) expression -> expression PLUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 37

state 19

    (17) expression -> expression MINUS . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 38

state 20

    (18) expression -> expression TIMES . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 39

state 21

    (19) expression -> expression DIVIDE . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 40

state 22

    (20) expression -> expression POWER . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 41

state 23

    (21) expression -> expression MODULO . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 42

state 24

    (42) statement -> WHILE condition . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement_list                 shift and go to state 43
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 25

    (26) condition -> expression . LOGICAL_AND expression
    (27) condition -> expression . LOGICAL_OR expression
    (28) condition -> expression . EQUAL_EQUAL expression
    (29) condition -> expression . NOT_EQUAL expression
    (30) condition -> expression . GREATER_THAN expression
    (31) condition -> expression . LESS_THAN expression
    (32) condition -> expression . GREATER_EQUAL expression
    (33) condition -> expression . LESS_EQUAL expression
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    LOGICAL_AND     shift and go to state 44
    LOGICAL_OR      shift and go to state 45
    EQUAL_EQUAL     shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    GREATER_THAN    shift and go to state 48
    LESS_THAN       shift and go to state 49
    GREATER_EQUAL   shift and go to state 50
    LESS_EQUAL      shift and go to state 51
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 26

    (25) expression -> IDENTIFIER .

    LOGICAL_AND     reduce using rule 25 (expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 25 (expression -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 25 (expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 25 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 25 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 25 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 25 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 25 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 25 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 25 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 25 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 25 (expression -> IDENTIFIER .)
    POWER           reduce using rule 25 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 25 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 25 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 25 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 25 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 25 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 25 (expression -> IDENTIFIER .)
    STRING          reduce using rule 25 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 25 (expression -> IDENTIFIER .)
    IF              reduce using rule 25 (expression -> IDENTIFIER .)
    $end            reduce using rule 25 (expression -> IDENTIFIER .)
    END_KW          reduce using rule 25 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 25 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 25 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 25 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 25 (expression -> IDENTIFIER .)


state 27

    (9) print -> PUTS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 9 (print -> PUTS expression .)
    PUTS            reduce using rule 9 (print -> PUTS expression .)
    IDENTIFIER      reduce using rule 9 (print -> PUTS expression .)
    INTEGER         reduce using rule 9 (print -> PUTS expression .)
    FLOAT           reduce using rule 9 (print -> PUTS expression .)
    STRING          reduce using rule 9 (print -> PUTS expression .)
    LBRACKET        reduce using rule 9 (print -> PUTS expression .)
    IF              reduce using rule 9 (print -> PUTS expression .)
    $end            reduce using rule 9 (print -> PUTS expression .)
    END_KW          reduce using rule 9 (print -> PUTS expression .)
    ELSIF           reduce using rule 9 (print -> PUTS expression .)
    ELSE            reduce using rule 9 (print -> PUTS expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 28

    (10) input -> IDENTIFIER ASSIGN . GETS DOT IDENTIFIER
    (11) assignment -> IDENTIFIER ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    GETS            shift and go to state 52
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 53

state 29

    (12) assignment -> IDENTIFIER PLUS_ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 54

state 30

    (13) assignment -> IDENTIFIER MINUS_ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 55

state 31

    (14) assignment -> IDENTIFIER TIMES_ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 56

state 32

    (15) assignment -> IDENTIFIER DIVIDE_ASSIGN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 57

state 33

    (43) expression -> LBRACKET elements . RBRACKET
    (44) elements -> elements . COMMA expression

    RBRACKET        shift and go to state 58
    COMMA           shift and go to state 59


state 34

    (45) elements -> expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    RBRACKET        reduce using rule 45 (elements -> expression .)
    COMMA           reduce using rule 45 (elements -> expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 35

    (46) elements -> empty .

    RBRACKET        reduce using rule 46 (elements -> empty .)
    COMMA           reduce using rule 46 (elements -> empty .)


state 36

    (34) if_statement -> IF condition . statement_list elsif_blocks_opt else_block_opt END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement_list                 shift and go to state 60
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 37

    (16) expression -> expression PLUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 16 (expression -> expression PLUS expression .)
    PUTS            reduce using rule 16 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 16 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 16 (expression -> expression PLUS expression .)
    STRING          reduce using rule 16 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 16 (expression -> expression PLUS expression .)
    IF              reduce using rule 16 (expression -> expression PLUS expression .)
    $end            reduce using rule 16 (expression -> expression PLUS expression .)
    LOGICAL_AND     reduce using rule 16 (expression -> expression PLUS expression .)
    LOGICAL_OR      reduce using rule 16 (expression -> expression PLUS expression .)
    EQUAL_EQUAL     reduce using rule 16 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 16 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 16 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 16 (expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 16 (expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 16 (expression -> expression PLUS expression .)
    END_KW          reduce using rule 16 (expression -> expression PLUS expression .)
    ELSIF           reduce using rule 16 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 16 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 16 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 16 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 16 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 16 (expression -> expression PLUS expression .) ]


state 38

    (17) expression -> expression MINUS expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 17 (expression -> expression MINUS expression .)
    PUTS            reduce using rule 17 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 17 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 17 (expression -> expression MINUS expression .)
    STRING          reduce using rule 17 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 17 (expression -> expression MINUS expression .)
    IF              reduce using rule 17 (expression -> expression MINUS expression .)
    $end            reduce using rule 17 (expression -> expression MINUS expression .)
    LOGICAL_AND     reduce using rule 17 (expression -> expression MINUS expression .)
    LOGICAL_OR      reduce using rule 17 (expression -> expression MINUS expression .)
    EQUAL_EQUAL     reduce using rule 17 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 17 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 17 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 17 (expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 17 (expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 17 (expression -> expression MINUS expression .)
    END_KW          reduce using rule 17 (expression -> expression MINUS expression .)
    ELSIF           reduce using rule 17 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 17 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 17 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 17 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 17 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 17 (expression -> expression MINUS expression .) ]


state 39

    (18) expression -> expression TIMES expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 18 (expression -> expression TIMES expression .)
    PUTS            reduce using rule 18 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 18 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 18 (expression -> expression TIMES expression .)
    STRING          reduce using rule 18 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 18 (expression -> expression TIMES expression .)
    IF              reduce using rule 18 (expression -> expression TIMES expression .)
    $end            reduce using rule 18 (expression -> expression TIMES expression .)
    LOGICAL_AND     reduce using rule 18 (expression -> expression TIMES expression .)
    LOGICAL_OR      reduce using rule 18 (expression -> expression TIMES expression .)
    EQUAL_EQUAL     reduce using rule 18 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 18 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 18 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 18 (expression -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 18 (expression -> expression TIMES expression .)
    LESS_EQUAL      reduce using rule 18 (expression -> expression TIMES expression .)
    END_KW          reduce using rule 18 (expression -> expression TIMES expression .)
    ELSIF           reduce using rule 18 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 18 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 18 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 18 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 18 (expression -> expression TIMES expression .) ]
  ! MODULO          [ reduce using rule 18 (expression -> expression TIMES expression .) ]


state 40

    (19) expression -> expression DIVIDE expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 19 (expression -> expression DIVIDE expression .)
    PUTS            reduce using rule 19 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 19 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 19 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 19 (expression -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 19 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 19 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 19 (expression -> expression DIVIDE expression .)
    LOGICAL_AND     reduce using rule 19 (expression -> expression DIVIDE expression .)
    LOGICAL_OR      reduce using rule 19 (expression -> expression DIVIDE expression .)
    EQUAL_EQUAL     reduce using rule 19 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 19 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 19 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 19 (expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 19 (expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 19 (expression -> expression DIVIDE expression .)
    END_KW          reduce using rule 19 (expression -> expression DIVIDE expression .)
    ELSIF           reduce using rule 19 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 19 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 19 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 19 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
  ! MODULO          [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]


state 41

    (20) expression -> expression POWER expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 20 (expression -> expression POWER expression .)
    PUTS            reduce using rule 20 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression POWER expression .)
    INTEGER         reduce using rule 20 (expression -> expression POWER expression .)
    FLOAT           reduce using rule 20 (expression -> expression POWER expression .)
    STRING          reduce using rule 20 (expression -> expression POWER expression .)
    LBRACKET        reduce using rule 20 (expression -> expression POWER expression .)
    IF              reduce using rule 20 (expression -> expression POWER expression .)
    $end            reduce using rule 20 (expression -> expression POWER expression .)
    LOGICAL_AND     reduce using rule 20 (expression -> expression POWER expression .)
    LOGICAL_OR      reduce using rule 20 (expression -> expression POWER expression .)
    EQUAL_EQUAL     reduce using rule 20 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 20 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 20 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 20 (expression -> expression POWER expression .)
    GREATER_EQUAL   reduce using rule 20 (expression -> expression POWER expression .)
    LESS_EQUAL      reduce using rule 20 (expression -> expression POWER expression .)
    END_KW          reduce using rule 20 (expression -> expression POWER expression .)
    ELSIF           reduce using rule 20 (expression -> expression POWER expression .)
    ELSE            reduce using rule 20 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 20 (expression -> expression POWER expression .)
    COMMA           reduce using rule 20 (expression -> expression POWER expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 20 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 20 (expression -> expression POWER expression .) ]
  ! MODULO          [ reduce using rule 20 (expression -> expression POWER expression .) ]


state 42

    (21) expression -> expression MODULO expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    WHILE           reduce using rule 21 (expression -> expression MODULO expression .)
    PUTS            reduce using rule 21 (expression -> expression MODULO expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression MODULO expression .)
    INTEGER         reduce using rule 21 (expression -> expression MODULO expression .)
    FLOAT           reduce using rule 21 (expression -> expression MODULO expression .)
    STRING          reduce using rule 21 (expression -> expression MODULO expression .)
    LBRACKET        reduce using rule 21 (expression -> expression MODULO expression .)
    IF              reduce using rule 21 (expression -> expression MODULO expression .)
    $end            reduce using rule 21 (expression -> expression MODULO expression .)
    LOGICAL_AND     reduce using rule 21 (expression -> expression MODULO expression .)
    LOGICAL_OR      reduce using rule 21 (expression -> expression MODULO expression .)
    EQUAL_EQUAL     reduce using rule 21 (expression -> expression MODULO expression .)
    NOT_EQUAL       reduce using rule 21 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 21 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 21 (expression -> expression MODULO expression .)
    GREATER_EQUAL   reduce using rule 21 (expression -> expression MODULO expression .)
    LESS_EQUAL      reduce using rule 21 (expression -> expression MODULO expression .)
    END_KW          reduce using rule 21 (expression -> expression MODULO expression .)
    ELSIF           reduce using rule 21 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 21 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 21 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 21 (expression -> expression MODULO expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23

  ! PLUS            [ reduce using rule 21 (expression -> expression MODULO expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression MODULO expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression MODULO expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression MODULO expression .) ]
  ! POWER           [ reduce using rule 21 (expression -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 21 (expression -> expression MODULO expression .) ]


state 43

    (42) statement -> WHILE condition statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    END_KW          shift and go to state 61
    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement                      shift and go to state 17
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 44

    (26) condition -> expression LOGICAL_AND . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 62

state 45

    (27) condition -> expression LOGICAL_OR . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 63

state 46

    (28) condition -> expression EQUAL_EQUAL . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 64

state 47

    (29) condition -> expression NOT_EQUAL . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 65

state 48

    (30) condition -> expression GREATER_THAN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 66

state 49

    (31) condition -> expression LESS_THAN . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 67

state 50

    (32) condition -> expression GREATER_EQUAL . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 68

state 51

    (33) condition -> expression LESS_EQUAL . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 69

state 52

    (10) input -> IDENTIFIER ASSIGN GETS . DOT IDENTIFIER

    DOT             shift and go to state 70


state 53

    (11) assignment -> IDENTIFIER ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    PUTS            reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    INTEGER         reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    FLOAT           reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    LBRACKET        reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    END_KW          reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    ELSIF           reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 11 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 54

    (12) assignment -> IDENTIFIER PLUS_ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    PUTS            reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    INTEGER         reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    FLOAT           reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    STRING          reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    IF              reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    $end            reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    END_KW          reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSE            reduce using rule 12 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 55

    (13) assignment -> IDENTIFIER MINUS_ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    PUTS            reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    INTEGER         reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    FLOAT           reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    STRING          reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    IF              reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    $end            reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    END_KW          reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSE            reduce using rule 13 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 56

    (14) assignment -> IDENTIFIER TIMES_ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    PUTS            reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    IDENTIFIER      reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    INTEGER         reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    FLOAT           reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    STRING          reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    LBRACKET        reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    IF              reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    $end            reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    END_KW          reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSIF           reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSE            reduce using rule 14 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 57

    (15) assignment -> IDENTIFIER DIVIDE_ASSIGN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    PUTS            reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IDENTIFIER      reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    INTEGER         reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    FLOAT           reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IF              reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    $end            reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    END_KW          reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 15 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 58

    (43) expression -> LBRACKET elements RBRACKET .

    PLUS            reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    POWER           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    MODULO          reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    PUTS            reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    INTEGER         reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    STRING          reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    LBRACKET        reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    LOGICAL_AND     reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    LOGICAL_OR      reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    EQUAL_EQUAL     reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    NOT_EQUAL       reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    GREATER_THAN    reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    LESS_THAN       reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    GREATER_EQUAL   reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    LESS_EQUAL      reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    END_KW          reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    ELSIF           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 43 (expression -> LBRACKET elements RBRACKET .)


state 59

    (44) elements -> elements COMMA . expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    expression                     shift and go to state 71

state 60

    (34) if_statement -> IF condition statement_list . elsif_blocks_opt else_block_opt END_KW
    (2) statement_list -> statement_list . statement
    (35) elsif_blocks_opt -> . elsif_blocks
    (36) elsif_blocks_opt -> . empty
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (37) elsif_blocks -> . elsif_blocks ELSIF condition statement_list
    (38) elsif_blocks -> . ELSIF condition statement_list
    (41) empty -> .
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    ELSIF           shift and go to state 75
    ELSE            reduce using rule 41 (empty -> .)
    END_KW          reduce using rule 41 (empty -> .)
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    elsif_blocks_opt               shift and go to state 72
    statement                      shift and go to state 17
    elsif_blocks                   shift and go to state 73
    empty                          shift and go to state 74
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 61

    (42) statement -> WHILE condition statement_list END_KW .

    WHILE           reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    PUTS            reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    IDENTIFIER      reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    INTEGER         reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    FLOAT           reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    STRING          reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    LBRACKET        reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    IF              reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    $end            reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    END_KW          reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    ELSIF           reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)
    ELSE            reduce using rule 42 (statement -> WHILE condition statement_list END_KW .)


state 62

    (26) condition -> expression LOGICAL_AND expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    PUTS            reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    IDENTIFIER      reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    INTEGER         reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    FLOAT           reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    STRING          reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    LBRACKET        reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    IF              reduce using rule 26 (condition -> expression LOGICAL_AND expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 63

    (27) condition -> expression LOGICAL_OR expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    PUTS            reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    IDENTIFIER      reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    INTEGER         reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    FLOAT           reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    STRING          reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    LBRACKET        reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    IF              reduce using rule 27 (condition -> expression LOGICAL_OR expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 64

    (28) condition -> expression EQUAL_EQUAL expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    PUTS            reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    IDENTIFIER      reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    INTEGER         reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    FLOAT           reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    STRING          reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    LBRACKET        reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    IF              reduce using rule 28 (condition -> expression EQUAL_EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 65

    (29) condition -> expression NOT_EQUAL expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    PUTS            reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    IDENTIFIER      reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    INTEGER         reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    FLOAT           reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    LBRACKET        reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    IF              reduce using rule 29 (condition -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 66

    (30) condition -> expression GREATER_THAN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    PUTS            reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    IDENTIFIER      reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    INTEGER         reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    FLOAT           reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    STRING          reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    LBRACKET        reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    IF              reduce using rule 30 (condition -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 67

    (31) condition -> expression LESS_THAN expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 31 (condition -> expression LESS_THAN expression .)
    PUTS            reduce using rule 31 (condition -> expression LESS_THAN expression .)
    IDENTIFIER      reduce using rule 31 (condition -> expression LESS_THAN expression .)
    INTEGER         reduce using rule 31 (condition -> expression LESS_THAN expression .)
    FLOAT           reduce using rule 31 (condition -> expression LESS_THAN expression .)
    STRING          reduce using rule 31 (condition -> expression LESS_THAN expression .)
    LBRACKET        reduce using rule 31 (condition -> expression LESS_THAN expression .)
    IF              reduce using rule 31 (condition -> expression LESS_THAN expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 68

    (32) condition -> expression GREATER_EQUAL expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    IDENTIFIER      reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    INTEGER         reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    FLOAT           reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    LBRACKET        reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 32 (condition -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 69

    (33) condition -> expression LESS_EQUAL expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    WHILE           reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    IDENTIFIER      reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    INTEGER         reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    FLOAT           reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    STRING          reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    LBRACKET        reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    IF              reduce using rule 33 (condition -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 70

    (10) input -> IDENTIFIER ASSIGN GETS DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 76


state 71

    (44) elements -> elements COMMA expression .
    (16) expression -> expression . PLUS expression
    (17) expression -> expression . MINUS expression
    (18) expression -> expression . TIMES expression
    (19) expression -> expression . DIVIDE expression
    (20) expression -> expression . POWER expression
    (21) expression -> expression . MODULO expression

    RBRACKET        reduce using rule 44 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 44 (elements -> elements COMMA expression .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    POWER           shift and go to state 22
    MODULO          shift and go to state 23


state 72

    (34) if_statement -> IF condition statement_list elsif_blocks_opt . else_block_opt END_KW
    (39) else_block_opt -> . ELSE statement_list
    (40) else_block_opt -> . empty
    (41) empty -> .

    ELSE            shift and go to state 78
    END_KW          reduce using rule 41 (empty -> .)

    else_block_opt                 shift and go to state 77
    empty                          shift and go to state 79

state 73

    (35) elsif_blocks_opt -> elsif_blocks .
    (37) elsif_blocks -> elsif_blocks . ELSIF condition statement_list

    ELSE            reduce using rule 35 (elsif_blocks_opt -> elsif_blocks .)
    END_KW          reduce using rule 35 (elsif_blocks_opt -> elsif_blocks .)
    ELSIF           shift and go to state 80


state 74

    (36) elsif_blocks_opt -> empty .

    ELSE            reduce using rule 36 (elsif_blocks_opt -> empty .)
    END_KW          reduce using rule 36 (elsif_blocks_opt -> empty .)


state 75

    (38) elsif_blocks -> ELSIF . condition statement_list
    (26) condition -> . expression LOGICAL_AND expression
    (27) condition -> . expression LOGICAL_OR expression
    (28) condition -> . expression EQUAL_EQUAL expression
    (29) condition -> . expression NOT_EQUAL expression
    (30) condition -> . expression GREATER_THAN expression
    (31) condition -> . expression LESS_THAN expression
    (32) condition -> . expression GREATER_EQUAL expression
    (33) condition -> . expression LESS_EQUAL expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    condition                      shift and go to state 81
    expression                     shift and go to state 25

state 76

    (10) input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .

    WHILE           reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    PUTS            reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    INTEGER         reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    FLOAT           reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    STRING          reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    LBRACKET        reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    IF              reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    $end            reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    END_KW          reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ELSIF           reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ELSE            reduce using rule 10 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)


state 77

    (34) if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt . END_KW

    END_KW          shift and go to state 82


state 78

    (39) else_block_opt -> ELSE . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement_list                 shift and go to state 83
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 79

    (40) else_block_opt -> empty .

    END_KW          reduce using rule 40 (else_block_opt -> empty .)


state 80

    (37) elsif_blocks -> elsif_blocks ELSIF . condition statement_list
    (26) condition -> . expression LOGICAL_AND expression
    (27) condition -> . expression LOGICAL_OR expression
    (28) condition -> . expression EQUAL_EQUAL expression
    (29) condition -> . expression NOT_EQUAL expression
    (30) condition -> . expression GREATER_THAN expression
    (31) condition -> . expression LESS_THAN expression
    (32) condition -> . expression GREATER_EQUAL expression
    (33) condition -> . expression LESS_EQUAL expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    IDENTIFIER      shift and go to state 26
    LBRACKET        shift and go to state 15

    condition                      shift and go to state 84
    expression                     shift and go to state 25

state 81

    (38) elsif_blocks -> ELSIF condition . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement_list                 shift and go to state 85
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 82

    (34) if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .

    WHILE           reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    PUTS            reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    IDENTIFIER      reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    INTEGER         reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    FLOAT           reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    STRING          reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    LBRACKET        reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    IF              reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    $end            reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    END_KW          reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    ELSIF           reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)
    ELSE            reduce using rule 34 (if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW .)


state 83

    (39) else_block_opt -> ELSE statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    END_KW          reduce using rule 39 (else_block_opt -> ELSE statement_list .)
    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement                      shift and go to state 17
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 84

    (37) elsif_blocks -> elsif_blocks ELSIF condition . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement_list                 shift and go to state 86
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 85

    (38) elsif_blocks -> ELSIF condition statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    ELSIF           reduce using rule 38 (elsif_blocks -> ELSIF condition statement_list .)
    ELSE            reduce using rule 38 (elsif_blocks -> ELSIF condition statement_list .)
    END_KW          reduce using rule 38 (elsif_blocks -> ELSIF condition statement_list .)
    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement                      shift and go to state 17
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8

state 86

    (37) elsif_blocks -> elsif_blocks ELSIF condition statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (42) statement -> . WHILE condition statement_list END_KW
    (9) print -> . PUTS expression
    (10) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (11) assignment -> . IDENTIFIER ASSIGN expression
    (12) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (13) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (14) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (15) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (16) expression -> . expression PLUS expression
    (17) expression -> . expression MINUS expression
    (18) expression -> . expression TIMES expression
    (19) expression -> . expression DIVIDE expression
    (20) expression -> . expression POWER expression
    (21) expression -> . expression MODULO expression
    (22) expression -> . INTEGER
    (23) expression -> . FLOAT
    (24) expression -> . STRING
    (25) expression -> . IDENTIFIER
    (43) expression -> . LBRACKET elements RBRACKET
    (34) if_statement -> . IF condition statement_list elsif_blocks_opt else_block_opt END_KW

    ELSIF           reduce using rule 37 (elsif_blocks -> elsif_blocks ELSIF condition statement_list .)
    ELSE            reduce using rule 37 (elsif_blocks -> elsif_blocks ELSIF condition statement_list .)
    END_KW          reduce using rule 37 (elsif_blocks -> elsif_blocks ELSIF condition statement_list .)
    WHILE           shift and go to state 9
    PUTS            shift and go to state 10
    IDENTIFIER      shift and go to state 11
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    LBRACKET        shift and go to state 15
    IF              shift and go to state 16

    statement                      shift and go to state 17
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for POWER in state 37 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for POWER in state 38 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 39 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 39 resolved as shift
WARNING: shift/reduce conflict for POWER in state 39 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for POWER in state 40 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 41 resolved as shift
WARNING: shift/reduce conflict for POWER in state 41 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for POWER in state 42 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 42 resolved as shift
