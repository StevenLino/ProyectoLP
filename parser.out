Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AMPERSAND
    AND
    BEGIN_KW
    CLASS_VAR
    DO
    ENSURE
    FALSE
    FOR
    GLOBAL_VAR
    IDENTIFIER_Q
    IN
    LOGICAL_NOT
    MATCH_REGEX
    MODULE
    NIL
    NOT
    NOT_MATCH_REGEX
    OR
    REDO
    RESCUE
    RETRY
    SEMICOLON
    SUPER
    TERNARY_COLON
    THEN
    TRUE
    UNDEF
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> print
Rule 5     statement -> input
Rule 6     statement -> assignment
Rule 7     statement -> expression
Rule 8     statement -> if_statement
Rule 9     statement -> function_def
Rule 10    statement -> while_statement
Rule 11    statement -> unless_statement
Rule 12    statement -> case_statement
Rule 13    statement -> class_def
Rule 14    print -> PUTS expression
Rule 15    input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER
Rule 16    assignment -> IDENTIFIER ASSIGN expression
Rule 17    assignment -> IDENTIFIER PLUS_ASSIGN expression
Rule 18    assignment -> IDENTIFIER MINUS_ASSIGN expression
Rule 19    assignment -> IDENTIFIER TIMES_ASSIGN expression
Rule 20    assignment -> IDENTIFIER DIVIDE_ASSIGN expression
Rule 21    assignment -> IDENTIFIER OR_ASSIGN expression
Rule 22    assignment -> IDENTIFIER AND_ASSIGN expression
Rule 23    expression -> LPAREN expression RPAREN
Rule 24    expression -> LBRACE statement_list RBRACE
Rule 25    expression -> MINUS expression
Rule 26    expression -> expression PLUS expression
Rule 27    expression -> expression MINUS expression
Rule 28    expression -> expression TIMES expression
Rule 29    expression -> expression DIVIDE expression
Rule 30    expression -> expression MODULO expression
Rule 31    expression -> expression POWER expression
Rule 32    expression -> INTEGER
Rule 33    expression -> FLOAT
Rule 34    expression -> STRING
Rule 35    expression -> SYMBOL_COLON
Rule 36    expression -> DEFINEDQ
Rule 37    expression -> IDENTIFIER
Rule 38    expression -> INSTANCE_VAR
Rule 39    assignment -> INSTANCE_VAR ASSIGN expression
Rule 40    expression -> expression LOGICAL_AND expression
Rule 41    expression -> expression LOGICAL_OR expression
Rule 42    expression -> expression EQUAL_EQUAL expression
Rule 43    expression -> expression NOT_EQUAL expression
Rule 44    expression -> expression GREATER_THAN expression
Rule 45    expression -> expression LESS_THAN expression
Rule 46    expression -> expression GREATER_EQUAL expression
Rule 47    expression -> expression LESS_EQUAL expression
Rule 48    if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW
Rule 49    unless_statement -> UNLESS expression statement_list else_block_opt END_KW
Rule 50    case_statement -> CASE expression when_blocks else_block_opt END_KW
Rule 51    when_blocks -> when_blocks when_block
Rule 52    when_blocks -> when_block
Rule 53    when_block -> WHEN expression statement_list
Rule 54    elsif_blocks_opt -> elsif_blocks
Rule 55    elsif_blocks_opt -> empty
Rule 56    elsif_blocks -> ELSIF expression statement_list elsif_blocks
Rule 57    elsif_blocks -> ELSIF expression statement_list
Rule 58    else_block_opt -> ELSE statement_list
Rule 59    else_block_opt -> empty
Rule 60    empty -> <empty>
Rule 61    function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
Rule 62    statement -> RETURN expression
Rule 63    function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW
Rule 64    function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW
Rule 65    function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW
Rule 66    statement -> YIELD
Rule 67    statement -> YIELD IF expression
Rule 68    class_def -> CLASS CONSTANT statement_list END_KW
Rule 69    expression -> CONSTANT DOT NEW expression_list_opt
Rule 70    expression_list_opt -> expression_list
Rule 71    expression_list_opt -> empty
Rule 72    expression_list -> expression
Rule 73    expression_list -> expression_list COMMA expression
Rule 74    class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW
Rule 75    statement -> ATTR_ACCESSOR symbol_list
Rule 76    statement -> ATTR_READER symbol_list
Rule 77    statement -> ATTR_WRITER symbol_list
Rule 78    symbol_list -> SYMBOL_COLON
Rule 79    symbol_list -> symbol_list COMMA SYMBOL_COLON
Rule 80    expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
Rule 81    arg_list -> arg_list COMMA expression
Rule 82    arg_list -> expression
Rule 83    arg_list -> empty
Rule 84    param -> IDENTIFIER
Rule 85    param -> IDENTIFIER ASSIGN expression
Rule 86    param_list_opt -> param_list
Rule 87    param_list_opt -> empty
Rule 88    param_list -> param
Rule 89    param_list -> param_list COMMA param
Rule 90    while_statement -> WHILE expression statement_list END_KW
Rule 91    statement -> BREAK
Rule 92    statement -> NEXT
Rule 93    expression -> LBRACKET elements RBRACKET
Rule 94    elements -> elements COMMA expression
Rule 95    elements -> expression
Rule 96    elements -> empty
Rule 97    expression -> LBRACE hash_content RBRACE
Rule 98    hash_content -> hash_pair_list
Rule 99    hash_content -> <empty>
Rule 100   hash_pair_list -> hash_pair
Rule 101   hash_pair_list -> hash_pair_list COMMA hash_pair
Rule 102   hash_pair -> SYMBOL_COLON ASSIGN expression
Rule 103   expression -> expression RANGE_INCLUSIVE expression
Rule 104   expression -> expression RANGE_EXCLUSIVE expression

Terminals, with rules where they appear

ALIAS                : 
AMPERSAND            : 
AND                  : 
AND_ASSIGN           : 22
ASSIGN               : 15 16 39 85 102
ATTR_ACCESSOR        : 75
ATTR_READER          : 76
ATTR_WRITER          : 77
BEGIN_KW             : 
BREAK                : 91
CASE                 : 50
CLASS                : 68 74
CLASS_VAR            : 
COMMA                : 73 79 81 89 94 101
CONSTANT             : 65 68 69 74 74
DEF                  : 61 63 64 65
DEFINEDQ             : 36
DIVIDE               : 29
DIVIDE_ASSIGN        : 20
DO                   : 
DOT                  : 15 64 65 69 80
ELSE                 : 58
ELSIF                : 56 57
END_KW               : 48 49 50 61 63 64 65 68 74 90
ENSURE               : 
EQUAL_EQUAL          : 42
FALSE                : 
FLOAT                : 33
FOR                  : 
GETS                 : 15
GLOBAL_VAR           : 
GREATER_EQUAL        : 46
GREATER_THAN         : 44
IDENTIFIER           : 15 15 16 17 18 19 20 21 22 37 61 63 64 65 80 80 84 85
IDENTIFIER_Q         : 
IF                   : 48 67
IN                   : 
INSTANCE_VAR         : 38 39
INTEGER              : 32
LBRACE               : 24 97
LBRACKET             : 93
LESS_EQUAL           : 47
LESS_THAN            : 45 74
LOGICAL_AND          : 40
LOGICAL_NOT          : 
LOGICAL_OR           : 41
LPAREN               : 23 61 80
MATCH_REGEX          : 
MINUS                : 25 27
MINUS_ASSIGN         : 18
MODULE               : 
MODULO               : 30
NEW                  : 69
NEXT                 : 92
NIL                  : 
NOT                  : 
NOT_EQUAL            : 43
NOT_MATCH_REGEX      : 
OR                   : 
OR_ASSIGN            : 21
PLUS                 : 26
PLUS_ASSIGN          : 17
POWER                : 31
PUTS                 : 14
RANGE_EXCLUSIVE      : 104
RANGE_INCLUSIVE      : 103
RBRACE               : 24 97
RBRACKET             : 93
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 62
RPAREN               : 23 61 80
SELF                 : 64
SEMICOLON            : 
STRING               : 34
SUPER                : 
SYMBOL_COLON         : 35 78 79 102
TERNARY_COLON        : 
THEN                 : 
TIMES                : 28
TIMES_ASSIGN         : 19
TRUE                 : 
UNDEF                : 
UNLESS               : 49
UNTIL                : 
WHEN                 : 53
WHILE                : 90
YIELD                : 66 67
error                : 

Nonterminals, with rules where they appear

arg_list             : 80 81
assignment           : 6
case_statement       : 12
class_def            : 13
elements             : 93 94
else_block_opt       : 48 49 50
elsif_blocks         : 54 56
elsif_blocks_opt     : 48
empty                : 55 59 71 83 87 96
expression           : 7 14 16 17 18 19 20 21 22 23 25 26 26 27 27 28 28 29 29 30 30 31 31 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 49 50 53 56 57 62 67 72 73 81 82 85 90 94 95 102 103 103 104 104
expression_list      : 70 73
expression_list_opt  : 69
function_def         : 9
hash_content         : 97
hash_pair            : 100 101
hash_pair_list       : 98 101
if_statement         : 8
input                : 5
param                : 88 89
param_list           : 86 89
param_list_opt       : 61 63
print                : 4
program              : 0
statement            : 2 3
statement_list       : 1 2 24 48 49 53 56 57 58 61 63 64 65 68 74 90
symbol_list          : 75 76 77 79
unless_statement     : 11
when_block           : 51 52
when_blocks          : 50 51
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    $end            reduce using rule 1 (program -> statement_list .)
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 3

    (3) statement_list -> statement .

    RETURN          reduce using rule 3 (statement_list -> statement .)
    YIELD           reduce using rule 3 (statement_list -> statement .)
    ATTR_ACCESSOR   reduce using rule 3 (statement_list -> statement .)
    ATTR_READER     reduce using rule 3 (statement_list -> statement .)
    ATTR_WRITER     reduce using rule 3 (statement_list -> statement .)
    BREAK           reduce using rule 3 (statement_list -> statement .)
    NEXT            reduce using rule 3 (statement_list -> statement .)
    PUTS            reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    INSTANCE_VAR    reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    INTEGER         reduce using rule 3 (statement_list -> statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement .)
    STRING          reduce using rule 3 (statement_list -> statement .)
    SYMBOL_COLON    reduce using rule 3 (statement_list -> statement .)
    DEFINEDQ        reduce using rule 3 (statement_list -> statement .)
    CONSTANT        reduce using rule 3 (statement_list -> statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    DEF             reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    UNLESS          reduce using rule 3 (statement_list -> statement .)
    CASE            reduce using rule 3 (statement_list -> statement .)
    CLASS           reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)
    ELSIF           reduce using rule 3 (statement_list -> statement .)
    ELSE            reduce using rule 3 (statement_list -> statement .)
    END_KW          reduce using rule 3 (statement_list -> statement .)
    WHEN            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> print .

    RETURN          reduce using rule 4 (statement -> print .)
    YIELD           reduce using rule 4 (statement -> print .)
    ATTR_ACCESSOR   reduce using rule 4 (statement -> print .)
    ATTR_READER     reduce using rule 4 (statement -> print .)
    ATTR_WRITER     reduce using rule 4 (statement -> print .)
    BREAK           reduce using rule 4 (statement -> print .)
    NEXT            reduce using rule 4 (statement -> print .)
    PUTS            reduce using rule 4 (statement -> print .)
    IDENTIFIER      reduce using rule 4 (statement -> print .)
    INSTANCE_VAR    reduce using rule 4 (statement -> print .)
    LPAREN          reduce using rule 4 (statement -> print .)
    LBRACE          reduce using rule 4 (statement -> print .)
    MINUS           reduce using rule 4 (statement -> print .)
    INTEGER         reduce using rule 4 (statement -> print .)
    FLOAT           reduce using rule 4 (statement -> print .)
    STRING          reduce using rule 4 (statement -> print .)
    SYMBOL_COLON    reduce using rule 4 (statement -> print .)
    DEFINEDQ        reduce using rule 4 (statement -> print .)
    CONSTANT        reduce using rule 4 (statement -> print .)
    LBRACKET        reduce using rule 4 (statement -> print .)
    IF              reduce using rule 4 (statement -> print .)
    DEF             reduce using rule 4 (statement -> print .)
    WHILE           reduce using rule 4 (statement -> print .)
    UNLESS          reduce using rule 4 (statement -> print .)
    CASE            reduce using rule 4 (statement -> print .)
    CLASS           reduce using rule 4 (statement -> print .)
    $end            reduce using rule 4 (statement -> print .)
    RBRACE          reduce using rule 4 (statement -> print .)
    ELSIF           reduce using rule 4 (statement -> print .)
    ELSE            reduce using rule 4 (statement -> print .)
    END_KW          reduce using rule 4 (statement -> print .)
    WHEN            reduce using rule 4 (statement -> print .)


state 5

    (5) statement -> input .

    RETURN          reduce using rule 5 (statement -> input .)
    YIELD           reduce using rule 5 (statement -> input .)
    ATTR_ACCESSOR   reduce using rule 5 (statement -> input .)
    ATTR_READER     reduce using rule 5 (statement -> input .)
    ATTR_WRITER     reduce using rule 5 (statement -> input .)
    BREAK           reduce using rule 5 (statement -> input .)
    NEXT            reduce using rule 5 (statement -> input .)
    PUTS            reduce using rule 5 (statement -> input .)
    IDENTIFIER      reduce using rule 5 (statement -> input .)
    INSTANCE_VAR    reduce using rule 5 (statement -> input .)
    LPAREN          reduce using rule 5 (statement -> input .)
    LBRACE          reduce using rule 5 (statement -> input .)
    MINUS           reduce using rule 5 (statement -> input .)
    INTEGER         reduce using rule 5 (statement -> input .)
    FLOAT           reduce using rule 5 (statement -> input .)
    STRING          reduce using rule 5 (statement -> input .)
    SYMBOL_COLON    reduce using rule 5 (statement -> input .)
    DEFINEDQ        reduce using rule 5 (statement -> input .)
    CONSTANT        reduce using rule 5 (statement -> input .)
    LBRACKET        reduce using rule 5 (statement -> input .)
    IF              reduce using rule 5 (statement -> input .)
    DEF             reduce using rule 5 (statement -> input .)
    WHILE           reduce using rule 5 (statement -> input .)
    UNLESS          reduce using rule 5 (statement -> input .)
    CASE            reduce using rule 5 (statement -> input .)
    CLASS           reduce using rule 5 (statement -> input .)
    $end            reduce using rule 5 (statement -> input .)
    RBRACE          reduce using rule 5 (statement -> input .)
    ELSIF           reduce using rule 5 (statement -> input .)
    ELSE            reduce using rule 5 (statement -> input .)
    END_KW          reduce using rule 5 (statement -> input .)
    WHEN            reduce using rule 5 (statement -> input .)


state 6

    (6) statement -> assignment .

    RETURN          reduce using rule 6 (statement -> assignment .)
    YIELD           reduce using rule 6 (statement -> assignment .)
    ATTR_ACCESSOR   reduce using rule 6 (statement -> assignment .)
    ATTR_READER     reduce using rule 6 (statement -> assignment .)
    ATTR_WRITER     reduce using rule 6 (statement -> assignment .)
    BREAK           reduce using rule 6 (statement -> assignment .)
    NEXT            reduce using rule 6 (statement -> assignment .)
    PUTS            reduce using rule 6 (statement -> assignment .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment .)
    INSTANCE_VAR    reduce using rule 6 (statement -> assignment .)
    LPAREN          reduce using rule 6 (statement -> assignment .)
    LBRACE          reduce using rule 6 (statement -> assignment .)
    MINUS           reduce using rule 6 (statement -> assignment .)
    INTEGER         reduce using rule 6 (statement -> assignment .)
    FLOAT           reduce using rule 6 (statement -> assignment .)
    STRING          reduce using rule 6 (statement -> assignment .)
    SYMBOL_COLON    reduce using rule 6 (statement -> assignment .)
    DEFINEDQ        reduce using rule 6 (statement -> assignment .)
    CONSTANT        reduce using rule 6 (statement -> assignment .)
    LBRACKET        reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    DEF             reduce using rule 6 (statement -> assignment .)
    WHILE           reduce using rule 6 (statement -> assignment .)
    UNLESS          reduce using rule 6 (statement -> assignment .)
    CASE            reduce using rule 6 (statement -> assignment .)
    CLASS           reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    RBRACE          reduce using rule 6 (statement -> assignment .)
    ELSIF           reduce using rule 6 (statement -> assignment .)
    ELSE            reduce using rule 6 (statement -> assignment .)
    END_KW          reduce using rule 6 (statement -> assignment .)
    WHEN            reduce using rule 6 (statement -> assignment .)


state 7

    (7) statement -> expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 7 (statement -> expression .)
    YIELD           reduce using rule 7 (statement -> expression .)
    ATTR_ACCESSOR   reduce using rule 7 (statement -> expression .)
    ATTR_READER     reduce using rule 7 (statement -> expression .)
    ATTR_WRITER     reduce using rule 7 (statement -> expression .)
    BREAK           reduce using rule 7 (statement -> expression .)
    NEXT            reduce using rule 7 (statement -> expression .)
    PUTS            reduce using rule 7 (statement -> expression .)
    IDENTIFIER      reduce using rule 7 (statement -> expression .)
    INSTANCE_VAR    reduce using rule 7 (statement -> expression .)
    LPAREN          reduce using rule 7 (statement -> expression .)
    LBRACE          reduce using rule 7 (statement -> expression .)
    INTEGER         reduce using rule 7 (statement -> expression .)
    FLOAT           reduce using rule 7 (statement -> expression .)
    STRING          reduce using rule 7 (statement -> expression .)
    SYMBOL_COLON    reduce using rule 7 (statement -> expression .)
    DEFINEDQ        reduce using rule 7 (statement -> expression .)
    CONSTANT        reduce using rule 7 (statement -> expression .)
    LBRACKET        reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    DEF             reduce using rule 7 (statement -> expression .)
    WHILE           reduce using rule 7 (statement -> expression .)
    UNLESS          reduce using rule 7 (statement -> expression .)
    CASE            reduce using rule 7 (statement -> expression .)
    CLASS           reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    RBRACE          reduce using rule 7 (statement -> expression .)
    ELSIF           reduce using rule 7 (statement -> expression .)
    ELSE            reduce using rule 7 (statement -> expression .)
    END_KW          reduce using rule 7 (statement -> expression .)
    WHEN            reduce using rule 7 (statement -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 7 (statement -> expression .) ]


state 8

    (8) statement -> if_statement .

    RETURN          reduce using rule 8 (statement -> if_statement .)
    YIELD           reduce using rule 8 (statement -> if_statement .)
    ATTR_ACCESSOR   reduce using rule 8 (statement -> if_statement .)
    ATTR_READER     reduce using rule 8 (statement -> if_statement .)
    ATTR_WRITER     reduce using rule 8 (statement -> if_statement .)
    BREAK           reduce using rule 8 (statement -> if_statement .)
    NEXT            reduce using rule 8 (statement -> if_statement .)
    PUTS            reduce using rule 8 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> if_statement .)
    INSTANCE_VAR    reduce using rule 8 (statement -> if_statement .)
    LPAREN          reduce using rule 8 (statement -> if_statement .)
    LBRACE          reduce using rule 8 (statement -> if_statement .)
    MINUS           reduce using rule 8 (statement -> if_statement .)
    INTEGER         reduce using rule 8 (statement -> if_statement .)
    FLOAT           reduce using rule 8 (statement -> if_statement .)
    STRING          reduce using rule 8 (statement -> if_statement .)
    SYMBOL_COLON    reduce using rule 8 (statement -> if_statement .)
    DEFINEDQ        reduce using rule 8 (statement -> if_statement .)
    CONSTANT        reduce using rule 8 (statement -> if_statement .)
    LBRACKET        reduce using rule 8 (statement -> if_statement .)
    IF              reduce using rule 8 (statement -> if_statement .)
    DEF             reduce using rule 8 (statement -> if_statement .)
    WHILE           reduce using rule 8 (statement -> if_statement .)
    UNLESS          reduce using rule 8 (statement -> if_statement .)
    CASE            reduce using rule 8 (statement -> if_statement .)
    CLASS           reduce using rule 8 (statement -> if_statement .)
    $end            reduce using rule 8 (statement -> if_statement .)
    RBRACE          reduce using rule 8 (statement -> if_statement .)
    ELSIF           reduce using rule 8 (statement -> if_statement .)
    ELSE            reduce using rule 8 (statement -> if_statement .)
    END_KW          reduce using rule 8 (statement -> if_statement .)
    WHEN            reduce using rule 8 (statement -> if_statement .)


state 9

    (9) statement -> function_def .

    RETURN          reduce using rule 9 (statement -> function_def .)
    YIELD           reduce using rule 9 (statement -> function_def .)
    ATTR_ACCESSOR   reduce using rule 9 (statement -> function_def .)
    ATTR_READER     reduce using rule 9 (statement -> function_def .)
    ATTR_WRITER     reduce using rule 9 (statement -> function_def .)
    BREAK           reduce using rule 9 (statement -> function_def .)
    NEXT            reduce using rule 9 (statement -> function_def .)
    PUTS            reduce using rule 9 (statement -> function_def .)
    IDENTIFIER      reduce using rule 9 (statement -> function_def .)
    INSTANCE_VAR    reduce using rule 9 (statement -> function_def .)
    LPAREN          reduce using rule 9 (statement -> function_def .)
    LBRACE          reduce using rule 9 (statement -> function_def .)
    MINUS           reduce using rule 9 (statement -> function_def .)
    INTEGER         reduce using rule 9 (statement -> function_def .)
    FLOAT           reduce using rule 9 (statement -> function_def .)
    STRING          reduce using rule 9 (statement -> function_def .)
    SYMBOL_COLON    reduce using rule 9 (statement -> function_def .)
    DEFINEDQ        reduce using rule 9 (statement -> function_def .)
    CONSTANT        reduce using rule 9 (statement -> function_def .)
    LBRACKET        reduce using rule 9 (statement -> function_def .)
    IF              reduce using rule 9 (statement -> function_def .)
    DEF             reduce using rule 9 (statement -> function_def .)
    WHILE           reduce using rule 9 (statement -> function_def .)
    UNLESS          reduce using rule 9 (statement -> function_def .)
    CASE            reduce using rule 9 (statement -> function_def .)
    CLASS           reduce using rule 9 (statement -> function_def .)
    $end            reduce using rule 9 (statement -> function_def .)
    RBRACE          reduce using rule 9 (statement -> function_def .)
    ELSIF           reduce using rule 9 (statement -> function_def .)
    ELSE            reduce using rule 9 (statement -> function_def .)
    END_KW          reduce using rule 9 (statement -> function_def .)
    WHEN            reduce using rule 9 (statement -> function_def .)


state 10

    (10) statement -> while_statement .

    RETURN          reduce using rule 10 (statement -> while_statement .)
    YIELD           reduce using rule 10 (statement -> while_statement .)
    ATTR_ACCESSOR   reduce using rule 10 (statement -> while_statement .)
    ATTR_READER     reduce using rule 10 (statement -> while_statement .)
    ATTR_WRITER     reduce using rule 10 (statement -> while_statement .)
    BREAK           reduce using rule 10 (statement -> while_statement .)
    NEXT            reduce using rule 10 (statement -> while_statement .)
    PUTS            reduce using rule 10 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> while_statement .)
    INSTANCE_VAR    reduce using rule 10 (statement -> while_statement .)
    LPAREN          reduce using rule 10 (statement -> while_statement .)
    LBRACE          reduce using rule 10 (statement -> while_statement .)
    MINUS           reduce using rule 10 (statement -> while_statement .)
    INTEGER         reduce using rule 10 (statement -> while_statement .)
    FLOAT           reduce using rule 10 (statement -> while_statement .)
    STRING          reduce using rule 10 (statement -> while_statement .)
    SYMBOL_COLON    reduce using rule 10 (statement -> while_statement .)
    DEFINEDQ        reduce using rule 10 (statement -> while_statement .)
    CONSTANT        reduce using rule 10 (statement -> while_statement .)
    LBRACKET        reduce using rule 10 (statement -> while_statement .)
    IF              reduce using rule 10 (statement -> while_statement .)
    DEF             reduce using rule 10 (statement -> while_statement .)
    WHILE           reduce using rule 10 (statement -> while_statement .)
    UNLESS          reduce using rule 10 (statement -> while_statement .)
    CASE            reduce using rule 10 (statement -> while_statement .)
    CLASS           reduce using rule 10 (statement -> while_statement .)
    $end            reduce using rule 10 (statement -> while_statement .)
    RBRACE          reduce using rule 10 (statement -> while_statement .)
    ELSIF           reduce using rule 10 (statement -> while_statement .)
    ELSE            reduce using rule 10 (statement -> while_statement .)
    END_KW          reduce using rule 10 (statement -> while_statement .)
    WHEN            reduce using rule 10 (statement -> while_statement .)


state 11

    (11) statement -> unless_statement .

    RETURN          reduce using rule 11 (statement -> unless_statement .)
    YIELD           reduce using rule 11 (statement -> unless_statement .)
    ATTR_ACCESSOR   reduce using rule 11 (statement -> unless_statement .)
    ATTR_READER     reduce using rule 11 (statement -> unless_statement .)
    ATTR_WRITER     reduce using rule 11 (statement -> unless_statement .)
    BREAK           reduce using rule 11 (statement -> unless_statement .)
    NEXT            reduce using rule 11 (statement -> unless_statement .)
    PUTS            reduce using rule 11 (statement -> unless_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> unless_statement .)
    INSTANCE_VAR    reduce using rule 11 (statement -> unless_statement .)
    LPAREN          reduce using rule 11 (statement -> unless_statement .)
    LBRACE          reduce using rule 11 (statement -> unless_statement .)
    MINUS           reduce using rule 11 (statement -> unless_statement .)
    INTEGER         reduce using rule 11 (statement -> unless_statement .)
    FLOAT           reduce using rule 11 (statement -> unless_statement .)
    STRING          reduce using rule 11 (statement -> unless_statement .)
    SYMBOL_COLON    reduce using rule 11 (statement -> unless_statement .)
    DEFINEDQ        reduce using rule 11 (statement -> unless_statement .)
    CONSTANT        reduce using rule 11 (statement -> unless_statement .)
    LBRACKET        reduce using rule 11 (statement -> unless_statement .)
    IF              reduce using rule 11 (statement -> unless_statement .)
    DEF             reduce using rule 11 (statement -> unless_statement .)
    WHILE           reduce using rule 11 (statement -> unless_statement .)
    UNLESS          reduce using rule 11 (statement -> unless_statement .)
    CASE            reduce using rule 11 (statement -> unless_statement .)
    CLASS           reduce using rule 11 (statement -> unless_statement .)
    $end            reduce using rule 11 (statement -> unless_statement .)
    RBRACE          reduce using rule 11 (statement -> unless_statement .)
    ELSIF           reduce using rule 11 (statement -> unless_statement .)
    ELSE            reduce using rule 11 (statement -> unless_statement .)
    END_KW          reduce using rule 11 (statement -> unless_statement .)
    WHEN            reduce using rule 11 (statement -> unless_statement .)


state 12

    (12) statement -> case_statement .

    RETURN          reduce using rule 12 (statement -> case_statement .)
    YIELD           reduce using rule 12 (statement -> case_statement .)
    ATTR_ACCESSOR   reduce using rule 12 (statement -> case_statement .)
    ATTR_READER     reduce using rule 12 (statement -> case_statement .)
    ATTR_WRITER     reduce using rule 12 (statement -> case_statement .)
    BREAK           reduce using rule 12 (statement -> case_statement .)
    NEXT            reduce using rule 12 (statement -> case_statement .)
    PUTS            reduce using rule 12 (statement -> case_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> case_statement .)
    INSTANCE_VAR    reduce using rule 12 (statement -> case_statement .)
    LPAREN          reduce using rule 12 (statement -> case_statement .)
    LBRACE          reduce using rule 12 (statement -> case_statement .)
    MINUS           reduce using rule 12 (statement -> case_statement .)
    INTEGER         reduce using rule 12 (statement -> case_statement .)
    FLOAT           reduce using rule 12 (statement -> case_statement .)
    STRING          reduce using rule 12 (statement -> case_statement .)
    SYMBOL_COLON    reduce using rule 12 (statement -> case_statement .)
    DEFINEDQ        reduce using rule 12 (statement -> case_statement .)
    CONSTANT        reduce using rule 12 (statement -> case_statement .)
    LBRACKET        reduce using rule 12 (statement -> case_statement .)
    IF              reduce using rule 12 (statement -> case_statement .)
    DEF             reduce using rule 12 (statement -> case_statement .)
    WHILE           reduce using rule 12 (statement -> case_statement .)
    UNLESS          reduce using rule 12 (statement -> case_statement .)
    CASE            reduce using rule 12 (statement -> case_statement .)
    CLASS           reduce using rule 12 (statement -> case_statement .)
    $end            reduce using rule 12 (statement -> case_statement .)
    RBRACE          reduce using rule 12 (statement -> case_statement .)
    ELSIF           reduce using rule 12 (statement -> case_statement .)
    ELSE            reduce using rule 12 (statement -> case_statement .)
    END_KW          reduce using rule 12 (statement -> case_statement .)
    WHEN            reduce using rule 12 (statement -> case_statement .)


state 13

    (13) statement -> class_def .

    RETURN          reduce using rule 13 (statement -> class_def .)
    YIELD           reduce using rule 13 (statement -> class_def .)
    ATTR_ACCESSOR   reduce using rule 13 (statement -> class_def .)
    ATTR_READER     reduce using rule 13 (statement -> class_def .)
    ATTR_WRITER     reduce using rule 13 (statement -> class_def .)
    BREAK           reduce using rule 13 (statement -> class_def .)
    NEXT            reduce using rule 13 (statement -> class_def .)
    PUTS            reduce using rule 13 (statement -> class_def .)
    IDENTIFIER      reduce using rule 13 (statement -> class_def .)
    INSTANCE_VAR    reduce using rule 13 (statement -> class_def .)
    LPAREN          reduce using rule 13 (statement -> class_def .)
    LBRACE          reduce using rule 13 (statement -> class_def .)
    MINUS           reduce using rule 13 (statement -> class_def .)
    INTEGER         reduce using rule 13 (statement -> class_def .)
    FLOAT           reduce using rule 13 (statement -> class_def .)
    STRING          reduce using rule 13 (statement -> class_def .)
    SYMBOL_COLON    reduce using rule 13 (statement -> class_def .)
    DEFINEDQ        reduce using rule 13 (statement -> class_def .)
    CONSTANT        reduce using rule 13 (statement -> class_def .)
    LBRACKET        reduce using rule 13 (statement -> class_def .)
    IF              reduce using rule 13 (statement -> class_def .)
    DEF             reduce using rule 13 (statement -> class_def .)
    WHILE           reduce using rule 13 (statement -> class_def .)
    UNLESS          reduce using rule 13 (statement -> class_def .)
    CASE            reduce using rule 13 (statement -> class_def .)
    CLASS           reduce using rule 13 (statement -> class_def .)
    $end            reduce using rule 13 (statement -> class_def .)
    RBRACE          reduce using rule 13 (statement -> class_def .)
    ELSIF           reduce using rule 13 (statement -> class_def .)
    ELSE            reduce using rule 13 (statement -> class_def .)
    END_KW          reduce using rule 13 (statement -> class_def .)
    WHEN            reduce using rule 13 (statement -> class_def .)


state 14

    (62) statement -> RETURN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 57

state 15

    (66) statement -> YIELD .
    (67) statement -> YIELD . IF expression

  ! shift/reduce conflict for IF resolved as shift
    RETURN          reduce using rule 66 (statement -> YIELD .)
    YIELD           reduce using rule 66 (statement -> YIELD .)
    ATTR_ACCESSOR   reduce using rule 66 (statement -> YIELD .)
    ATTR_READER     reduce using rule 66 (statement -> YIELD .)
    ATTR_WRITER     reduce using rule 66 (statement -> YIELD .)
    BREAK           reduce using rule 66 (statement -> YIELD .)
    NEXT            reduce using rule 66 (statement -> YIELD .)
    PUTS            reduce using rule 66 (statement -> YIELD .)
    IDENTIFIER      reduce using rule 66 (statement -> YIELD .)
    INSTANCE_VAR    reduce using rule 66 (statement -> YIELD .)
    LPAREN          reduce using rule 66 (statement -> YIELD .)
    LBRACE          reduce using rule 66 (statement -> YIELD .)
    MINUS           reduce using rule 66 (statement -> YIELD .)
    INTEGER         reduce using rule 66 (statement -> YIELD .)
    FLOAT           reduce using rule 66 (statement -> YIELD .)
    STRING          reduce using rule 66 (statement -> YIELD .)
    SYMBOL_COLON    reduce using rule 66 (statement -> YIELD .)
    DEFINEDQ        reduce using rule 66 (statement -> YIELD .)
    CONSTANT        reduce using rule 66 (statement -> YIELD .)
    LBRACKET        reduce using rule 66 (statement -> YIELD .)
    DEF             reduce using rule 66 (statement -> YIELD .)
    WHILE           reduce using rule 66 (statement -> YIELD .)
    UNLESS          reduce using rule 66 (statement -> YIELD .)
    CASE            reduce using rule 66 (statement -> YIELD .)
    CLASS           reduce using rule 66 (statement -> YIELD .)
    $end            reduce using rule 66 (statement -> YIELD .)
    RBRACE          reduce using rule 66 (statement -> YIELD .)
    ELSIF           reduce using rule 66 (statement -> YIELD .)
    ELSE            reduce using rule 66 (statement -> YIELD .)
    END_KW          reduce using rule 66 (statement -> YIELD .)
    WHEN            reduce using rule 66 (statement -> YIELD .)
    IF              shift and go to state 60

  ! IF              [ reduce using rule 66 (statement -> YIELD .) ]


state 16

    (48) if_statement -> IF . expression statement_list elsif_blocks_opt else_block_opt END_KW
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 61

state 17

    (75) statement -> ATTR_ACCESSOR . symbol_list
    (78) symbol_list -> . SYMBOL_COLON
    (79) symbol_list -> . symbol_list COMMA SYMBOL_COLON

    SYMBOL_COLON    shift and go to state 63

    symbol_list                    shift and go to state 62

state 18

    (76) statement -> ATTR_READER . symbol_list
    (78) symbol_list -> . SYMBOL_COLON
    (79) symbol_list -> . symbol_list COMMA SYMBOL_COLON

    SYMBOL_COLON    shift and go to state 63

    symbol_list                    shift and go to state 64

state 19

    (77) statement -> ATTR_WRITER . symbol_list
    (78) symbol_list -> . SYMBOL_COLON
    (79) symbol_list -> . symbol_list COMMA SYMBOL_COLON

    SYMBOL_COLON    shift and go to state 63

    symbol_list                    shift and go to state 65

state 20

    (91) statement -> BREAK .

    RETURN          reduce using rule 91 (statement -> BREAK .)
    YIELD           reduce using rule 91 (statement -> BREAK .)
    ATTR_ACCESSOR   reduce using rule 91 (statement -> BREAK .)
    ATTR_READER     reduce using rule 91 (statement -> BREAK .)
    ATTR_WRITER     reduce using rule 91 (statement -> BREAK .)
    BREAK           reduce using rule 91 (statement -> BREAK .)
    NEXT            reduce using rule 91 (statement -> BREAK .)
    PUTS            reduce using rule 91 (statement -> BREAK .)
    IDENTIFIER      reduce using rule 91 (statement -> BREAK .)
    INSTANCE_VAR    reduce using rule 91 (statement -> BREAK .)
    LPAREN          reduce using rule 91 (statement -> BREAK .)
    LBRACE          reduce using rule 91 (statement -> BREAK .)
    MINUS           reduce using rule 91 (statement -> BREAK .)
    INTEGER         reduce using rule 91 (statement -> BREAK .)
    FLOAT           reduce using rule 91 (statement -> BREAK .)
    STRING          reduce using rule 91 (statement -> BREAK .)
    SYMBOL_COLON    reduce using rule 91 (statement -> BREAK .)
    DEFINEDQ        reduce using rule 91 (statement -> BREAK .)
    CONSTANT        reduce using rule 91 (statement -> BREAK .)
    LBRACKET        reduce using rule 91 (statement -> BREAK .)
    IF              reduce using rule 91 (statement -> BREAK .)
    DEF             reduce using rule 91 (statement -> BREAK .)
    WHILE           reduce using rule 91 (statement -> BREAK .)
    UNLESS          reduce using rule 91 (statement -> BREAK .)
    CASE            reduce using rule 91 (statement -> BREAK .)
    CLASS           reduce using rule 91 (statement -> BREAK .)
    $end            reduce using rule 91 (statement -> BREAK .)
    RBRACE          reduce using rule 91 (statement -> BREAK .)
    ELSIF           reduce using rule 91 (statement -> BREAK .)
    ELSE            reduce using rule 91 (statement -> BREAK .)
    END_KW          reduce using rule 91 (statement -> BREAK .)
    WHEN            reduce using rule 91 (statement -> BREAK .)


state 21

    (92) statement -> NEXT .

    RETURN          reduce using rule 92 (statement -> NEXT .)
    YIELD           reduce using rule 92 (statement -> NEXT .)
    ATTR_ACCESSOR   reduce using rule 92 (statement -> NEXT .)
    ATTR_READER     reduce using rule 92 (statement -> NEXT .)
    ATTR_WRITER     reduce using rule 92 (statement -> NEXT .)
    BREAK           reduce using rule 92 (statement -> NEXT .)
    NEXT            reduce using rule 92 (statement -> NEXT .)
    PUTS            reduce using rule 92 (statement -> NEXT .)
    IDENTIFIER      reduce using rule 92 (statement -> NEXT .)
    INSTANCE_VAR    reduce using rule 92 (statement -> NEXT .)
    LPAREN          reduce using rule 92 (statement -> NEXT .)
    LBRACE          reduce using rule 92 (statement -> NEXT .)
    MINUS           reduce using rule 92 (statement -> NEXT .)
    INTEGER         reduce using rule 92 (statement -> NEXT .)
    FLOAT           reduce using rule 92 (statement -> NEXT .)
    STRING          reduce using rule 92 (statement -> NEXT .)
    SYMBOL_COLON    reduce using rule 92 (statement -> NEXT .)
    DEFINEDQ        reduce using rule 92 (statement -> NEXT .)
    CONSTANT        reduce using rule 92 (statement -> NEXT .)
    LBRACKET        reduce using rule 92 (statement -> NEXT .)
    IF              reduce using rule 92 (statement -> NEXT .)
    DEF             reduce using rule 92 (statement -> NEXT .)
    WHILE           reduce using rule 92 (statement -> NEXT .)
    UNLESS          reduce using rule 92 (statement -> NEXT .)
    CASE            reduce using rule 92 (statement -> NEXT .)
    CLASS           reduce using rule 92 (statement -> NEXT .)
    $end            reduce using rule 92 (statement -> NEXT .)
    RBRACE          reduce using rule 92 (statement -> NEXT .)
    ELSIF           reduce using rule 92 (statement -> NEXT .)
    ELSE            reduce using rule 92 (statement -> NEXT .)
    END_KW          reduce using rule 92 (statement -> NEXT .)
    WHEN            reduce using rule 92 (statement -> NEXT .)


state 22

    (14) print -> PUTS . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 66

state 23

    (15) input -> IDENTIFIER . ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> IDENTIFIER . ASSIGN expression
    (17) assignment -> IDENTIFIER . PLUS_ASSIGN expression
    (18) assignment -> IDENTIFIER . MINUS_ASSIGN expression
    (19) assignment -> IDENTIFIER . TIMES_ASSIGN expression
    (20) assignment -> IDENTIFIER . DIVIDE_ASSIGN expression
    (21) assignment -> IDENTIFIER . OR_ASSIGN expression
    (22) assignment -> IDENTIFIER . AND_ASSIGN expression
    (37) expression -> IDENTIFIER .
    (80) expression -> IDENTIFIER . DOT IDENTIFIER LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 67
    PLUS_ASSIGN     shift and go to state 69
    MINUS_ASSIGN    shift and go to state 70
    TIMES_ASSIGN    shift and go to state 71
    DIVIDE_ASSIGN   shift and go to state 72
    OR_ASSIGN       shift and go to state 73
    AND_ASSIGN      shift and go to state 74
    PLUS            reduce using rule 37 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 37 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 37 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 37 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 37 (expression -> IDENTIFIER .)
    POWER           reduce using rule 37 (expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 37 (expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 37 (expression -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 37 (expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 37 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 37 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 37 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 37 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 37 (expression -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 37 (expression -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 37 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 37 (expression -> IDENTIFIER .)
    YIELD           reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_ACCESSOR   reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_READER     reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_WRITER     reduce using rule 37 (expression -> IDENTIFIER .)
    BREAK           reduce using rule 37 (expression -> IDENTIFIER .)
    NEXT            reduce using rule 37 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 37 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 37 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 37 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 37 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 37 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 37 (expression -> IDENTIFIER .)
    STRING          reduce using rule 37 (expression -> IDENTIFIER .)
    SYMBOL_COLON    reduce using rule 37 (expression -> IDENTIFIER .)
    DEFINEDQ        reduce using rule 37 (expression -> IDENTIFIER .)
    CONSTANT        reduce using rule 37 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 37 (expression -> IDENTIFIER .)
    IF              reduce using rule 37 (expression -> IDENTIFIER .)
    DEF             reduce using rule 37 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 37 (expression -> IDENTIFIER .)
    UNLESS          reduce using rule 37 (expression -> IDENTIFIER .)
    CASE            reduce using rule 37 (expression -> IDENTIFIER .)
    CLASS           reduce using rule 37 (expression -> IDENTIFIER .)
    $end            reduce using rule 37 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 37 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 37 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER .)
    END_KW          reduce using rule 37 (expression -> IDENTIFIER .)
    WHEN            reduce using rule 37 (expression -> IDENTIFIER .)
    DOT             shift and go to state 68


state 24

    (39) assignment -> INSTANCE_VAR . ASSIGN expression
    (38) expression -> INSTANCE_VAR .

    ASSIGN          shift and go to state 75
    PLUS            reduce using rule 38 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 38 (expression -> INSTANCE_VAR .)
    TIMES           reduce using rule 38 (expression -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    MODULO          reduce using rule 38 (expression -> INSTANCE_VAR .)
    POWER           reduce using rule 38 (expression -> INSTANCE_VAR .)
    LOGICAL_AND     reduce using rule 38 (expression -> INSTANCE_VAR .)
    LOGICAL_OR      reduce using rule 38 (expression -> INSTANCE_VAR .)
    EQUAL_EQUAL     reduce using rule 38 (expression -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 38 (expression -> INSTANCE_VAR .)
    GREATER_THAN    reduce using rule 38 (expression -> INSTANCE_VAR .)
    LESS_THAN       reduce using rule 38 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 38 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 38 (expression -> INSTANCE_VAR .)
    RANGE_INCLUSIVE reduce using rule 38 (expression -> INSTANCE_VAR .)
    RANGE_EXCLUSIVE reduce using rule 38 (expression -> INSTANCE_VAR .)
    RETURN          reduce using rule 38 (expression -> INSTANCE_VAR .)
    YIELD           reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_ACCESSOR   reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_READER     reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_WRITER     reduce using rule 38 (expression -> INSTANCE_VAR .)
    BREAK           reduce using rule 38 (expression -> INSTANCE_VAR .)
    NEXT            reduce using rule 38 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 38 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 38 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 38 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 38 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 38 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 38 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 38 (expression -> INSTANCE_VAR .)
    SYMBOL_COLON    reduce using rule 38 (expression -> INSTANCE_VAR .)
    DEFINEDQ        reduce using rule 38 (expression -> INSTANCE_VAR .)
    CONSTANT        reduce using rule 38 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 38 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 38 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 38 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 38 (expression -> INSTANCE_VAR .)
    UNLESS          reduce using rule 38 (expression -> INSTANCE_VAR .)
    CASE            reduce using rule 38 (expression -> INSTANCE_VAR .)
    CLASS           reduce using rule 38 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 38 (expression -> INSTANCE_VAR .)
    RBRACE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 38 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 38 (expression -> INSTANCE_VAR .)
    END_KW          reduce using rule 38 (expression -> INSTANCE_VAR .)
    WHEN            reduce using rule 38 (expression -> INSTANCE_VAR .)


state 25

    (23) expression -> LPAREN . expression RPAREN
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 76

state 26

    (24) expression -> LBRACE . statement_list RBRACE
    (97) expression -> LBRACE . hash_content RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (98) hash_content -> . hash_pair_list
    (99) hash_content -> .
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (100) hash_pair_list -> . hash_pair
    (101) hash_pair_list -> . hash_pair_list COMMA hash_pair
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW
    (102) hash_pair -> . SYMBOL_COLON ASSIGN expression

    RBRACE          reduce using rule 99 (hash_content -> .)
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 81
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 77
    hash_content                   shift and go to state 78
    statement                      shift and go to state 3
    hash_pair_list                 shift and go to state 79
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13
    hash_pair                      shift and go to state 80

state 27

    (25) expression -> MINUS . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 82

state 28

    (32) expression -> INTEGER .

    PLUS            reduce using rule 32 (expression -> INTEGER .)
    MINUS           reduce using rule 32 (expression -> INTEGER .)
    TIMES           reduce using rule 32 (expression -> INTEGER .)
    DIVIDE          reduce using rule 32 (expression -> INTEGER .)
    MODULO          reduce using rule 32 (expression -> INTEGER .)
    POWER           reduce using rule 32 (expression -> INTEGER .)
    LOGICAL_AND     reduce using rule 32 (expression -> INTEGER .)
    LOGICAL_OR      reduce using rule 32 (expression -> INTEGER .)
    EQUAL_EQUAL     reduce using rule 32 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 32 (expression -> INTEGER .)
    GREATER_THAN    reduce using rule 32 (expression -> INTEGER .)
    LESS_THAN       reduce using rule 32 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 32 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 32 (expression -> INTEGER .)
    RANGE_INCLUSIVE reduce using rule 32 (expression -> INTEGER .)
    RANGE_EXCLUSIVE reduce using rule 32 (expression -> INTEGER .)
    RETURN          reduce using rule 32 (expression -> INTEGER .)
    YIELD           reduce using rule 32 (expression -> INTEGER .)
    ATTR_ACCESSOR   reduce using rule 32 (expression -> INTEGER .)
    ATTR_READER     reduce using rule 32 (expression -> INTEGER .)
    ATTR_WRITER     reduce using rule 32 (expression -> INTEGER .)
    BREAK           reduce using rule 32 (expression -> INTEGER .)
    NEXT            reduce using rule 32 (expression -> INTEGER .)
    PUTS            reduce using rule 32 (expression -> INTEGER .)
    IDENTIFIER      reduce using rule 32 (expression -> INTEGER .)
    INSTANCE_VAR    reduce using rule 32 (expression -> INTEGER .)
    LPAREN          reduce using rule 32 (expression -> INTEGER .)
    LBRACE          reduce using rule 32 (expression -> INTEGER .)
    INTEGER         reduce using rule 32 (expression -> INTEGER .)
    FLOAT           reduce using rule 32 (expression -> INTEGER .)
    STRING          reduce using rule 32 (expression -> INTEGER .)
    SYMBOL_COLON    reduce using rule 32 (expression -> INTEGER .)
    DEFINEDQ        reduce using rule 32 (expression -> INTEGER .)
    CONSTANT        reduce using rule 32 (expression -> INTEGER .)
    LBRACKET        reduce using rule 32 (expression -> INTEGER .)
    IF              reduce using rule 32 (expression -> INTEGER .)
    DEF             reduce using rule 32 (expression -> INTEGER .)
    WHILE           reduce using rule 32 (expression -> INTEGER .)
    UNLESS          reduce using rule 32 (expression -> INTEGER .)
    CASE            reduce using rule 32 (expression -> INTEGER .)
    CLASS           reduce using rule 32 (expression -> INTEGER .)
    $end            reduce using rule 32 (expression -> INTEGER .)
    RBRACE          reduce using rule 32 (expression -> INTEGER .)
    ELSIF           reduce using rule 32 (expression -> INTEGER .)
    ELSE            reduce using rule 32 (expression -> INTEGER .)
    END_KW          reduce using rule 32 (expression -> INTEGER .)
    WHEN            reduce using rule 32 (expression -> INTEGER .)
    RPAREN          reduce using rule 32 (expression -> INTEGER .)
    RBRACKET        reduce using rule 32 (expression -> INTEGER .)
    COMMA           reduce using rule 32 (expression -> INTEGER .)


state 29

    (33) expression -> FLOAT .

    PLUS            reduce using rule 33 (expression -> FLOAT .)
    MINUS           reduce using rule 33 (expression -> FLOAT .)
    TIMES           reduce using rule 33 (expression -> FLOAT .)
    DIVIDE          reduce using rule 33 (expression -> FLOAT .)
    MODULO          reduce using rule 33 (expression -> FLOAT .)
    POWER           reduce using rule 33 (expression -> FLOAT .)
    LOGICAL_AND     reduce using rule 33 (expression -> FLOAT .)
    LOGICAL_OR      reduce using rule 33 (expression -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 33 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 33 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 33 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 33 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 33 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 33 (expression -> FLOAT .)
    RANGE_INCLUSIVE reduce using rule 33 (expression -> FLOAT .)
    RANGE_EXCLUSIVE reduce using rule 33 (expression -> FLOAT .)
    RETURN          reduce using rule 33 (expression -> FLOAT .)
    YIELD           reduce using rule 33 (expression -> FLOAT .)
    ATTR_ACCESSOR   reduce using rule 33 (expression -> FLOAT .)
    ATTR_READER     reduce using rule 33 (expression -> FLOAT .)
    ATTR_WRITER     reduce using rule 33 (expression -> FLOAT .)
    BREAK           reduce using rule 33 (expression -> FLOAT .)
    NEXT            reduce using rule 33 (expression -> FLOAT .)
    PUTS            reduce using rule 33 (expression -> FLOAT .)
    IDENTIFIER      reduce using rule 33 (expression -> FLOAT .)
    INSTANCE_VAR    reduce using rule 33 (expression -> FLOAT .)
    LPAREN          reduce using rule 33 (expression -> FLOAT .)
    LBRACE          reduce using rule 33 (expression -> FLOAT .)
    INTEGER         reduce using rule 33 (expression -> FLOAT .)
    FLOAT           reduce using rule 33 (expression -> FLOAT .)
    STRING          reduce using rule 33 (expression -> FLOAT .)
    SYMBOL_COLON    reduce using rule 33 (expression -> FLOAT .)
    DEFINEDQ        reduce using rule 33 (expression -> FLOAT .)
    CONSTANT        reduce using rule 33 (expression -> FLOAT .)
    LBRACKET        reduce using rule 33 (expression -> FLOAT .)
    IF              reduce using rule 33 (expression -> FLOAT .)
    DEF             reduce using rule 33 (expression -> FLOAT .)
    WHILE           reduce using rule 33 (expression -> FLOAT .)
    UNLESS          reduce using rule 33 (expression -> FLOAT .)
    CASE            reduce using rule 33 (expression -> FLOAT .)
    CLASS           reduce using rule 33 (expression -> FLOAT .)
    $end            reduce using rule 33 (expression -> FLOAT .)
    RBRACE          reduce using rule 33 (expression -> FLOAT .)
    ELSIF           reduce using rule 33 (expression -> FLOAT .)
    ELSE            reduce using rule 33 (expression -> FLOAT .)
    END_KW          reduce using rule 33 (expression -> FLOAT .)
    WHEN            reduce using rule 33 (expression -> FLOAT .)
    RPAREN          reduce using rule 33 (expression -> FLOAT .)
    RBRACKET        reduce using rule 33 (expression -> FLOAT .)
    COMMA           reduce using rule 33 (expression -> FLOAT .)


state 30

    (34) expression -> STRING .

    PLUS            reduce using rule 34 (expression -> STRING .)
    MINUS           reduce using rule 34 (expression -> STRING .)
    TIMES           reduce using rule 34 (expression -> STRING .)
    DIVIDE          reduce using rule 34 (expression -> STRING .)
    MODULO          reduce using rule 34 (expression -> STRING .)
    POWER           reduce using rule 34 (expression -> STRING .)
    LOGICAL_AND     reduce using rule 34 (expression -> STRING .)
    LOGICAL_OR      reduce using rule 34 (expression -> STRING .)
    EQUAL_EQUAL     reduce using rule 34 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 34 (expression -> STRING .)
    GREATER_THAN    reduce using rule 34 (expression -> STRING .)
    LESS_THAN       reduce using rule 34 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 34 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 34 (expression -> STRING .)
    RANGE_INCLUSIVE reduce using rule 34 (expression -> STRING .)
    RANGE_EXCLUSIVE reduce using rule 34 (expression -> STRING .)
    RETURN          reduce using rule 34 (expression -> STRING .)
    YIELD           reduce using rule 34 (expression -> STRING .)
    ATTR_ACCESSOR   reduce using rule 34 (expression -> STRING .)
    ATTR_READER     reduce using rule 34 (expression -> STRING .)
    ATTR_WRITER     reduce using rule 34 (expression -> STRING .)
    BREAK           reduce using rule 34 (expression -> STRING .)
    NEXT            reduce using rule 34 (expression -> STRING .)
    PUTS            reduce using rule 34 (expression -> STRING .)
    IDENTIFIER      reduce using rule 34 (expression -> STRING .)
    INSTANCE_VAR    reduce using rule 34 (expression -> STRING .)
    LPAREN          reduce using rule 34 (expression -> STRING .)
    LBRACE          reduce using rule 34 (expression -> STRING .)
    INTEGER         reduce using rule 34 (expression -> STRING .)
    FLOAT           reduce using rule 34 (expression -> STRING .)
    STRING          reduce using rule 34 (expression -> STRING .)
    SYMBOL_COLON    reduce using rule 34 (expression -> STRING .)
    DEFINEDQ        reduce using rule 34 (expression -> STRING .)
    CONSTANT        reduce using rule 34 (expression -> STRING .)
    LBRACKET        reduce using rule 34 (expression -> STRING .)
    IF              reduce using rule 34 (expression -> STRING .)
    DEF             reduce using rule 34 (expression -> STRING .)
    WHILE           reduce using rule 34 (expression -> STRING .)
    UNLESS          reduce using rule 34 (expression -> STRING .)
    CASE            reduce using rule 34 (expression -> STRING .)
    CLASS           reduce using rule 34 (expression -> STRING .)
    $end            reduce using rule 34 (expression -> STRING .)
    RBRACE          reduce using rule 34 (expression -> STRING .)
    ELSIF           reduce using rule 34 (expression -> STRING .)
    ELSE            reduce using rule 34 (expression -> STRING .)
    END_KW          reduce using rule 34 (expression -> STRING .)
    WHEN            reduce using rule 34 (expression -> STRING .)
    RPAREN          reduce using rule 34 (expression -> STRING .)
    RBRACKET        reduce using rule 34 (expression -> STRING .)
    COMMA           reduce using rule 34 (expression -> STRING .)


state 31

    (35) expression -> SYMBOL_COLON .

    PLUS            reduce using rule 35 (expression -> SYMBOL_COLON .)
    MINUS           reduce using rule 35 (expression -> SYMBOL_COLON .)
    TIMES           reduce using rule 35 (expression -> SYMBOL_COLON .)
    DIVIDE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    MODULO          reduce using rule 35 (expression -> SYMBOL_COLON .)
    POWER           reduce using rule 35 (expression -> SYMBOL_COLON .)
    LOGICAL_AND     reduce using rule 35 (expression -> SYMBOL_COLON .)
    LOGICAL_OR      reduce using rule 35 (expression -> SYMBOL_COLON .)
    EQUAL_EQUAL     reduce using rule 35 (expression -> SYMBOL_COLON .)
    NOT_EQUAL       reduce using rule 35 (expression -> SYMBOL_COLON .)
    GREATER_THAN    reduce using rule 35 (expression -> SYMBOL_COLON .)
    LESS_THAN       reduce using rule 35 (expression -> SYMBOL_COLON .)
    GREATER_EQUAL   reduce using rule 35 (expression -> SYMBOL_COLON .)
    LESS_EQUAL      reduce using rule 35 (expression -> SYMBOL_COLON .)
    RANGE_INCLUSIVE reduce using rule 35 (expression -> SYMBOL_COLON .)
    RANGE_EXCLUSIVE reduce using rule 35 (expression -> SYMBOL_COLON .)
    RETURN          reduce using rule 35 (expression -> SYMBOL_COLON .)
    YIELD           reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_ACCESSOR   reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_READER     reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_WRITER     reduce using rule 35 (expression -> SYMBOL_COLON .)
    BREAK           reduce using rule 35 (expression -> SYMBOL_COLON .)
    NEXT            reduce using rule 35 (expression -> SYMBOL_COLON .)
    PUTS            reduce using rule 35 (expression -> SYMBOL_COLON .)
    IDENTIFIER      reduce using rule 35 (expression -> SYMBOL_COLON .)
    INSTANCE_VAR    reduce using rule 35 (expression -> SYMBOL_COLON .)
    LPAREN          reduce using rule 35 (expression -> SYMBOL_COLON .)
    LBRACE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    INTEGER         reduce using rule 35 (expression -> SYMBOL_COLON .)
    FLOAT           reduce using rule 35 (expression -> SYMBOL_COLON .)
    STRING          reduce using rule 35 (expression -> SYMBOL_COLON .)
    SYMBOL_COLON    reduce using rule 35 (expression -> SYMBOL_COLON .)
    DEFINEDQ        reduce using rule 35 (expression -> SYMBOL_COLON .)
    CONSTANT        reduce using rule 35 (expression -> SYMBOL_COLON .)
    LBRACKET        reduce using rule 35 (expression -> SYMBOL_COLON .)
    IF              reduce using rule 35 (expression -> SYMBOL_COLON .)
    DEF             reduce using rule 35 (expression -> SYMBOL_COLON .)
    WHILE           reduce using rule 35 (expression -> SYMBOL_COLON .)
    UNLESS          reduce using rule 35 (expression -> SYMBOL_COLON .)
    CASE            reduce using rule 35 (expression -> SYMBOL_COLON .)
    CLASS           reduce using rule 35 (expression -> SYMBOL_COLON .)
    $end            reduce using rule 35 (expression -> SYMBOL_COLON .)
    RBRACE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    ELSIF           reduce using rule 35 (expression -> SYMBOL_COLON .)
    ELSE            reduce using rule 35 (expression -> SYMBOL_COLON .)
    END_KW          reduce using rule 35 (expression -> SYMBOL_COLON .)
    WHEN            reduce using rule 35 (expression -> SYMBOL_COLON .)
    RPAREN          reduce using rule 35 (expression -> SYMBOL_COLON .)
    RBRACKET        reduce using rule 35 (expression -> SYMBOL_COLON .)
    COMMA           reduce using rule 35 (expression -> SYMBOL_COLON .)


state 32

    (36) expression -> DEFINEDQ .

    PLUS            reduce using rule 36 (expression -> DEFINEDQ .)
    MINUS           reduce using rule 36 (expression -> DEFINEDQ .)
    TIMES           reduce using rule 36 (expression -> DEFINEDQ .)
    DIVIDE          reduce using rule 36 (expression -> DEFINEDQ .)
    MODULO          reduce using rule 36 (expression -> DEFINEDQ .)
    POWER           reduce using rule 36 (expression -> DEFINEDQ .)
    LOGICAL_AND     reduce using rule 36 (expression -> DEFINEDQ .)
    LOGICAL_OR      reduce using rule 36 (expression -> DEFINEDQ .)
    EQUAL_EQUAL     reduce using rule 36 (expression -> DEFINEDQ .)
    NOT_EQUAL       reduce using rule 36 (expression -> DEFINEDQ .)
    GREATER_THAN    reduce using rule 36 (expression -> DEFINEDQ .)
    LESS_THAN       reduce using rule 36 (expression -> DEFINEDQ .)
    GREATER_EQUAL   reduce using rule 36 (expression -> DEFINEDQ .)
    LESS_EQUAL      reduce using rule 36 (expression -> DEFINEDQ .)
    RANGE_INCLUSIVE reduce using rule 36 (expression -> DEFINEDQ .)
    RANGE_EXCLUSIVE reduce using rule 36 (expression -> DEFINEDQ .)
    RETURN          reduce using rule 36 (expression -> DEFINEDQ .)
    YIELD           reduce using rule 36 (expression -> DEFINEDQ .)
    ATTR_ACCESSOR   reduce using rule 36 (expression -> DEFINEDQ .)
    ATTR_READER     reduce using rule 36 (expression -> DEFINEDQ .)
    ATTR_WRITER     reduce using rule 36 (expression -> DEFINEDQ .)
    BREAK           reduce using rule 36 (expression -> DEFINEDQ .)
    NEXT            reduce using rule 36 (expression -> DEFINEDQ .)
    PUTS            reduce using rule 36 (expression -> DEFINEDQ .)
    IDENTIFIER      reduce using rule 36 (expression -> DEFINEDQ .)
    INSTANCE_VAR    reduce using rule 36 (expression -> DEFINEDQ .)
    LPAREN          reduce using rule 36 (expression -> DEFINEDQ .)
    LBRACE          reduce using rule 36 (expression -> DEFINEDQ .)
    INTEGER         reduce using rule 36 (expression -> DEFINEDQ .)
    FLOAT           reduce using rule 36 (expression -> DEFINEDQ .)
    STRING          reduce using rule 36 (expression -> DEFINEDQ .)
    SYMBOL_COLON    reduce using rule 36 (expression -> DEFINEDQ .)
    DEFINEDQ        reduce using rule 36 (expression -> DEFINEDQ .)
    CONSTANT        reduce using rule 36 (expression -> DEFINEDQ .)
    LBRACKET        reduce using rule 36 (expression -> DEFINEDQ .)
    IF              reduce using rule 36 (expression -> DEFINEDQ .)
    DEF             reduce using rule 36 (expression -> DEFINEDQ .)
    WHILE           reduce using rule 36 (expression -> DEFINEDQ .)
    UNLESS          reduce using rule 36 (expression -> DEFINEDQ .)
    CASE            reduce using rule 36 (expression -> DEFINEDQ .)
    CLASS           reduce using rule 36 (expression -> DEFINEDQ .)
    $end            reduce using rule 36 (expression -> DEFINEDQ .)
    RBRACE          reduce using rule 36 (expression -> DEFINEDQ .)
    ELSIF           reduce using rule 36 (expression -> DEFINEDQ .)
    ELSE            reduce using rule 36 (expression -> DEFINEDQ .)
    END_KW          reduce using rule 36 (expression -> DEFINEDQ .)
    WHEN            reduce using rule 36 (expression -> DEFINEDQ .)
    RPAREN          reduce using rule 36 (expression -> DEFINEDQ .)
    RBRACKET        reduce using rule 36 (expression -> DEFINEDQ .)
    COMMA           reduce using rule 36 (expression -> DEFINEDQ .)


state 33

    (69) expression -> CONSTANT . DOT NEW expression_list_opt

    DOT             shift and go to state 83


state 34

    (93) expression -> LBRACKET . elements RBRACKET
    (94) elements -> . elements COMMA expression
    (95) elements -> . expression
    (96) elements -> . empty
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (60) empty -> .

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    RBRACKET        reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    elements                       shift and go to state 84
    expression                     shift and go to state 85
    empty                          shift and go to state 86

state 35

    (61) function_def -> DEF . IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> DEF . IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> DEF . SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> DEF . CONSTANT DOT IDENTIFIER statement_list END_KW

    IDENTIFIER      shift and go to state 87
    SELF            shift and go to state 88
    CONSTANT        shift and go to state 89


state 36

    (90) while_statement -> WHILE . expression statement_list END_KW
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 90

state 37

    (49) unless_statement -> UNLESS . expression statement_list else_block_opt END_KW
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 91

state 38

    (50) case_statement -> CASE . expression when_blocks else_block_opt END_KW
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 92

state 39

    (68) class_def -> CLASS . CONSTANT statement_list END_KW
    (74) class_def -> CLASS . CONSTANT LESS_THAN CONSTANT statement_list END_KW

    CONSTANT        shift and go to state 93


state 40

    (2) statement_list -> statement_list statement .

    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    YIELD           reduce using rule 2 (statement_list -> statement_list statement .)
    ATTR_ACCESSOR   reduce using rule 2 (statement_list -> statement_list statement .)
    ATTR_READER     reduce using rule 2 (statement_list -> statement_list statement .)
    ATTR_WRITER     reduce using rule 2 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 2 (statement_list -> statement_list statement .)
    NEXT            reduce using rule 2 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    INSTANCE_VAR    reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 2 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    SYMBOL_COLON    reduce using rule 2 (statement_list -> statement_list statement .)
    DEFINEDQ        reduce using rule 2 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    DEF             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    UNLESS          reduce using rule 2 (statement_list -> statement_list statement .)
    CASE            reduce using rule 2 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    ELSIF           reduce using rule 2 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 2 (statement_list -> statement_list statement .)
    END_KW          reduce using rule 2 (statement_list -> statement_list statement .)
    WHEN            reduce using rule 2 (statement_list -> statement_list statement .)


state 41

    (26) expression -> expression PLUS . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 94

state 42

    (27) expression -> expression MINUS . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 95

state 43

    (28) expression -> expression TIMES . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 96

state 44

    (29) expression -> expression DIVIDE . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 97

state 45

    (30) expression -> expression MODULO . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 98

state 46

    (31) expression -> expression POWER . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 99

state 47

    (40) expression -> expression LOGICAL_AND . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 100

state 48

    (41) expression -> expression LOGICAL_OR . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 101

state 49

    (42) expression -> expression EQUAL_EQUAL . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 102

state 50

    (43) expression -> expression NOT_EQUAL . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 103

state 51

    (44) expression -> expression GREATER_THAN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 104

state 52

    (45) expression -> expression LESS_THAN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 105

state 53

    (46) expression -> expression GREATER_EQUAL . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 106

state 54

    (47) expression -> expression LESS_EQUAL . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 107

state 55

    (103) expression -> expression RANGE_INCLUSIVE . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 108

state 56

    (104) expression -> expression RANGE_EXCLUSIVE . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 109

state 57

    (62) statement -> RETURN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 62 (statement -> RETURN expression .)
    YIELD           reduce using rule 62 (statement -> RETURN expression .)
    ATTR_ACCESSOR   reduce using rule 62 (statement -> RETURN expression .)
    ATTR_READER     reduce using rule 62 (statement -> RETURN expression .)
    ATTR_WRITER     reduce using rule 62 (statement -> RETURN expression .)
    BREAK           reduce using rule 62 (statement -> RETURN expression .)
    NEXT            reduce using rule 62 (statement -> RETURN expression .)
    PUTS            reduce using rule 62 (statement -> RETURN expression .)
    IDENTIFIER      reduce using rule 62 (statement -> RETURN expression .)
    INSTANCE_VAR    reduce using rule 62 (statement -> RETURN expression .)
    LPAREN          reduce using rule 62 (statement -> RETURN expression .)
    LBRACE          reduce using rule 62 (statement -> RETURN expression .)
    INTEGER         reduce using rule 62 (statement -> RETURN expression .)
    FLOAT           reduce using rule 62 (statement -> RETURN expression .)
    STRING          reduce using rule 62 (statement -> RETURN expression .)
    SYMBOL_COLON    reduce using rule 62 (statement -> RETURN expression .)
    DEFINEDQ        reduce using rule 62 (statement -> RETURN expression .)
    CONSTANT        reduce using rule 62 (statement -> RETURN expression .)
    LBRACKET        reduce using rule 62 (statement -> RETURN expression .)
    IF              reduce using rule 62 (statement -> RETURN expression .)
    DEF             reduce using rule 62 (statement -> RETURN expression .)
    WHILE           reduce using rule 62 (statement -> RETURN expression .)
    UNLESS          reduce using rule 62 (statement -> RETURN expression .)
    CASE            reduce using rule 62 (statement -> RETURN expression .)
    CLASS           reduce using rule 62 (statement -> RETURN expression .)
    $end            reduce using rule 62 (statement -> RETURN expression .)
    RBRACE          reduce using rule 62 (statement -> RETURN expression .)
    ELSIF           reduce using rule 62 (statement -> RETURN expression .)
    ELSE            reduce using rule 62 (statement -> RETURN expression .)
    END_KW          reduce using rule 62 (statement -> RETURN expression .)
    WHEN            reduce using rule 62 (statement -> RETURN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 62 (statement -> RETURN expression .) ]


state 58

    (37) expression -> IDENTIFIER .
    (80) expression -> IDENTIFIER . DOT IDENTIFIER LPAREN arg_list RPAREN

    PLUS            reduce using rule 37 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 37 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 37 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 37 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 37 (expression -> IDENTIFIER .)
    POWER           reduce using rule 37 (expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 37 (expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 37 (expression -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 37 (expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 37 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 37 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 37 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 37 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 37 (expression -> IDENTIFIER .)
    RANGE_INCLUSIVE reduce using rule 37 (expression -> IDENTIFIER .)
    RANGE_EXCLUSIVE reduce using rule 37 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 37 (expression -> IDENTIFIER .)
    YIELD           reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_ACCESSOR   reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_READER     reduce using rule 37 (expression -> IDENTIFIER .)
    ATTR_WRITER     reduce using rule 37 (expression -> IDENTIFIER .)
    BREAK           reduce using rule 37 (expression -> IDENTIFIER .)
    NEXT            reduce using rule 37 (expression -> IDENTIFIER .)
    PUTS            reduce using rule 37 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (expression -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 37 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 37 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 37 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 37 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 37 (expression -> IDENTIFIER .)
    STRING          reduce using rule 37 (expression -> IDENTIFIER .)
    SYMBOL_COLON    reduce using rule 37 (expression -> IDENTIFIER .)
    DEFINEDQ        reduce using rule 37 (expression -> IDENTIFIER .)
    CONSTANT        reduce using rule 37 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 37 (expression -> IDENTIFIER .)
    IF              reduce using rule 37 (expression -> IDENTIFIER .)
    DEF             reduce using rule 37 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 37 (expression -> IDENTIFIER .)
    UNLESS          reduce using rule 37 (expression -> IDENTIFIER .)
    CASE            reduce using rule 37 (expression -> IDENTIFIER .)
    CLASS           reduce using rule 37 (expression -> IDENTIFIER .)
    $end            reduce using rule 37 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 37 (expression -> IDENTIFIER .)
    ELSIF           reduce using rule 37 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER .)
    END_KW          reduce using rule 37 (expression -> IDENTIFIER .)
    WHEN            reduce using rule 37 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 37 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 37 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 37 (expression -> IDENTIFIER .)
    DOT             shift and go to state 68


state 59

    (38) expression -> INSTANCE_VAR .

    PLUS            reduce using rule 38 (expression -> INSTANCE_VAR .)
    MINUS           reduce using rule 38 (expression -> INSTANCE_VAR .)
    TIMES           reduce using rule 38 (expression -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    MODULO          reduce using rule 38 (expression -> INSTANCE_VAR .)
    POWER           reduce using rule 38 (expression -> INSTANCE_VAR .)
    LOGICAL_AND     reduce using rule 38 (expression -> INSTANCE_VAR .)
    LOGICAL_OR      reduce using rule 38 (expression -> INSTANCE_VAR .)
    EQUAL_EQUAL     reduce using rule 38 (expression -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 38 (expression -> INSTANCE_VAR .)
    GREATER_THAN    reduce using rule 38 (expression -> INSTANCE_VAR .)
    LESS_THAN       reduce using rule 38 (expression -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 38 (expression -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 38 (expression -> INSTANCE_VAR .)
    RANGE_INCLUSIVE reduce using rule 38 (expression -> INSTANCE_VAR .)
    RANGE_EXCLUSIVE reduce using rule 38 (expression -> INSTANCE_VAR .)
    RETURN          reduce using rule 38 (expression -> INSTANCE_VAR .)
    YIELD           reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_ACCESSOR   reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_READER     reduce using rule 38 (expression -> INSTANCE_VAR .)
    ATTR_WRITER     reduce using rule 38 (expression -> INSTANCE_VAR .)
    BREAK           reduce using rule 38 (expression -> INSTANCE_VAR .)
    NEXT            reduce using rule 38 (expression -> INSTANCE_VAR .)
    PUTS            reduce using rule 38 (expression -> INSTANCE_VAR .)
    IDENTIFIER      reduce using rule 38 (expression -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 38 (expression -> INSTANCE_VAR .)
    LPAREN          reduce using rule 38 (expression -> INSTANCE_VAR .)
    LBRACE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    INTEGER         reduce using rule 38 (expression -> INSTANCE_VAR .)
    FLOAT           reduce using rule 38 (expression -> INSTANCE_VAR .)
    STRING          reduce using rule 38 (expression -> INSTANCE_VAR .)
    SYMBOL_COLON    reduce using rule 38 (expression -> INSTANCE_VAR .)
    DEFINEDQ        reduce using rule 38 (expression -> INSTANCE_VAR .)
    CONSTANT        reduce using rule 38 (expression -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 38 (expression -> INSTANCE_VAR .)
    IF              reduce using rule 38 (expression -> INSTANCE_VAR .)
    DEF             reduce using rule 38 (expression -> INSTANCE_VAR .)
    WHILE           reduce using rule 38 (expression -> INSTANCE_VAR .)
    UNLESS          reduce using rule 38 (expression -> INSTANCE_VAR .)
    CASE            reduce using rule 38 (expression -> INSTANCE_VAR .)
    CLASS           reduce using rule 38 (expression -> INSTANCE_VAR .)
    $end            reduce using rule 38 (expression -> INSTANCE_VAR .)
    RBRACE          reduce using rule 38 (expression -> INSTANCE_VAR .)
    ELSIF           reduce using rule 38 (expression -> INSTANCE_VAR .)
    ELSE            reduce using rule 38 (expression -> INSTANCE_VAR .)
    END_KW          reduce using rule 38 (expression -> INSTANCE_VAR .)
    WHEN            reduce using rule 38 (expression -> INSTANCE_VAR .)
    RPAREN          reduce using rule 38 (expression -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 38 (expression -> INSTANCE_VAR .)
    COMMA           reduce using rule 38 (expression -> INSTANCE_VAR .)


state 60

    (67) statement -> YIELD IF . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 110

state 61

    (48) if_statement -> IF expression . statement_list elsif_blocks_opt else_block_opt END_KW
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    PLUS            shift and go to state 41
    MINUS           shift and go to state 112
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement_list                 shift and go to state 111
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 62

    (75) statement -> ATTR_ACCESSOR symbol_list .
    (79) symbol_list -> symbol_list . COMMA SYMBOL_COLON

    RETURN          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    YIELD           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    ATTR_ACCESSOR   reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    ATTR_READER     reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    ATTR_WRITER     reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    BREAK           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    NEXT            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    PUTS            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    IDENTIFIER      reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    INSTANCE_VAR    reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    LPAREN          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    LBRACE          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    MINUS           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    INTEGER         reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    FLOAT           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    STRING          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    SYMBOL_COLON    reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    DEFINEDQ        reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    CONSTANT        reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    LBRACKET        reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    IF              reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    DEF             reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    WHILE           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    UNLESS          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    CASE            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    CLASS           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    $end            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    RBRACE          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    ELSIF           reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    ELSE            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    END_KW          reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    WHEN            reduce using rule 75 (statement -> ATTR_ACCESSOR symbol_list .)
    COMMA           shift and go to state 113


state 63

    (78) symbol_list -> SYMBOL_COLON .

    COMMA           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    RETURN          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    YIELD           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    ATTR_ACCESSOR   reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    ATTR_READER     reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    ATTR_WRITER     reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    BREAK           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    NEXT            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    PUTS            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    IDENTIFIER      reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    INSTANCE_VAR    reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    LPAREN          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    LBRACE          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    MINUS           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    INTEGER         reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    FLOAT           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    STRING          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    SYMBOL_COLON    reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    DEFINEDQ        reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    CONSTANT        reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    LBRACKET        reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    IF              reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    DEF             reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    WHILE           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    UNLESS          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    CASE            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    CLASS           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    $end            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    RBRACE          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    ELSIF           reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    ELSE            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    END_KW          reduce using rule 78 (symbol_list -> SYMBOL_COLON .)
    WHEN            reduce using rule 78 (symbol_list -> SYMBOL_COLON .)


state 64

    (76) statement -> ATTR_READER symbol_list .
    (79) symbol_list -> symbol_list . COMMA SYMBOL_COLON

    RETURN          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    YIELD           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    ATTR_ACCESSOR   reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    ATTR_READER     reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    ATTR_WRITER     reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    BREAK           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    NEXT            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    PUTS            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    IDENTIFIER      reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    INSTANCE_VAR    reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    LPAREN          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    LBRACE          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    MINUS           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    INTEGER         reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    FLOAT           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    STRING          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    SYMBOL_COLON    reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    DEFINEDQ        reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    CONSTANT        reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    LBRACKET        reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    IF              reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    DEF             reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    WHILE           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    UNLESS          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    CASE            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    CLASS           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    $end            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    RBRACE          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    ELSIF           reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    ELSE            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    END_KW          reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    WHEN            reduce using rule 76 (statement -> ATTR_READER symbol_list .)
    COMMA           shift and go to state 113


state 65

    (77) statement -> ATTR_WRITER symbol_list .
    (79) symbol_list -> symbol_list . COMMA SYMBOL_COLON

    RETURN          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    YIELD           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    ATTR_ACCESSOR   reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    ATTR_READER     reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    ATTR_WRITER     reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    BREAK           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    NEXT            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    PUTS            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    IDENTIFIER      reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    INSTANCE_VAR    reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    LPAREN          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    LBRACE          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    MINUS           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    INTEGER         reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    FLOAT           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    STRING          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    SYMBOL_COLON    reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    DEFINEDQ        reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    CONSTANT        reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    LBRACKET        reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    IF              reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    DEF             reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    WHILE           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    UNLESS          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    CASE            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    CLASS           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    $end            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    RBRACE          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    ELSIF           reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    ELSE            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    END_KW          reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    WHEN            reduce using rule 77 (statement -> ATTR_WRITER symbol_list .)
    COMMA           shift and go to state 113


state 66

    (14) print -> PUTS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 14 (print -> PUTS expression .)
    YIELD           reduce using rule 14 (print -> PUTS expression .)
    ATTR_ACCESSOR   reduce using rule 14 (print -> PUTS expression .)
    ATTR_READER     reduce using rule 14 (print -> PUTS expression .)
    ATTR_WRITER     reduce using rule 14 (print -> PUTS expression .)
    BREAK           reduce using rule 14 (print -> PUTS expression .)
    NEXT            reduce using rule 14 (print -> PUTS expression .)
    PUTS            reduce using rule 14 (print -> PUTS expression .)
    IDENTIFIER      reduce using rule 14 (print -> PUTS expression .)
    INSTANCE_VAR    reduce using rule 14 (print -> PUTS expression .)
    LPAREN          reduce using rule 14 (print -> PUTS expression .)
    LBRACE          reduce using rule 14 (print -> PUTS expression .)
    INTEGER         reduce using rule 14 (print -> PUTS expression .)
    FLOAT           reduce using rule 14 (print -> PUTS expression .)
    STRING          reduce using rule 14 (print -> PUTS expression .)
    SYMBOL_COLON    reduce using rule 14 (print -> PUTS expression .)
    DEFINEDQ        reduce using rule 14 (print -> PUTS expression .)
    CONSTANT        reduce using rule 14 (print -> PUTS expression .)
    LBRACKET        reduce using rule 14 (print -> PUTS expression .)
    IF              reduce using rule 14 (print -> PUTS expression .)
    DEF             reduce using rule 14 (print -> PUTS expression .)
    WHILE           reduce using rule 14 (print -> PUTS expression .)
    UNLESS          reduce using rule 14 (print -> PUTS expression .)
    CASE            reduce using rule 14 (print -> PUTS expression .)
    CLASS           reduce using rule 14 (print -> PUTS expression .)
    $end            reduce using rule 14 (print -> PUTS expression .)
    RBRACE          reduce using rule 14 (print -> PUTS expression .)
    ELSIF           reduce using rule 14 (print -> PUTS expression .)
    ELSE            reduce using rule 14 (print -> PUTS expression .)
    END_KW          reduce using rule 14 (print -> PUTS expression .)
    WHEN            reduce using rule 14 (print -> PUTS expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 14 (print -> PUTS expression .) ]


state 67

    (15) input -> IDENTIFIER ASSIGN . GETS DOT IDENTIFIER
    (16) assignment -> IDENTIFIER ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    GETS            shift and go to state 114
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 115

state 68

    (80) expression -> IDENTIFIER DOT . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 116


state 69

    (17) assignment -> IDENTIFIER PLUS_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 117

state 70

    (18) assignment -> IDENTIFIER MINUS_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 118

state 71

    (19) assignment -> IDENTIFIER TIMES_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 119

state 72

    (20) assignment -> IDENTIFIER DIVIDE_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 120

state 73

    (21) assignment -> IDENTIFIER OR_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 121

state 74

    (22) assignment -> IDENTIFIER AND_ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 122

state 75

    (39) assignment -> INSTANCE_VAR ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 123

state 76

    (23) expression -> LPAREN expression . RPAREN
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    RPAREN          shift and go to state 124
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 77

    (24) expression -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RBRACE          shift and go to state 125
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 78

    (97) expression -> LBRACE hash_content . RBRACE

    RBRACE          shift and go to state 126


state 79

    (98) hash_content -> hash_pair_list .
    (101) hash_pair_list -> hash_pair_list . COMMA hash_pair

    RBRACE          reduce using rule 98 (hash_content -> hash_pair_list .)
    COMMA           shift and go to state 127


state 80

    (100) hash_pair_list -> hash_pair .

    COMMA           reduce using rule 100 (hash_pair_list -> hash_pair .)
    RBRACE          reduce using rule 100 (hash_pair_list -> hash_pair .)


state 81

    (35) expression -> SYMBOL_COLON .
    (102) hash_pair -> SYMBOL_COLON . ASSIGN expression

    PLUS            reduce using rule 35 (expression -> SYMBOL_COLON .)
    MINUS           reduce using rule 35 (expression -> SYMBOL_COLON .)
    TIMES           reduce using rule 35 (expression -> SYMBOL_COLON .)
    DIVIDE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    MODULO          reduce using rule 35 (expression -> SYMBOL_COLON .)
    POWER           reduce using rule 35 (expression -> SYMBOL_COLON .)
    LOGICAL_AND     reduce using rule 35 (expression -> SYMBOL_COLON .)
    LOGICAL_OR      reduce using rule 35 (expression -> SYMBOL_COLON .)
    EQUAL_EQUAL     reduce using rule 35 (expression -> SYMBOL_COLON .)
    NOT_EQUAL       reduce using rule 35 (expression -> SYMBOL_COLON .)
    GREATER_THAN    reduce using rule 35 (expression -> SYMBOL_COLON .)
    LESS_THAN       reduce using rule 35 (expression -> SYMBOL_COLON .)
    GREATER_EQUAL   reduce using rule 35 (expression -> SYMBOL_COLON .)
    LESS_EQUAL      reduce using rule 35 (expression -> SYMBOL_COLON .)
    RANGE_INCLUSIVE reduce using rule 35 (expression -> SYMBOL_COLON .)
    RANGE_EXCLUSIVE reduce using rule 35 (expression -> SYMBOL_COLON .)
    RBRACE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    RETURN          reduce using rule 35 (expression -> SYMBOL_COLON .)
    YIELD           reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_ACCESSOR   reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_READER     reduce using rule 35 (expression -> SYMBOL_COLON .)
    ATTR_WRITER     reduce using rule 35 (expression -> SYMBOL_COLON .)
    BREAK           reduce using rule 35 (expression -> SYMBOL_COLON .)
    NEXT            reduce using rule 35 (expression -> SYMBOL_COLON .)
    PUTS            reduce using rule 35 (expression -> SYMBOL_COLON .)
    IDENTIFIER      reduce using rule 35 (expression -> SYMBOL_COLON .)
    INSTANCE_VAR    reduce using rule 35 (expression -> SYMBOL_COLON .)
    LPAREN          reduce using rule 35 (expression -> SYMBOL_COLON .)
    LBRACE          reduce using rule 35 (expression -> SYMBOL_COLON .)
    INTEGER         reduce using rule 35 (expression -> SYMBOL_COLON .)
    FLOAT           reduce using rule 35 (expression -> SYMBOL_COLON .)
    STRING          reduce using rule 35 (expression -> SYMBOL_COLON .)
    SYMBOL_COLON    reduce using rule 35 (expression -> SYMBOL_COLON .)
    DEFINEDQ        reduce using rule 35 (expression -> SYMBOL_COLON .)
    CONSTANT        reduce using rule 35 (expression -> SYMBOL_COLON .)
    LBRACKET        reduce using rule 35 (expression -> SYMBOL_COLON .)
    IF              reduce using rule 35 (expression -> SYMBOL_COLON .)
    DEF             reduce using rule 35 (expression -> SYMBOL_COLON .)
    WHILE           reduce using rule 35 (expression -> SYMBOL_COLON .)
    UNLESS          reduce using rule 35 (expression -> SYMBOL_COLON .)
    CASE            reduce using rule 35 (expression -> SYMBOL_COLON .)
    CLASS           reduce using rule 35 (expression -> SYMBOL_COLON .)
    ASSIGN          shift and go to state 128


state 82

    (25) expression -> MINUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 25 (expression -> MINUS expression .)
    MINUS           reduce using rule 25 (expression -> MINUS expression .)
    TIMES           reduce using rule 25 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 25 (expression -> MINUS expression .)
    MODULO          reduce using rule 25 (expression -> MINUS expression .)
    POWER           reduce using rule 25 (expression -> MINUS expression .)
    LOGICAL_AND     reduce using rule 25 (expression -> MINUS expression .)
    LOGICAL_OR      reduce using rule 25 (expression -> MINUS expression .)
    EQUAL_EQUAL     reduce using rule 25 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 25 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 25 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 25 (expression -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 25 (expression -> MINUS expression .)
    LESS_EQUAL      reduce using rule 25 (expression -> MINUS expression .)
    RANGE_INCLUSIVE reduce using rule 25 (expression -> MINUS expression .)
    RANGE_EXCLUSIVE reduce using rule 25 (expression -> MINUS expression .)
    RETURN          reduce using rule 25 (expression -> MINUS expression .)
    YIELD           reduce using rule 25 (expression -> MINUS expression .)
    ATTR_ACCESSOR   reduce using rule 25 (expression -> MINUS expression .)
    ATTR_READER     reduce using rule 25 (expression -> MINUS expression .)
    ATTR_WRITER     reduce using rule 25 (expression -> MINUS expression .)
    BREAK           reduce using rule 25 (expression -> MINUS expression .)
    NEXT            reduce using rule 25 (expression -> MINUS expression .)
    PUTS            reduce using rule 25 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 25 (expression -> MINUS expression .)
    INSTANCE_VAR    reduce using rule 25 (expression -> MINUS expression .)
    LPAREN          reduce using rule 25 (expression -> MINUS expression .)
    LBRACE          reduce using rule 25 (expression -> MINUS expression .)
    INTEGER         reduce using rule 25 (expression -> MINUS expression .)
    FLOAT           reduce using rule 25 (expression -> MINUS expression .)
    STRING          reduce using rule 25 (expression -> MINUS expression .)
    SYMBOL_COLON    reduce using rule 25 (expression -> MINUS expression .)
    DEFINEDQ        reduce using rule 25 (expression -> MINUS expression .)
    CONSTANT        reduce using rule 25 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 25 (expression -> MINUS expression .)
    IF              reduce using rule 25 (expression -> MINUS expression .)
    DEF             reduce using rule 25 (expression -> MINUS expression .)
    WHILE           reduce using rule 25 (expression -> MINUS expression .)
    UNLESS          reduce using rule 25 (expression -> MINUS expression .)
    CASE            reduce using rule 25 (expression -> MINUS expression .)
    CLASS           reduce using rule 25 (expression -> MINUS expression .)
    $end            reduce using rule 25 (expression -> MINUS expression .)
    RBRACE          reduce using rule 25 (expression -> MINUS expression .)
    ELSIF           reduce using rule 25 (expression -> MINUS expression .)
    ELSE            reduce using rule 25 (expression -> MINUS expression .)
    END_KW          reduce using rule 25 (expression -> MINUS expression .)
    WHEN            reduce using rule 25 (expression -> MINUS expression .)
    RPAREN          reduce using rule 25 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 25 (expression -> MINUS expression .)
    COMMA           reduce using rule 25 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! POWER           [ shift and go to state 46 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 83

    (69) expression -> CONSTANT DOT . NEW expression_list_opt

    NEW             shift and go to state 129


state 84

    (93) expression -> LBRACKET elements . RBRACKET
    (94) elements -> elements . COMMA expression

    RBRACKET        shift and go to state 130
    COMMA           shift and go to state 131


state 85

    (95) elements -> expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    RBRACKET        reduce using rule 95 (elements -> expression .)
    COMMA           reduce using rule 95 (elements -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 86

    (96) elements -> empty .

    RBRACKET        reduce using rule 96 (elements -> empty .)
    COMMA           reduce using rule 96 (elements -> empty .)


state 87

    (61) function_def -> DEF IDENTIFIER . LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> DEF IDENTIFIER . param_list_opt statement_list END_KW
    (86) param_list_opt -> . param_list
    (87) param_list_opt -> . empty
    (88) param_list -> . param
    (89) param_list -> . param_list COMMA param
    (60) empty -> .
    (84) param -> . IDENTIFIER
    (85) param -> . IDENTIFIER ASSIGN expression

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          shift and go to state 133
    RETURN          reduce using rule 60 (empty -> .)
    YIELD           reduce using rule 60 (empty -> .)
    ATTR_ACCESSOR   reduce using rule 60 (empty -> .)
    ATTR_READER     reduce using rule 60 (empty -> .)
    ATTR_WRITER     reduce using rule 60 (empty -> .)
    BREAK           reduce using rule 60 (empty -> .)
    NEXT            reduce using rule 60 (empty -> .)
    PUTS            reduce using rule 60 (empty -> .)
    INSTANCE_VAR    reduce using rule 60 (empty -> .)
    LBRACE          reduce using rule 60 (empty -> .)
    MINUS           reduce using rule 60 (empty -> .)
    INTEGER         reduce using rule 60 (empty -> .)
    FLOAT           reduce using rule 60 (empty -> .)
    STRING          reduce using rule 60 (empty -> .)
    SYMBOL_COLON    reduce using rule 60 (empty -> .)
    DEFINEDQ        reduce using rule 60 (empty -> .)
    CONSTANT        reduce using rule 60 (empty -> .)
    LBRACKET        reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    DEF             reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    UNLESS          reduce using rule 60 (empty -> .)
    CASE            reduce using rule 60 (empty -> .)
    CLASS           reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 132

  ! IDENTIFIER      [ reduce using rule 60 (empty -> .) ]
  ! LPAREN          [ reduce using rule 60 (empty -> .) ]

    param_list_opt                 shift and go to state 134
    param_list                     shift and go to state 135
    empty                          shift and go to state 136
    param                          shift and go to state 137

state 88

    (64) function_def -> DEF SELF . DOT IDENTIFIER statement_list END_KW

    DOT             shift and go to state 138


state 89

    (65) function_def -> DEF CONSTANT . DOT IDENTIFIER statement_list END_KW

    DOT             shift and go to state 139


state 90

    (90) while_statement -> WHILE expression . statement_list END_KW
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    PLUS            shift and go to state 41
    MINUS           shift and go to state 112
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement_list                 shift and go to state 140
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 91

    (49) unless_statement -> UNLESS expression . statement_list else_block_opt END_KW
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    PLUS            shift and go to state 41
    MINUS           shift and go to state 112
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement_list                 shift and go to state 141
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 92

    (50) case_statement -> CASE expression . when_blocks else_block_opt END_KW
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (51) when_blocks -> . when_blocks when_block
    (52) when_blocks -> . when_block
    (53) when_block -> . WHEN expression statement_list

    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    WHEN            shift and go to state 144

    when_blocks                    shift and go to state 142
    when_block                     shift and go to state 143

state 93

    (68) class_def -> CLASS CONSTANT . statement_list END_KW
    (74) class_def -> CLASS CONSTANT . LESS_THAN CONSTANT statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    LESS_THAN       shift and go to state 146
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 145
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 94

    (26) expression -> expression PLUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 26 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 26 (expression -> expression PLUS expression .)
    LOGICAL_AND     reduce using rule 26 (expression -> expression PLUS expression .)
    LOGICAL_OR      reduce using rule 26 (expression -> expression PLUS expression .)
    EQUAL_EQUAL     reduce using rule 26 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 26 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 26 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 26 (expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 26 (expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 26 (expression -> expression PLUS expression .)
    RANGE_INCLUSIVE reduce using rule 26 (expression -> expression PLUS expression .)
    RANGE_EXCLUSIVE reduce using rule 26 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 26 (expression -> expression PLUS expression .)
    YIELD           reduce using rule 26 (expression -> expression PLUS expression .)
    ATTR_ACCESSOR   reduce using rule 26 (expression -> expression PLUS expression .)
    ATTR_READER     reduce using rule 26 (expression -> expression PLUS expression .)
    ATTR_WRITER     reduce using rule 26 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 26 (expression -> expression PLUS expression .)
    NEXT            reduce using rule 26 (expression -> expression PLUS expression .)
    PUTS            reduce using rule 26 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression PLUS expression .)
    INSTANCE_VAR    reduce using rule 26 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 26 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 26 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 26 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 26 (expression -> expression PLUS expression .)
    STRING          reduce using rule 26 (expression -> expression PLUS expression .)
    SYMBOL_COLON    reduce using rule 26 (expression -> expression PLUS expression .)
    DEFINEDQ        reduce using rule 26 (expression -> expression PLUS expression .)
    CONSTANT        reduce using rule 26 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 26 (expression -> expression PLUS expression .)
    IF              reduce using rule 26 (expression -> expression PLUS expression .)
    DEF             reduce using rule 26 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 26 (expression -> expression PLUS expression .)
    UNLESS          reduce using rule 26 (expression -> expression PLUS expression .)
    CASE            reduce using rule 26 (expression -> expression PLUS expression .)
    CLASS           reduce using rule 26 (expression -> expression PLUS expression .)
    $end            reduce using rule 26 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 26 (expression -> expression PLUS expression .)
    ELSIF           reduce using rule 26 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 26 (expression -> expression PLUS expression .)
    END_KW          reduce using rule 26 (expression -> expression PLUS expression .)
    WHEN            reduce using rule 26 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 26 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 26 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 26 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! TIMES           [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 95

    (27) expression -> expression MINUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 27 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 27 (expression -> expression MINUS expression .)
    LOGICAL_AND     reduce using rule 27 (expression -> expression MINUS expression .)
    LOGICAL_OR      reduce using rule 27 (expression -> expression MINUS expression .)
    EQUAL_EQUAL     reduce using rule 27 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 27 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 27 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 27 (expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 27 (expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 27 (expression -> expression MINUS expression .)
    RANGE_INCLUSIVE reduce using rule 27 (expression -> expression MINUS expression .)
    RANGE_EXCLUSIVE reduce using rule 27 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 27 (expression -> expression MINUS expression .)
    YIELD           reduce using rule 27 (expression -> expression MINUS expression .)
    ATTR_ACCESSOR   reduce using rule 27 (expression -> expression MINUS expression .)
    ATTR_READER     reduce using rule 27 (expression -> expression MINUS expression .)
    ATTR_WRITER     reduce using rule 27 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 27 (expression -> expression MINUS expression .)
    NEXT            reduce using rule 27 (expression -> expression MINUS expression .)
    PUTS            reduce using rule 27 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression MINUS expression .)
    INSTANCE_VAR    reduce using rule 27 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 27 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 27 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 27 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 27 (expression -> expression MINUS expression .)
    STRING          reduce using rule 27 (expression -> expression MINUS expression .)
    SYMBOL_COLON    reduce using rule 27 (expression -> expression MINUS expression .)
    DEFINEDQ        reduce using rule 27 (expression -> expression MINUS expression .)
    CONSTANT        reduce using rule 27 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 27 (expression -> expression MINUS expression .)
    IF              reduce using rule 27 (expression -> expression MINUS expression .)
    DEF             reduce using rule 27 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 27 (expression -> expression MINUS expression .)
    UNLESS          reduce using rule 27 (expression -> expression MINUS expression .)
    CASE            reduce using rule 27 (expression -> expression MINUS expression .)
    CLASS           reduce using rule 27 (expression -> expression MINUS expression .)
    $end            reduce using rule 27 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 27 (expression -> expression MINUS expression .)
    ELSIF           reduce using rule 27 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 27 (expression -> expression MINUS expression .)
    END_KW          reduce using rule 27 (expression -> expression MINUS expression .)
    WHEN            reduce using rule 27 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 27 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 27 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 27 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! TIMES           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 96

    (28) expression -> expression TIMES expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 28 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 28 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 28 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 28 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 28 (expression -> expression TIMES expression .)
    LOGICAL_AND     reduce using rule 28 (expression -> expression TIMES expression .)
    LOGICAL_OR      reduce using rule 28 (expression -> expression TIMES expression .)
    EQUAL_EQUAL     reduce using rule 28 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 28 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 28 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 28 (expression -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 28 (expression -> expression TIMES expression .)
    LESS_EQUAL      reduce using rule 28 (expression -> expression TIMES expression .)
    RANGE_INCLUSIVE reduce using rule 28 (expression -> expression TIMES expression .)
    RANGE_EXCLUSIVE reduce using rule 28 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 28 (expression -> expression TIMES expression .)
    YIELD           reduce using rule 28 (expression -> expression TIMES expression .)
    ATTR_ACCESSOR   reduce using rule 28 (expression -> expression TIMES expression .)
    ATTR_READER     reduce using rule 28 (expression -> expression TIMES expression .)
    ATTR_WRITER     reduce using rule 28 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 28 (expression -> expression TIMES expression .)
    NEXT            reduce using rule 28 (expression -> expression TIMES expression .)
    PUTS            reduce using rule 28 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 28 (expression -> expression TIMES expression .)
    INSTANCE_VAR    reduce using rule 28 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 28 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 28 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 28 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 28 (expression -> expression TIMES expression .)
    STRING          reduce using rule 28 (expression -> expression TIMES expression .)
    SYMBOL_COLON    reduce using rule 28 (expression -> expression TIMES expression .)
    DEFINEDQ        reduce using rule 28 (expression -> expression TIMES expression .)
    CONSTANT        reduce using rule 28 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 28 (expression -> expression TIMES expression .)
    IF              reduce using rule 28 (expression -> expression TIMES expression .)
    DEF             reduce using rule 28 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 28 (expression -> expression TIMES expression .)
    UNLESS          reduce using rule 28 (expression -> expression TIMES expression .)
    CASE            reduce using rule 28 (expression -> expression TIMES expression .)
    CLASS           reduce using rule 28 (expression -> expression TIMES expression .)
    $end            reduce using rule 28 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 28 (expression -> expression TIMES expression .)
    ELSIF           reduce using rule 28 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 28 (expression -> expression TIMES expression .)
    END_KW          reduce using rule 28 (expression -> expression TIMES expression .)
    WHEN            reduce using rule 28 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 28 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 28 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 28 (expression -> expression TIMES expression .)
    POWER           shift and go to state 46

  ! POWER           [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 97

    (29) expression -> expression DIVIDE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 29 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 29 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 29 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 29 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 29 (expression -> expression DIVIDE expression .)
    LOGICAL_AND     reduce using rule 29 (expression -> expression DIVIDE expression .)
    LOGICAL_OR      reduce using rule 29 (expression -> expression DIVIDE expression .)
    EQUAL_EQUAL     reduce using rule 29 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 29 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 29 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 29 (expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 29 (expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 29 (expression -> expression DIVIDE expression .)
    RANGE_INCLUSIVE reduce using rule 29 (expression -> expression DIVIDE expression .)
    RANGE_EXCLUSIVE reduce using rule 29 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 29 (expression -> expression DIVIDE expression .)
    YIELD           reduce using rule 29 (expression -> expression DIVIDE expression .)
    ATTR_ACCESSOR   reduce using rule 29 (expression -> expression DIVIDE expression .)
    ATTR_READER     reduce using rule 29 (expression -> expression DIVIDE expression .)
    ATTR_WRITER     reduce using rule 29 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 29 (expression -> expression DIVIDE expression .)
    NEXT            reduce using rule 29 (expression -> expression DIVIDE expression .)
    PUTS            reduce using rule 29 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression DIVIDE expression .)
    INSTANCE_VAR    reduce using rule 29 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 29 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 29 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 29 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 29 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 29 (expression -> expression DIVIDE expression .)
    SYMBOL_COLON    reduce using rule 29 (expression -> expression DIVIDE expression .)
    DEFINEDQ        reduce using rule 29 (expression -> expression DIVIDE expression .)
    CONSTANT        reduce using rule 29 (expression -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 29 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 29 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 29 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 29 (expression -> expression DIVIDE expression .)
    UNLESS          reduce using rule 29 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 29 (expression -> expression DIVIDE expression .)
    CLASS           reduce using rule 29 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 29 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 29 (expression -> expression DIVIDE expression .)
    ELSIF           reduce using rule 29 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 29 (expression -> expression DIVIDE expression .)
    END_KW          reduce using rule 29 (expression -> expression DIVIDE expression .)
    WHEN            reduce using rule 29 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 29 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 29 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 29 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 46

  ! POWER           [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 98

    (30) expression -> expression MODULO expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 30 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 30 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 30 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 30 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 30 (expression -> expression MODULO expression .)
    LOGICAL_AND     reduce using rule 30 (expression -> expression MODULO expression .)
    LOGICAL_OR      reduce using rule 30 (expression -> expression MODULO expression .)
    EQUAL_EQUAL     reduce using rule 30 (expression -> expression MODULO expression .)
    NOT_EQUAL       reduce using rule 30 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 30 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 30 (expression -> expression MODULO expression .)
    GREATER_EQUAL   reduce using rule 30 (expression -> expression MODULO expression .)
    LESS_EQUAL      reduce using rule 30 (expression -> expression MODULO expression .)
    RANGE_INCLUSIVE reduce using rule 30 (expression -> expression MODULO expression .)
    RANGE_EXCLUSIVE reduce using rule 30 (expression -> expression MODULO expression .)
    RETURN          reduce using rule 30 (expression -> expression MODULO expression .)
    YIELD           reduce using rule 30 (expression -> expression MODULO expression .)
    ATTR_ACCESSOR   reduce using rule 30 (expression -> expression MODULO expression .)
    ATTR_READER     reduce using rule 30 (expression -> expression MODULO expression .)
    ATTR_WRITER     reduce using rule 30 (expression -> expression MODULO expression .)
    BREAK           reduce using rule 30 (expression -> expression MODULO expression .)
    NEXT            reduce using rule 30 (expression -> expression MODULO expression .)
    PUTS            reduce using rule 30 (expression -> expression MODULO expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression MODULO expression .)
    INSTANCE_VAR    reduce using rule 30 (expression -> expression MODULO expression .)
    LPAREN          reduce using rule 30 (expression -> expression MODULO expression .)
    LBRACE          reduce using rule 30 (expression -> expression MODULO expression .)
    INTEGER         reduce using rule 30 (expression -> expression MODULO expression .)
    FLOAT           reduce using rule 30 (expression -> expression MODULO expression .)
    STRING          reduce using rule 30 (expression -> expression MODULO expression .)
    SYMBOL_COLON    reduce using rule 30 (expression -> expression MODULO expression .)
    DEFINEDQ        reduce using rule 30 (expression -> expression MODULO expression .)
    CONSTANT        reduce using rule 30 (expression -> expression MODULO expression .)
    LBRACKET        reduce using rule 30 (expression -> expression MODULO expression .)
    IF              reduce using rule 30 (expression -> expression MODULO expression .)
    DEF             reduce using rule 30 (expression -> expression MODULO expression .)
    WHILE           reduce using rule 30 (expression -> expression MODULO expression .)
    UNLESS          reduce using rule 30 (expression -> expression MODULO expression .)
    CASE            reduce using rule 30 (expression -> expression MODULO expression .)
    CLASS           reduce using rule 30 (expression -> expression MODULO expression .)
    $end            reduce using rule 30 (expression -> expression MODULO expression .)
    RBRACE          reduce using rule 30 (expression -> expression MODULO expression .)
    ELSIF           reduce using rule 30 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 30 (expression -> expression MODULO expression .)
    END_KW          reduce using rule 30 (expression -> expression MODULO expression .)
    WHEN            reduce using rule 30 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 30 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 30 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 30 (expression -> expression MODULO expression .)
    POWER           shift and go to state 46

  ! POWER           [ reduce using rule 30 (expression -> expression MODULO expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 99

    (31) expression -> expression POWER expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    PLUS            reduce using rule 31 (expression -> expression POWER expression .)
    MINUS           reduce using rule 31 (expression -> expression POWER expression .)
    TIMES           reduce using rule 31 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 31 (expression -> expression POWER expression .)
    MODULO          reduce using rule 31 (expression -> expression POWER expression .)
    LOGICAL_AND     reduce using rule 31 (expression -> expression POWER expression .)
    LOGICAL_OR      reduce using rule 31 (expression -> expression POWER expression .)
    EQUAL_EQUAL     reduce using rule 31 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 31 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 31 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 31 (expression -> expression POWER expression .)
    GREATER_EQUAL   reduce using rule 31 (expression -> expression POWER expression .)
    LESS_EQUAL      reduce using rule 31 (expression -> expression POWER expression .)
    RANGE_INCLUSIVE reduce using rule 31 (expression -> expression POWER expression .)
    RANGE_EXCLUSIVE reduce using rule 31 (expression -> expression POWER expression .)
    RETURN          reduce using rule 31 (expression -> expression POWER expression .)
    YIELD           reduce using rule 31 (expression -> expression POWER expression .)
    ATTR_ACCESSOR   reduce using rule 31 (expression -> expression POWER expression .)
    ATTR_READER     reduce using rule 31 (expression -> expression POWER expression .)
    ATTR_WRITER     reduce using rule 31 (expression -> expression POWER expression .)
    BREAK           reduce using rule 31 (expression -> expression POWER expression .)
    NEXT            reduce using rule 31 (expression -> expression POWER expression .)
    PUTS            reduce using rule 31 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 31 (expression -> expression POWER expression .)
    INSTANCE_VAR    reduce using rule 31 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 31 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 31 (expression -> expression POWER expression .)
    INTEGER         reduce using rule 31 (expression -> expression POWER expression .)
    FLOAT           reduce using rule 31 (expression -> expression POWER expression .)
    STRING          reduce using rule 31 (expression -> expression POWER expression .)
    SYMBOL_COLON    reduce using rule 31 (expression -> expression POWER expression .)
    DEFINEDQ        reduce using rule 31 (expression -> expression POWER expression .)
    CONSTANT        reduce using rule 31 (expression -> expression POWER expression .)
    LBRACKET        reduce using rule 31 (expression -> expression POWER expression .)
    IF              reduce using rule 31 (expression -> expression POWER expression .)
    DEF             reduce using rule 31 (expression -> expression POWER expression .)
    WHILE           reduce using rule 31 (expression -> expression POWER expression .)
    UNLESS          reduce using rule 31 (expression -> expression POWER expression .)
    CASE            reduce using rule 31 (expression -> expression POWER expression .)
    CLASS           reduce using rule 31 (expression -> expression POWER expression .)
    $end            reduce using rule 31 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 31 (expression -> expression POWER expression .)
    ELSIF           reduce using rule 31 (expression -> expression POWER expression .)
    ELSE            reduce using rule 31 (expression -> expression POWER expression .)
    END_KW          reduce using rule 31 (expression -> expression POWER expression .)
    WHEN            reduce using rule 31 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 31 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 31 (expression -> expression POWER expression .)
    COMMA           reduce using rule 31 (expression -> expression POWER expression .)
    POWER           shift and go to state 46

  ! POWER           [ reduce using rule 31 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 100

    (40) expression -> expression LOGICAL_AND expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    LOGICAL_OR      reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RANGE_INCLUSIVE reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RANGE_EXCLUSIVE reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RETURN          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    YIELD           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    ATTR_ACCESSOR   reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    ATTR_READER     reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    ATTR_WRITER     reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    BREAK           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    NEXT            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    PUTS            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    IDENTIFIER      reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    INSTANCE_VAR    reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    LPAREN          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    LBRACE          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    INTEGER         reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    FLOAT           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    STRING          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    SYMBOL_COLON    reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    DEFINEDQ        reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    CONSTANT        reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    LBRACKET        reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    IF              reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    DEF             reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    WHILE           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    UNLESS          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    CASE            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    CLASS           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    $end            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RBRACE          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    ELSIF           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    ELSE            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    END_KW          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    WHEN            reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RPAREN          reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    RBRACKET        reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    COMMA           reduce using rule 40 (expression -> expression LOGICAL_AND expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54

  ! PLUS            [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! MODULO          [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! POWER           [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_THAN       [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 101

    (41) expression -> expression LOGICAL_OR expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_OR      reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RANGE_INCLUSIVE reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RANGE_EXCLUSIVE reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RETURN          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    YIELD           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    ATTR_ACCESSOR   reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    ATTR_READER     reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    ATTR_WRITER     reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    BREAK           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    NEXT            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    PUTS            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    IDENTIFIER      reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    INSTANCE_VAR    reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    LPAREN          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    LBRACE          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    INTEGER         reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    FLOAT           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    STRING          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    SYMBOL_COLON    reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    DEFINEDQ        reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    CONSTANT        reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    LBRACKET        reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    IF              reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    DEF             reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    WHILE           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    UNLESS          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    CASE            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    CLASS           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    $end            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RBRACE          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    ELSIF           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    ELSE            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    END_KW          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    WHEN            reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RPAREN          reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    RBRACKET        reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    COMMA           reduce using rule 41 (expression -> expression LOGICAL_OR expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54

  ! PLUS            [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! MODULO          [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! POWER           [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_THAN       [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 41 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 102

    (42) expression -> expression EQUAL_EQUAL expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LOGICAL_OR      reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LESS_EQUAL      reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RANGE_INCLUSIVE reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RANGE_EXCLUSIVE reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RETURN          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    YIELD           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    ATTR_ACCESSOR   reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    ATTR_READER     reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    ATTR_WRITER     reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    BREAK           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    NEXT            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    PUTS            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    IDENTIFIER      reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LPAREN          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LBRACE          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    INTEGER         reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    FLOAT           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    STRING          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    SYMBOL_COLON    reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    DEFINEDQ        reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    CONSTANT        reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    LBRACKET        reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    IF              reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    DEF             reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    WHILE           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    UNLESS          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    CASE            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    CLASS           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    $end            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RBRACE          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    ELSIF           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    ELSE            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    END_KW          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    WHEN            reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RPAREN          reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    RBRACKET        reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    COMMA           reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! POWER           [ reduce using rule 42 (expression -> expression EQUAL_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 103

    (43) expression -> expression NOT_EQUAL expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LOGICAL_OR      reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LESS_THAN       reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LESS_EQUAL      reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RANGE_INCLUSIVE reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RANGE_EXCLUSIVE reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    YIELD           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ATTR_ACCESSOR   reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ATTR_READER     reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ATTR_WRITER     reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    NEXT            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    PUTS            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    IDENTIFIER      reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LPAREN          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LBRACE          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    INTEGER         reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    FLOAT           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    SYMBOL_COLON    reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    DEFINEDQ        reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    CONSTANT        reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LBRACKET        reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    DEF             reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    UNLESS          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    CASE            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    CLASS           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RBRACE          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ELSIF           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    END_KW          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    WHEN            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RBRACKET        reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! POWER           [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 104

    (44) expression -> expression GREATER_THAN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LOGICAL_OR      reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    EQUAL_EQUAL     reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LESS_EQUAL      reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RANGE_INCLUSIVE reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RANGE_EXCLUSIVE reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    YIELD           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    ATTR_ACCESSOR   reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    ATTR_READER     reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    ATTR_WRITER     reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    NEXT            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    PUTS            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    INSTANCE_VAR    reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LPAREN          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LBRACE          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    INTEGER         reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    FLOAT           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    STRING          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    SYMBOL_COLON    reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    DEFINEDQ        reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    CONSTANT        reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    LBRACKET        reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    DEF             reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    UNLESS          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    CASE            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    CLASS           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RBRACE          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    ELSIF           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    END_KW          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    WHEN            reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    RBRACKET        reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 44 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! MODULO          [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! POWER           [ reduce using rule 44 (expression -> expression GREATER_THAN expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 105

    (45) expression -> expression LESS_THAN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LOGICAL_OR      reduce using rule 45 (expression -> expression LESS_THAN expression .)
    EQUAL_EQUAL     reduce using rule 45 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 45 (expression -> expression LESS_THAN expression .)
    GREATER_EQUAL   reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LESS_EQUAL      reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RANGE_INCLUSIVE reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RANGE_EXCLUSIVE reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RETURN          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    YIELD           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    ATTR_ACCESSOR   reduce using rule 45 (expression -> expression LESS_THAN expression .)
    ATTR_READER     reduce using rule 45 (expression -> expression LESS_THAN expression .)
    ATTR_WRITER     reduce using rule 45 (expression -> expression LESS_THAN expression .)
    BREAK           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    NEXT            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    PUTS            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    IDENTIFIER      reduce using rule 45 (expression -> expression LESS_THAN expression .)
    INSTANCE_VAR    reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LPAREN          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LBRACE          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    INTEGER         reduce using rule 45 (expression -> expression LESS_THAN expression .)
    FLOAT           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    STRING          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    SYMBOL_COLON    reduce using rule 45 (expression -> expression LESS_THAN expression .)
    DEFINEDQ        reduce using rule 45 (expression -> expression LESS_THAN expression .)
    CONSTANT        reduce using rule 45 (expression -> expression LESS_THAN expression .)
    LBRACKET        reduce using rule 45 (expression -> expression LESS_THAN expression .)
    IF              reduce using rule 45 (expression -> expression LESS_THAN expression .)
    DEF             reduce using rule 45 (expression -> expression LESS_THAN expression .)
    WHILE           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    UNLESS          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    CASE            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    CLASS           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    $end            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RBRACE          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    ELSIF           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    ELSE            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    END_KW          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    WHEN            reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 45 (expression -> expression LESS_THAN expression .)
    RBRACKET        reduce using rule 45 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 45 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! MODULO          [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! POWER           [ reduce using rule 45 (expression -> expression LESS_THAN expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 106

    (46) expression -> expression GREATER_EQUAL expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LOGICAL_OR      reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LESS_THAN       reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RANGE_INCLUSIVE reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RANGE_EXCLUSIVE reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    YIELD           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    ATTR_ACCESSOR   reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    ATTR_READER     reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    ATTR_WRITER     reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    NEXT            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    PUTS            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    IDENTIFIER      reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LPAREN          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LBRACE          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    INTEGER         reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    FLOAT           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    SYMBOL_COLON    reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    DEFINEDQ        reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    CONSTANT        reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    LBRACKET        reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    UNLESS          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    CASE            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    CLASS           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RBRACE          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    ELSIF           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    END_KW          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    WHEN            reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    RBRACKET        reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 46 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! MODULO          [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! POWER           [ reduce using rule 46 (expression -> expression GREATER_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 107

    (47) expression -> expression LESS_EQUAL expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    LOGICAL_AND     reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LOGICAL_OR      reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    GREATER_THAN    reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LESS_THAN       reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RANGE_INCLUSIVE reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RANGE_EXCLUSIVE reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RETURN          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    YIELD           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    ATTR_ACCESSOR   reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    ATTR_READER     reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    ATTR_WRITER     reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    BREAK           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    NEXT            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    PUTS            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    IDENTIFIER      reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    INSTANCE_VAR    reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LPAREN          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LBRACE          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    INTEGER         reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    FLOAT           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    STRING          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    SYMBOL_COLON    reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    DEFINEDQ        reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    CONSTANT        reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    LBRACKET        reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    IF              reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    UNLESS          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    CASE            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    CLASS           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    $end            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RBRACE          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    ELSIF           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    END_KW          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    WHEN            reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    RBRACKET        reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 47 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46

  ! PLUS            [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! MODULO          [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! POWER           [ reduce using rule 47 (expression -> expression LESS_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 108

    (103) expression -> expression RANGE_INCLUSIVE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
    RETURN          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    YIELD           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    ATTR_ACCESSOR   reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    ATTR_READER     reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    ATTR_WRITER     reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    BREAK           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    NEXT            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    PUTS            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    IDENTIFIER      reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    INSTANCE_VAR    reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    LPAREN          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    LBRACE          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    INTEGER         reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    FLOAT           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    STRING          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    SYMBOL_COLON    reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    DEFINEDQ        reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    CONSTANT        reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    LBRACKET        reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    IF              reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    DEF             reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    WHILE           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    UNLESS          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    CASE            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    CLASS           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    $end            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    RBRACE          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    ELSIF           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    ELSE            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    END_KW          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    WHEN            reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    RPAREN          reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    RBRACKET        reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    COMMA           reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! PLUS            [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! MINUS           [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! TIMES           [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! DIVIDE          [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! MODULO          [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! POWER           [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! LOGICAL_AND     [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! LOGICAL_OR      [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! GREATER_THAN    [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! LESS_THAN       [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 103 (expression -> expression RANGE_INCLUSIVE expression .) ]


state 109

    (104) expression -> expression RANGE_EXCLUSIVE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
    RETURN          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    YIELD           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    ATTR_ACCESSOR   reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    ATTR_READER     reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    ATTR_WRITER     reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    BREAK           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    NEXT            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    PUTS            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    IDENTIFIER      reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    INSTANCE_VAR    reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    LPAREN          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    LBRACE          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    INTEGER         reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    FLOAT           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    STRING          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    SYMBOL_COLON    reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    DEFINEDQ        reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    CONSTANT        reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    LBRACKET        reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    IF              reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    DEF             reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    WHILE           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    UNLESS          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    CASE            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    CLASS           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    $end            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    RBRACE          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    ELSIF           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    ELSE            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    END_KW          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    WHEN            reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    RPAREN          reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    RBRACKET        reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    COMMA           reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! PLUS            [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! MINUS           [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! TIMES           [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! DIVIDE          [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! MODULO          [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! POWER           [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! LOGICAL_AND     [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! LOGICAL_OR      [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! GREATER_THAN    [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! LESS_THAN       [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 104 (expression -> expression RANGE_EXCLUSIVE expression .) ]


state 110

    (67) statement -> YIELD IF expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 67 (statement -> YIELD IF expression .)
    YIELD           reduce using rule 67 (statement -> YIELD IF expression .)
    ATTR_ACCESSOR   reduce using rule 67 (statement -> YIELD IF expression .)
    ATTR_READER     reduce using rule 67 (statement -> YIELD IF expression .)
    ATTR_WRITER     reduce using rule 67 (statement -> YIELD IF expression .)
    BREAK           reduce using rule 67 (statement -> YIELD IF expression .)
    NEXT            reduce using rule 67 (statement -> YIELD IF expression .)
    PUTS            reduce using rule 67 (statement -> YIELD IF expression .)
    IDENTIFIER      reduce using rule 67 (statement -> YIELD IF expression .)
    INSTANCE_VAR    reduce using rule 67 (statement -> YIELD IF expression .)
    LPAREN          reduce using rule 67 (statement -> YIELD IF expression .)
    LBRACE          reduce using rule 67 (statement -> YIELD IF expression .)
    INTEGER         reduce using rule 67 (statement -> YIELD IF expression .)
    FLOAT           reduce using rule 67 (statement -> YIELD IF expression .)
    STRING          reduce using rule 67 (statement -> YIELD IF expression .)
    SYMBOL_COLON    reduce using rule 67 (statement -> YIELD IF expression .)
    DEFINEDQ        reduce using rule 67 (statement -> YIELD IF expression .)
    CONSTANT        reduce using rule 67 (statement -> YIELD IF expression .)
    LBRACKET        reduce using rule 67 (statement -> YIELD IF expression .)
    IF              reduce using rule 67 (statement -> YIELD IF expression .)
    DEF             reduce using rule 67 (statement -> YIELD IF expression .)
    WHILE           reduce using rule 67 (statement -> YIELD IF expression .)
    UNLESS          reduce using rule 67 (statement -> YIELD IF expression .)
    CASE            reduce using rule 67 (statement -> YIELD IF expression .)
    CLASS           reduce using rule 67 (statement -> YIELD IF expression .)
    $end            reduce using rule 67 (statement -> YIELD IF expression .)
    RBRACE          reduce using rule 67 (statement -> YIELD IF expression .)
    ELSIF           reduce using rule 67 (statement -> YIELD IF expression .)
    ELSE            reduce using rule 67 (statement -> YIELD IF expression .)
    END_KW          reduce using rule 67 (statement -> YIELD IF expression .)
    WHEN            reduce using rule 67 (statement -> YIELD IF expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 67 (statement -> YIELD IF expression .) ]


state 111

    (48) if_statement -> IF expression statement_list . elsif_blocks_opt else_block_opt END_KW
    (2) statement_list -> statement_list . statement
    (54) elsif_blocks_opt -> . elsif_blocks
    (55) elsif_blocks_opt -> . empty
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (56) elsif_blocks -> . ELSIF expression statement_list elsif_blocks
    (57) elsif_blocks -> . ELSIF expression statement_list
    (60) empty -> .
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    ELSIF           shift and go to state 150
    ELSE            reduce using rule 60 (empty -> .)
    END_KW          reduce using rule 60 (empty -> .)
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    elsif_blocks_opt               shift and go to state 147
    statement                      shift and go to state 40
    elsif_blocks                   shift and go to state 148
    empty                          shift and go to state 149
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 112

    (27) expression -> expression MINUS . expression
    (25) expression -> MINUS . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 151

state 113

    (79) symbol_list -> symbol_list COMMA . SYMBOL_COLON

    SYMBOL_COLON    shift and go to state 152


state 114

    (15) input -> IDENTIFIER ASSIGN GETS . DOT IDENTIFIER

    DOT             shift and go to state 153


state 115

    (16) assignment -> IDENTIFIER ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    YIELD           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    ATTR_READER     reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    ATTR_WRITER     reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    BREAK           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    NEXT            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    PUTS            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    LPAREN          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    LBRACE          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    INTEGER         reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    FLOAT           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    DEFINEDQ        reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    CONSTANT        reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    LBRACKET        reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    DEF             reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    UNLESS          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    CLASS           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    ELSIF           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    END_KW          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    WHEN            reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression .) ]


state 116

    (80) expression -> IDENTIFIER DOT IDENTIFIER . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 154


state 117

    (17) assignment -> IDENTIFIER PLUS_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    YIELD           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ATTR_READER     reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    BREAK           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    NEXT            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    PUTS            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    INTEGER         reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    FLOAT           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    STRING          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    DEFINEDQ        reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    CONSTANT        reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    IF              reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    DEF             reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    WHILE           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    CASE            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    CLASS           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    $end            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSE            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    END_KW          reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    WHEN            reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 17 (assignment -> IDENTIFIER PLUS_ASSIGN expression .) ]


state 118

    (18) assignment -> IDENTIFIER MINUS_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    YIELD           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ATTR_READER     reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    BREAK           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    NEXT            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    PUTS            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    INTEGER         reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    FLOAT           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    STRING          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    DEFINEDQ        reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    CONSTANT        reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    IF              reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    DEF             reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    WHILE           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    CASE            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    CLASS           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    $end            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSE            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    END_KW          reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    WHEN            reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 18 (assignment -> IDENTIFIER MINUS_ASSIGN expression .) ]


state 119

    (19) assignment -> IDENTIFIER TIMES_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    YIELD           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ATTR_READER     reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    BREAK           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    NEXT            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    PUTS            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    IDENTIFIER      reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    LPAREN          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    LBRACE          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    INTEGER         reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    FLOAT           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    STRING          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    DEFINEDQ        reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    CONSTANT        reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    LBRACKET        reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    IF              reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    DEF             reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    WHILE           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    UNLESS          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    CASE            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    CLASS           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    $end            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    RBRACE          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSIF           reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSE            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    END_KW          reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    WHEN            reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 19 (assignment -> IDENTIFIER TIMES_ASSIGN expression .) ]


state 120

    (20) assignment -> IDENTIFIER DIVIDE_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    YIELD           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ATTR_READER     reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    PUTS            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IDENTIFIER      reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    INTEGER         reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    FLOAT           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    DEFINEDQ        reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CONSTANT        reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IF              reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CLASS           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    $end            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    END_KW          reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 20 (assignment -> IDENTIFIER DIVIDE_ASSIGN expression .) ]


state 121

    (21) assignment -> IDENTIFIER OR_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    YIELD           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    ATTR_READER     reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    BREAK           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    NEXT            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    PUTS            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    IDENTIFIER      reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    LPAREN          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    LBRACE          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    INTEGER         reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    FLOAT           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    STRING          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    DEFINEDQ        reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    CONSTANT        reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    LBRACKET        reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    IF              reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    DEF             reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    WHILE           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    UNLESS          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    CASE            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    CLASS           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    $end            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    RBRACE          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    ELSIF           reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    ELSE            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    END_KW          reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    WHEN            reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 21 (assignment -> IDENTIFIER OR_ASSIGN expression .) ]


state 122

    (22) assignment -> IDENTIFIER AND_ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    YIELD           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    ATTR_READER     reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    ATTR_WRITER     reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    BREAK           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    NEXT            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    PUTS            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    IDENTIFIER      reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    LPAREN          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    LBRACE          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    INTEGER         reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    FLOAT           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    STRING          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    DEFINEDQ        reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    CONSTANT        reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    LBRACKET        reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    IF              reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    DEF             reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    WHILE           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    UNLESS          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    CASE            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    CLASS           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    $end            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    RBRACE          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    ELSIF           reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    ELSE            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    END_KW          reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    WHEN            reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 22 (assignment -> IDENTIFIER AND_ASSIGN expression .) ]


state 123

    (39) assignment -> INSTANCE_VAR ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    YIELD           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    ATTR_READER     reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    ATTR_WRITER     reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    BREAK           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    NEXT            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    PUTS            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    IDENTIFIER      reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    LPAREN          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    LBRACE          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    INTEGER         reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    FLOAT           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    STRING          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    DEFINEDQ        reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    CONSTANT        reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    LBRACKET        reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    IF              reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    DEF             reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    WHILE           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    UNLESS          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    CASE            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    CLASS           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    $end            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    RBRACE          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    ELSIF           reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    ELSE            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    END_KW          reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    WHEN            reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 39 (assignment -> INSTANCE_VAR ASSIGN expression .) ]


state 124

    (23) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LOGICAL_AND     reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LOGICAL_OR      reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    EQUAL_EQUAL     reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RANGE_INCLUSIVE reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    YIELD           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    ATTR_ACCESSOR   reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    ATTR_READER     reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    ATTR_WRITER     reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    INSTANCE_VAR    reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    SYMBOL_COLON    reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    DEFINEDQ        reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    END_KW          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 23 (expression -> LPAREN expression RPAREN .)


state 125

    (24) expression -> LBRACE statement_list RBRACE .

    PLUS            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    MODULO          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    POWER           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LOGICAL_AND     reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LOGICAL_OR      reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    EQUAL_EQUAL     reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    NOT_EQUAL       reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    GREATER_THAN    reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LESS_THAN       reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    GREATER_EQUAL   reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LESS_EQUAL      reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RANGE_INCLUSIVE reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RANGE_EXCLUSIVE reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    YIELD           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    ATTR_ACCESSOR   reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    ATTR_READER     reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    ATTR_WRITER     reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    NEXT            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    PUTS            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    INSTANCE_VAR    reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    INTEGER         reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    SYMBOL_COLON    reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    DEFINEDQ        reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    CONSTANT        reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    DEF             reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    UNLESS          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    CLASS           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    ELSIF           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    END_KW          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    WHEN            reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 24 (expression -> LBRACE statement_list RBRACE .)


state 126

    (97) expression -> LBRACE hash_content RBRACE .

    PLUS            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    MINUS           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    TIMES           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    DIVIDE          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    MODULO          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    POWER           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LOGICAL_AND     reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LOGICAL_OR      reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    EQUAL_EQUAL     reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    NOT_EQUAL       reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    GREATER_THAN    reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LESS_THAN       reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    GREATER_EQUAL   reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LESS_EQUAL      reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RANGE_INCLUSIVE reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RANGE_EXCLUSIVE reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RETURN          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    YIELD           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    ATTR_ACCESSOR   reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    ATTR_READER     reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    ATTR_WRITER     reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    BREAK           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    NEXT            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    PUTS            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    IDENTIFIER      reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    INSTANCE_VAR    reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LPAREN          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LBRACE          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    INTEGER         reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    FLOAT           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    STRING          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    SYMBOL_COLON    reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    DEFINEDQ        reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    CONSTANT        reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    LBRACKET        reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    IF              reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    DEF             reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    WHILE           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    UNLESS          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    CASE            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    CLASS           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    $end            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RBRACE          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    ELSIF           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    ELSE            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    END_KW          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    WHEN            reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RPAREN          reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    RBRACKET        reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)
    COMMA           reduce using rule 97 (expression -> LBRACE hash_content RBRACE .)


state 127

    (101) hash_pair_list -> hash_pair_list COMMA . hash_pair
    (102) hash_pair -> . SYMBOL_COLON ASSIGN expression

    SYMBOL_COLON    shift and go to state 156

    hash_pair                      shift and go to state 155

state 128

    (102) hash_pair -> SYMBOL_COLON ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 157

state 129

    (69) expression -> CONSTANT DOT NEW . expression_list_opt
    (70) expression_list_opt -> . expression_list
    (71) expression_list_opt -> . empty
    (72) expression_list -> . expression
    (73) expression_list -> . expression_list COMMA expression
    (60) empty -> .
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for SYMBOL_COLON resolved as shift
  ! shift/reduce conflict for DEFINEDQ resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    PLUS            reduce using rule 60 (empty -> .)
    TIMES           reduce using rule 60 (empty -> .)
    DIVIDE          reduce using rule 60 (empty -> .)
    MODULO          reduce using rule 60 (empty -> .)
    POWER           reduce using rule 60 (empty -> .)
    LOGICAL_AND     reduce using rule 60 (empty -> .)
    LOGICAL_OR      reduce using rule 60 (empty -> .)
    EQUAL_EQUAL     reduce using rule 60 (empty -> .)
    NOT_EQUAL       reduce using rule 60 (empty -> .)
    GREATER_THAN    reduce using rule 60 (empty -> .)
    LESS_THAN       reduce using rule 60 (empty -> .)
    GREATER_EQUAL   reduce using rule 60 (empty -> .)
    LESS_EQUAL      reduce using rule 60 (empty -> .)
    RANGE_INCLUSIVE reduce using rule 60 (empty -> .)
    RANGE_EXCLUSIVE reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)
    YIELD           reduce using rule 60 (empty -> .)
    ATTR_ACCESSOR   reduce using rule 60 (empty -> .)
    ATTR_READER     reduce using rule 60 (empty -> .)
    ATTR_WRITER     reduce using rule 60 (empty -> .)
    BREAK           reduce using rule 60 (empty -> .)
    NEXT            reduce using rule 60 (empty -> .)
    PUTS            reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    DEF             reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    UNLESS          reduce using rule 60 (empty -> .)
    CASE            reduce using rule 60 (empty -> .)
    CLASS           reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)
    RBRACE          reduce using rule 60 (empty -> .)
    ELSIF           reduce using rule 60 (empty -> .)
    ELSE            reduce using rule 60 (empty -> .)
    END_KW          reduce using rule 60 (empty -> .)
    WHEN            reduce using rule 60 (empty -> .)
    RPAREN          reduce using rule 60 (empty -> .)
    RBRACKET        reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

  ! MINUS           [ reduce using rule 60 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 60 (empty -> .) ]
  ! INSTANCE_VAR    [ reduce using rule 60 (empty -> .) ]
  ! LPAREN          [ reduce using rule 60 (empty -> .) ]
  ! LBRACE          [ reduce using rule 60 (empty -> .) ]
  ! INTEGER         [ reduce using rule 60 (empty -> .) ]
  ! FLOAT           [ reduce using rule 60 (empty -> .) ]
  ! STRING          [ reduce using rule 60 (empty -> .) ]
  ! SYMBOL_COLON    [ reduce using rule 60 (empty -> .) ]
  ! DEFINEDQ        [ reduce using rule 60 (empty -> .) ]
  ! CONSTANT        [ reduce using rule 60 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 60 (empty -> .) ]

    expression_list_opt            shift and go to state 158
    expression_list                shift and go to state 159
    empty                          shift and go to state 160
    expression                     shift and go to state 161

state 130

    (93) expression -> LBRACKET elements RBRACKET .

    PLUS            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    MODULO          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    POWER           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LOGICAL_AND     reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LOGICAL_OR      reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    EQUAL_EQUAL     reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    NOT_EQUAL       reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    GREATER_THAN    reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LESS_THAN       reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    GREATER_EQUAL   reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LESS_EQUAL      reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RANGE_INCLUSIVE reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RANGE_EXCLUSIVE reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RETURN          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    YIELD           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    ATTR_ACCESSOR   reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    ATTR_READER     reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    ATTR_WRITER     reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    BREAK           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    NEXT            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    PUTS            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    INSTANCE_VAR    reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LPAREN          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LBRACE          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    INTEGER         reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    STRING          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    SYMBOL_COLON    reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    DEFINEDQ        reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    CONSTANT        reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    LBRACKET        reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    DEF             reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    UNLESS          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    CASE            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    CLASS           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RBRACE          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    ELSIF           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    END_KW          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    WHEN            reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 93 (expression -> LBRACKET elements RBRACKET .)


state 131

    (94) elements -> elements COMMA . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 162

state 132

    (84) param -> IDENTIFIER .
    (85) param -> IDENTIFIER . ASSIGN expression

    COMMA           reduce using rule 84 (param -> IDENTIFIER .)
    RETURN          reduce using rule 84 (param -> IDENTIFIER .)
    YIELD           reduce using rule 84 (param -> IDENTIFIER .)
    ATTR_ACCESSOR   reduce using rule 84 (param -> IDENTIFIER .)
    ATTR_READER     reduce using rule 84 (param -> IDENTIFIER .)
    ATTR_WRITER     reduce using rule 84 (param -> IDENTIFIER .)
    BREAK           reduce using rule 84 (param -> IDENTIFIER .)
    NEXT            reduce using rule 84 (param -> IDENTIFIER .)
    PUTS            reduce using rule 84 (param -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 84 (param -> IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 84 (param -> IDENTIFIER .)
    LPAREN          reduce using rule 84 (param -> IDENTIFIER .)
    LBRACE          reduce using rule 84 (param -> IDENTIFIER .)
    MINUS           reduce using rule 84 (param -> IDENTIFIER .)
    INTEGER         reduce using rule 84 (param -> IDENTIFIER .)
    FLOAT           reduce using rule 84 (param -> IDENTIFIER .)
    STRING          reduce using rule 84 (param -> IDENTIFIER .)
    SYMBOL_COLON    reduce using rule 84 (param -> IDENTIFIER .)
    DEFINEDQ        reduce using rule 84 (param -> IDENTIFIER .)
    CONSTANT        reduce using rule 84 (param -> IDENTIFIER .)
    LBRACKET        reduce using rule 84 (param -> IDENTIFIER .)
    IF              reduce using rule 84 (param -> IDENTIFIER .)
    DEF             reduce using rule 84 (param -> IDENTIFIER .)
    WHILE           reduce using rule 84 (param -> IDENTIFIER .)
    UNLESS          reduce using rule 84 (param -> IDENTIFIER .)
    CASE            reduce using rule 84 (param -> IDENTIFIER .)
    CLASS           reduce using rule 84 (param -> IDENTIFIER .)
    RPAREN          reduce using rule 84 (param -> IDENTIFIER .)
    ASSIGN          shift and go to state 163


state 133

    (61) function_def -> DEF IDENTIFIER LPAREN . param_list_opt RPAREN statement_list END_KW
    (86) param_list_opt -> . param_list
    (87) param_list_opt -> . empty
    (88) param_list -> . param
    (89) param_list -> . param_list COMMA param
    (60) empty -> .
    (84) param -> . IDENTIFIER
    (85) param -> . IDENTIFIER ASSIGN expression

    RPAREN          reduce using rule 60 (empty -> .)
    IDENTIFIER      shift and go to state 132

    param_list_opt                 shift and go to state 164
    param_list                     shift and go to state 135
    empty                          shift and go to state 136
    param                          shift and go to state 137

state 134

    (63) function_def -> DEF IDENTIFIER param_list_opt . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 165
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 135

    (86) param_list_opt -> param_list .
    (89) param_list -> param_list . COMMA param

    RETURN          reduce using rule 86 (param_list_opt -> param_list .)
    YIELD           reduce using rule 86 (param_list_opt -> param_list .)
    ATTR_ACCESSOR   reduce using rule 86 (param_list_opt -> param_list .)
    ATTR_READER     reduce using rule 86 (param_list_opt -> param_list .)
    ATTR_WRITER     reduce using rule 86 (param_list_opt -> param_list .)
    BREAK           reduce using rule 86 (param_list_opt -> param_list .)
    NEXT            reduce using rule 86 (param_list_opt -> param_list .)
    PUTS            reduce using rule 86 (param_list_opt -> param_list .)
    IDENTIFIER      reduce using rule 86 (param_list_opt -> param_list .)
    INSTANCE_VAR    reduce using rule 86 (param_list_opt -> param_list .)
    LPAREN          reduce using rule 86 (param_list_opt -> param_list .)
    LBRACE          reduce using rule 86 (param_list_opt -> param_list .)
    MINUS           reduce using rule 86 (param_list_opt -> param_list .)
    INTEGER         reduce using rule 86 (param_list_opt -> param_list .)
    FLOAT           reduce using rule 86 (param_list_opt -> param_list .)
    STRING          reduce using rule 86 (param_list_opt -> param_list .)
    SYMBOL_COLON    reduce using rule 86 (param_list_opt -> param_list .)
    DEFINEDQ        reduce using rule 86 (param_list_opt -> param_list .)
    CONSTANT        reduce using rule 86 (param_list_opt -> param_list .)
    LBRACKET        reduce using rule 86 (param_list_opt -> param_list .)
    IF              reduce using rule 86 (param_list_opt -> param_list .)
    DEF             reduce using rule 86 (param_list_opt -> param_list .)
    WHILE           reduce using rule 86 (param_list_opt -> param_list .)
    UNLESS          reduce using rule 86 (param_list_opt -> param_list .)
    CASE            reduce using rule 86 (param_list_opt -> param_list .)
    CLASS           reduce using rule 86 (param_list_opt -> param_list .)
    RPAREN          reduce using rule 86 (param_list_opt -> param_list .)
    COMMA           shift and go to state 166


state 136

    (87) param_list_opt -> empty .

    RETURN          reduce using rule 87 (param_list_opt -> empty .)
    YIELD           reduce using rule 87 (param_list_opt -> empty .)
    ATTR_ACCESSOR   reduce using rule 87 (param_list_opt -> empty .)
    ATTR_READER     reduce using rule 87 (param_list_opt -> empty .)
    ATTR_WRITER     reduce using rule 87 (param_list_opt -> empty .)
    BREAK           reduce using rule 87 (param_list_opt -> empty .)
    NEXT            reduce using rule 87 (param_list_opt -> empty .)
    PUTS            reduce using rule 87 (param_list_opt -> empty .)
    IDENTIFIER      reduce using rule 87 (param_list_opt -> empty .)
    INSTANCE_VAR    reduce using rule 87 (param_list_opt -> empty .)
    LPAREN          reduce using rule 87 (param_list_opt -> empty .)
    LBRACE          reduce using rule 87 (param_list_opt -> empty .)
    MINUS           reduce using rule 87 (param_list_opt -> empty .)
    INTEGER         reduce using rule 87 (param_list_opt -> empty .)
    FLOAT           reduce using rule 87 (param_list_opt -> empty .)
    STRING          reduce using rule 87 (param_list_opt -> empty .)
    SYMBOL_COLON    reduce using rule 87 (param_list_opt -> empty .)
    DEFINEDQ        reduce using rule 87 (param_list_opt -> empty .)
    CONSTANT        reduce using rule 87 (param_list_opt -> empty .)
    LBRACKET        reduce using rule 87 (param_list_opt -> empty .)
    IF              reduce using rule 87 (param_list_opt -> empty .)
    DEF             reduce using rule 87 (param_list_opt -> empty .)
    WHILE           reduce using rule 87 (param_list_opt -> empty .)
    UNLESS          reduce using rule 87 (param_list_opt -> empty .)
    CASE            reduce using rule 87 (param_list_opt -> empty .)
    CLASS           reduce using rule 87 (param_list_opt -> empty .)
    RPAREN          reduce using rule 87 (param_list_opt -> empty .)


state 137

    (88) param_list -> param .

    COMMA           reduce using rule 88 (param_list -> param .)
    RETURN          reduce using rule 88 (param_list -> param .)
    YIELD           reduce using rule 88 (param_list -> param .)
    ATTR_ACCESSOR   reduce using rule 88 (param_list -> param .)
    ATTR_READER     reduce using rule 88 (param_list -> param .)
    ATTR_WRITER     reduce using rule 88 (param_list -> param .)
    BREAK           reduce using rule 88 (param_list -> param .)
    NEXT            reduce using rule 88 (param_list -> param .)
    PUTS            reduce using rule 88 (param_list -> param .)
    IDENTIFIER      reduce using rule 88 (param_list -> param .)
    INSTANCE_VAR    reduce using rule 88 (param_list -> param .)
    LPAREN          reduce using rule 88 (param_list -> param .)
    LBRACE          reduce using rule 88 (param_list -> param .)
    MINUS           reduce using rule 88 (param_list -> param .)
    INTEGER         reduce using rule 88 (param_list -> param .)
    FLOAT           reduce using rule 88 (param_list -> param .)
    STRING          reduce using rule 88 (param_list -> param .)
    SYMBOL_COLON    reduce using rule 88 (param_list -> param .)
    DEFINEDQ        reduce using rule 88 (param_list -> param .)
    CONSTANT        reduce using rule 88 (param_list -> param .)
    LBRACKET        reduce using rule 88 (param_list -> param .)
    IF              reduce using rule 88 (param_list -> param .)
    DEF             reduce using rule 88 (param_list -> param .)
    WHILE           reduce using rule 88 (param_list -> param .)
    UNLESS          reduce using rule 88 (param_list -> param .)
    CASE            reduce using rule 88 (param_list -> param .)
    CLASS           reduce using rule 88 (param_list -> param .)
    RPAREN          reduce using rule 88 (param_list -> param .)


state 138

    (64) function_def -> DEF SELF DOT . IDENTIFIER statement_list END_KW

    IDENTIFIER      shift and go to state 167


state 139

    (65) function_def -> DEF CONSTANT DOT . IDENTIFIER statement_list END_KW

    IDENTIFIER      shift and go to state 168


state 140

    (90) while_statement -> WHILE expression statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 169
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 141

    (49) unless_statement -> UNLESS expression statement_list . else_block_opt END_KW
    (2) statement_list -> statement_list . statement
    (58) else_block_opt -> . ELSE statement_list
    (59) else_block_opt -> . empty
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (60) empty -> .
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    ELSE            shift and go to state 171
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    END_KW          reduce using rule 60 (empty -> .)
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    else_block_opt                 shift and go to state 170
    statement                      shift and go to state 40
    empty                          shift and go to state 172
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 142

    (50) case_statement -> CASE expression when_blocks . else_block_opt END_KW
    (51) when_blocks -> when_blocks . when_block
    (58) else_block_opt -> . ELSE statement_list
    (59) else_block_opt -> . empty
    (53) when_block -> . WHEN expression statement_list
    (60) empty -> .

    ELSE            shift and go to state 171
    WHEN            shift and go to state 144
    END_KW          reduce using rule 60 (empty -> .)

    else_block_opt                 shift and go to state 173
    when_block                     shift and go to state 174
    empty                          shift and go to state 172

state 143

    (52) when_blocks -> when_block .

    ELSE            reduce using rule 52 (when_blocks -> when_block .)
    WHEN            reduce using rule 52 (when_blocks -> when_block .)
    END_KW          reduce using rule 52 (when_blocks -> when_block .)


state 144

    (53) when_block -> WHEN . expression statement_list
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 175

state 145

    (68) class_def -> CLASS CONSTANT statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 176
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 146

    (74) class_def -> CLASS CONSTANT LESS_THAN . CONSTANT statement_list END_KW

    CONSTANT        shift and go to state 177


state 147

    (48) if_statement -> IF expression statement_list elsif_blocks_opt . else_block_opt END_KW
    (58) else_block_opt -> . ELSE statement_list
    (59) else_block_opt -> . empty
    (60) empty -> .

    ELSE            shift and go to state 171
    END_KW          reduce using rule 60 (empty -> .)

    else_block_opt                 shift and go to state 178
    empty                          shift and go to state 172

state 148

    (54) elsif_blocks_opt -> elsif_blocks .

    ELSE            reduce using rule 54 (elsif_blocks_opt -> elsif_blocks .)
    END_KW          reduce using rule 54 (elsif_blocks_opt -> elsif_blocks .)


state 149

    (55) elsif_blocks_opt -> empty .

    ELSE            reduce using rule 55 (elsif_blocks_opt -> empty .)
    END_KW          reduce using rule 55 (elsif_blocks_opt -> empty .)


state 150

    (56) elsif_blocks -> ELSIF . expression statement_list elsif_blocks
    (57) elsif_blocks -> ELSIF . expression statement_list
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 179

state 151

    (27) expression -> expression MINUS expression .
    (25) expression -> MINUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! reduce/reduce conflict for PLUS resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for MODULO resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for POWER resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for EQUAL_EQUAL resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for RANGE_INCLUSIVE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for RANGE_EXCLUSIVE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for YIELD resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for ATTR_ACCESSOR resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for ATTR_READER resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for ATTR_WRITER resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for NEXT resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for PUTS resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LBRACE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for INTEGER resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for SYMBOL_COLON resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for DEFINEDQ resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for CONSTANT resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for IF resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for DEF resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for UNLESS resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (expression -> MINUS expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 25 (expression -> MINUS expression .)
    PLUS            reduce using rule 25 (expression -> MINUS expression .)
    MINUS           reduce using rule 25 (expression -> MINUS expression .)
    TIMES           reduce using rule 25 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 25 (expression -> MINUS expression .)
    MODULO          reduce using rule 25 (expression -> MINUS expression .)
    POWER           reduce using rule 25 (expression -> MINUS expression .)
    LOGICAL_AND     reduce using rule 25 (expression -> MINUS expression .)
    LOGICAL_OR      reduce using rule 25 (expression -> MINUS expression .)
    EQUAL_EQUAL     reduce using rule 25 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 25 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 25 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 25 (expression -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 25 (expression -> MINUS expression .)
    LESS_EQUAL      reduce using rule 25 (expression -> MINUS expression .)
    RANGE_INCLUSIVE reduce using rule 25 (expression -> MINUS expression .)
    RANGE_EXCLUSIVE reduce using rule 25 (expression -> MINUS expression .)
    RETURN          reduce using rule 25 (expression -> MINUS expression .)
    YIELD           reduce using rule 25 (expression -> MINUS expression .)
    ATTR_ACCESSOR   reduce using rule 25 (expression -> MINUS expression .)
    ATTR_READER     reduce using rule 25 (expression -> MINUS expression .)
    ATTR_WRITER     reduce using rule 25 (expression -> MINUS expression .)
    BREAK           reduce using rule 25 (expression -> MINUS expression .)
    NEXT            reduce using rule 25 (expression -> MINUS expression .)
    ELSIF           reduce using rule 25 (expression -> MINUS expression .)
    PUTS            reduce using rule 25 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 25 (expression -> MINUS expression .)
    INSTANCE_VAR    reduce using rule 25 (expression -> MINUS expression .)
    LPAREN          reduce using rule 25 (expression -> MINUS expression .)
    LBRACE          reduce using rule 25 (expression -> MINUS expression .)
    INTEGER         reduce using rule 25 (expression -> MINUS expression .)
    FLOAT           reduce using rule 25 (expression -> MINUS expression .)
    STRING          reduce using rule 25 (expression -> MINUS expression .)
    SYMBOL_COLON    reduce using rule 25 (expression -> MINUS expression .)
    DEFINEDQ        reduce using rule 25 (expression -> MINUS expression .)
    CONSTANT        reduce using rule 25 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 25 (expression -> MINUS expression .)
    IF              reduce using rule 25 (expression -> MINUS expression .)
    DEF             reduce using rule 25 (expression -> MINUS expression .)
    WHILE           reduce using rule 25 (expression -> MINUS expression .)
    UNLESS          reduce using rule 25 (expression -> MINUS expression .)
    CASE            reduce using rule 25 (expression -> MINUS expression .)
    CLASS           reduce using rule 25 (expression -> MINUS expression .)
    ELSE            reduce using rule 25 (expression -> MINUS expression .)
    END_KW          reduce using rule 25 (expression -> MINUS expression .)
    WHEN            reduce using rule 25 (expression -> MINUS expression .)

  ! PLUS            [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LOGICAL_AND     [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LOGICAL_OR      [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LESS_THAN       [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! RETURN          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! YIELD           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! ATTR_ACCESSOR   [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! ATTR_READER     [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! ATTR_WRITER     [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! BREAK           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! NEXT            [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! PUTS            [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! IDENTIFIER      [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! INSTANCE_VAR    [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LPAREN          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LBRACE          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! INTEGER         [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! FLOAT           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! STRING          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! SYMBOL_COLON    [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! DEFINEDQ        [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! CONSTANT        [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LBRACKET        [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! IF              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! DEF             [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! WHILE           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! UNLESS          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! CASE            [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! CLASS           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! TIMES           [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! MODULO          [ shift and go to state 45 ]
  ! POWER           [ shift and go to state 46 ]
  ! LOGICAL_AND     [ shift and go to state 47 ]
  ! LOGICAL_OR      [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! NOT_EQUAL       [ shift and go to state 50 ]
  ! GREATER_THAN    [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! GREATER_EQUAL   [ shift and go to state 53 ]
  ! LESS_EQUAL      [ shift and go to state 54 ]
  ! RANGE_INCLUSIVE [ shift and go to state 55 ]
  ! RANGE_EXCLUSIVE [ shift and go to state 56 ]


state 152

    (79) symbol_list -> symbol_list COMMA SYMBOL_COLON .

    COMMA           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    RETURN          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    YIELD           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    ATTR_ACCESSOR   reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    ATTR_READER     reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    ATTR_WRITER     reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    BREAK           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    NEXT            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    PUTS            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    IDENTIFIER      reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    INSTANCE_VAR    reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    LPAREN          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    LBRACE          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    MINUS           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    INTEGER         reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    FLOAT           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    STRING          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    SYMBOL_COLON    reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    DEFINEDQ        reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    CONSTANT        reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    LBRACKET        reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    IF              reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    DEF             reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    WHILE           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    UNLESS          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    CASE            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    CLASS           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    $end            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    RBRACE          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    ELSIF           reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    ELSE            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    END_KW          reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)
    WHEN            reduce using rule 79 (symbol_list -> symbol_list COMMA SYMBOL_COLON .)


state 153

    (15) input -> IDENTIFIER ASSIGN GETS DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 180


state 154

    (80) expression -> IDENTIFIER DOT IDENTIFIER LPAREN . arg_list RPAREN
    (81) arg_list -> . arg_list COMMA expression
    (82) arg_list -> . expression
    (83) arg_list -> . empty
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (60) empty -> .

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    arg_list                       shift and go to state 181
    expression                     shift and go to state 182
    empty                          shift and go to state 183

state 155

    (101) hash_pair_list -> hash_pair_list COMMA hash_pair .

    COMMA           reduce using rule 101 (hash_pair_list -> hash_pair_list COMMA hash_pair .)
    RBRACE          reduce using rule 101 (hash_pair_list -> hash_pair_list COMMA hash_pair .)


state 156

    (102) hash_pair -> SYMBOL_COLON . ASSIGN expression

    ASSIGN          shift and go to state 128


state 157

    (102) hash_pair -> SYMBOL_COLON ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    COMMA           reduce using rule 102 (hash_pair -> SYMBOL_COLON ASSIGN expression .)
    RBRACE          reduce using rule 102 (hash_pair -> SYMBOL_COLON ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 158

    (69) expression -> CONSTANT DOT NEW expression_list_opt .

    PLUS            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    MINUS           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    TIMES           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    DIVIDE          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    MODULO          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    POWER           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LOGICAL_AND     reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LOGICAL_OR      reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    EQUAL_EQUAL     reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    NOT_EQUAL       reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    GREATER_THAN    reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LESS_THAN       reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    GREATER_EQUAL   reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LESS_EQUAL      reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RANGE_INCLUSIVE reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RANGE_EXCLUSIVE reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RETURN          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    YIELD           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    ATTR_ACCESSOR   reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    ATTR_READER     reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    ATTR_WRITER     reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    BREAK           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    NEXT            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    PUTS            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    IDENTIFIER      reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    INSTANCE_VAR    reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LPAREN          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LBRACE          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    INTEGER         reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    FLOAT           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    STRING          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    SYMBOL_COLON    reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    DEFINEDQ        reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    CONSTANT        reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    LBRACKET        reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    IF              reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    DEF             reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    WHILE           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    UNLESS          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    CASE            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    CLASS           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    $end            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RBRACE          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    ELSIF           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    ELSE            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    END_KW          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    WHEN            reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RPAREN          reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    RBRACKET        reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)
    COMMA           reduce using rule 69 (expression -> CONSTANT DOT NEW expression_list_opt .)


state 159

    (70) expression_list_opt -> expression_list .
    (73) expression_list -> expression_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 70 (expression_list_opt -> expression_list .)
    MINUS           reduce using rule 70 (expression_list_opt -> expression_list .)
    TIMES           reduce using rule 70 (expression_list_opt -> expression_list .)
    DIVIDE          reduce using rule 70 (expression_list_opt -> expression_list .)
    MODULO          reduce using rule 70 (expression_list_opt -> expression_list .)
    POWER           reduce using rule 70 (expression_list_opt -> expression_list .)
    LOGICAL_AND     reduce using rule 70 (expression_list_opt -> expression_list .)
    LOGICAL_OR      reduce using rule 70 (expression_list_opt -> expression_list .)
    EQUAL_EQUAL     reduce using rule 70 (expression_list_opt -> expression_list .)
    NOT_EQUAL       reduce using rule 70 (expression_list_opt -> expression_list .)
    GREATER_THAN    reduce using rule 70 (expression_list_opt -> expression_list .)
    LESS_THAN       reduce using rule 70 (expression_list_opt -> expression_list .)
    GREATER_EQUAL   reduce using rule 70 (expression_list_opt -> expression_list .)
    LESS_EQUAL      reduce using rule 70 (expression_list_opt -> expression_list .)
    RANGE_INCLUSIVE reduce using rule 70 (expression_list_opt -> expression_list .)
    RANGE_EXCLUSIVE reduce using rule 70 (expression_list_opt -> expression_list .)
    RETURN          reduce using rule 70 (expression_list_opt -> expression_list .)
    YIELD           reduce using rule 70 (expression_list_opt -> expression_list .)
    ATTR_ACCESSOR   reduce using rule 70 (expression_list_opt -> expression_list .)
    ATTR_READER     reduce using rule 70 (expression_list_opt -> expression_list .)
    ATTR_WRITER     reduce using rule 70 (expression_list_opt -> expression_list .)
    BREAK           reduce using rule 70 (expression_list_opt -> expression_list .)
    NEXT            reduce using rule 70 (expression_list_opt -> expression_list .)
    PUTS            reduce using rule 70 (expression_list_opt -> expression_list .)
    IDENTIFIER      reduce using rule 70 (expression_list_opt -> expression_list .)
    INSTANCE_VAR    reduce using rule 70 (expression_list_opt -> expression_list .)
    LPAREN          reduce using rule 70 (expression_list_opt -> expression_list .)
    LBRACE          reduce using rule 70 (expression_list_opt -> expression_list .)
    INTEGER         reduce using rule 70 (expression_list_opt -> expression_list .)
    FLOAT           reduce using rule 70 (expression_list_opt -> expression_list .)
    STRING          reduce using rule 70 (expression_list_opt -> expression_list .)
    SYMBOL_COLON    reduce using rule 70 (expression_list_opt -> expression_list .)
    DEFINEDQ        reduce using rule 70 (expression_list_opt -> expression_list .)
    CONSTANT        reduce using rule 70 (expression_list_opt -> expression_list .)
    LBRACKET        reduce using rule 70 (expression_list_opt -> expression_list .)
    IF              reduce using rule 70 (expression_list_opt -> expression_list .)
    DEF             reduce using rule 70 (expression_list_opt -> expression_list .)
    WHILE           reduce using rule 70 (expression_list_opt -> expression_list .)
    UNLESS          reduce using rule 70 (expression_list_opt -> expression_list .)
    CASE            reduce using rule 70 (expression_list_opt -> expression_list .)
    CLASS           reduce using rule 70 (expression_list_opt -> expression_list .)
    $end            reduce using rule 70 (expression_list_opt -> expression_list .)
    RBRACE          reduce using rule 70 (expression_list_opt -> expression_list .)
    ELSIF           reduce using rule 70 (expression_list_opt -> expression_list .)
    ELSE            reduce using rule 70 (expression_list_opt -> expression_list .)
    END_KW          reduce using rule 70 (expression_list_opt -> expression_list .)
    WHEN            reduce using rule 70 (expression_list_opt -> expression_list .)
    RPAREN          reduce using rule 70 (expression_list_opt -> expression_list .)
    RBRACKET        reduce using rule 70 (expression_list_opt -> expression_list .)
    COMMA           shift and go to state 184

  ! COMMA           [ reduce using rule 70 (expression_list_opt -> expression_list .) ]


state 160

    (71) expression_list_opt -> empty .

    PLUS            reduce using rule 71 (expression_list_opt -> empty .)
    MINUS           reduce using rule 71 (expression_list_opt -> empty .)
    TIMES           reduce using rule 71 (expression_list_opt -> empty .)
    DIVIDE          reduce using rule 71 (expression_list_opt -> empty .)
    MODULO          reduce using rule 71 (expression_list_opt -> empty .)
    POWER           reduce using rule 71 (expression_list_opt -> empty .)
    LOGICAL_AND     reduce using rule 71 (expression_list_opt -> empty .)
    LOGICAL_OR      reduce using rule 71 (expression_list_opt -> empty .)
    EQUAL_EQUAL     reduce using rule 71 (expression_list_opt -> empty .)
    NOT_EQUAL       reduce using rule 71 (expression_list_opt -> empty .)
    GREATER_THAN    reduce using rule 71 (expression_list_opt -> empty .)
    LESS_THAN       reduce using rule 71 (expression_list_opt -> empty .)
    GREATER_EQUAL   reduce using rule 71 (expression_list_opt -> empty .)
    LESS_EQUAL      reduce using rule 71 (expression_list_opt -> empty .)
    RANGE_INCLUSIVE reduce using rule 71 (expression_list_opt -> empty .)
    RANGE_EXCLUSIVE reduce using rule 71 (expression_list_opt -> empty .)
    RETURN          reduce using rule 71 (expression_list_opt -> empty .)
    YIELD           reduce using rule 71 (expression_list_opt -> empty .)
    ATTR_ACCESSOR   reduce using rule 71 (expression_list_opt -> empty .)
    ATTR_READER     reduce using rule 71 (expression_list_opt -> empty .)
    ATTR_WRITER     reduce using rule 71 (expression_list_opt -> empty .)
    BREAK           reduce using rule 71 (expression_list_opt -> empty .)
    NEXT            reduce using rule 71 (expression_list_opt -> empty .)
    PUTS            reduce using rule 71 (expression_list_opt -> empty .)
    IDENTIFIER      reduce using rule 71 (expression_list_opt -> empty .)
    INSTANCE_VAR    reduce using rule 71 (expression_list_opt -> empty .)
    LPAREN          reduce using rule 71 (expression_list_opt -> empty .)
    LBRACE          reduce using rule 71 (expression_list_opt -> empty .)
    INTEGER         reduce using rule 71 (expression_list_opt -> empty .)
    FLOAT           reduce using rule 71 (expression_list_opt -> empty .)
    STRING          reduce using rule 71 (expression_list_opt -> empty .)
    SYMBOL_COLON    reduce using rule 71 (expression_list_opt -> empty .)
    DEFINEDQ        reduce using rule 71 (expression_list_opt -> empty .)
    CONSTANT        reduce using rule 71 (expression_list_opt -> empty .)
    LBRACKET        reduce using rule 71 (expression_list_opt -> empty .)
    IF              reduce using rule 71 (expression_list_opt -> empty .)
    DEF             reduce using rule 71 (expression_list_opt -> empty .)
    WHILE           reduce using rule 71 (expression_list_opt -> empty .)
    UNLESS          reduce using rule 71 (expression_list_opt -> empty .)
    CASE            reduce using rule 71 (expression_list_opt -> empty .)
    CLASS           reduce using rule 71 (expression_list_opt -> empty .)
    $end            reduce using rule 71 (expression_list_opt -> empty .)
    RBRACE          reduce using rule 71 (expression_list_opt -> empty .)
    ELSIF           reduce using rule 71 (expression_list_opt -> empty .)
    ELSE            reduce using rule 71 (expression_list_opt -> empty .)
    END_KW          reduce using rule 71 (expression_list_opt -> empty .)
    WHEN            reduce using rule 71 (expression_list_opt -> empty .)
    RPAREN          reduce using rule 71 (expression_list_opt -> empty .)
    RBRACKET        reduce using rule 71 (expression_list_opt -> empty .)
    COMMA           reduce using rule 71 (expression_list_opt -> empty .)


state 161

    (72) expression_list -> expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
    RETURN          reduce using rule 72 (expression_list -> expression .)
    YIELD           reduce using rule 72 (expression_list -> expression .)
    ATTR_ACCESSOR   reduce using rule 72 (expression_list -> expression .)
    ATTR_READER     reduce using rule 72 (expression_list -> expression .)
    ATTR_WRITER     reduce using rule 72 (expression_list -> expression .)
    BREAK           reduce using rule 72 (expression_list -> expression .)
    NEXT            reduce using rule 72 (expression_list -> expression .)
    PUTS            reduce using rule 72 (expression_list -> expression .)
    IDENTIFIER      reduce using rule 72 (expression_list -> expression .)
    INSTANCE_VAR    reduce using rule 72 (expression_list -> expression .)
    LPAREN          reduce using rule 72 (expression_list -> expression .)
    LBRACE          reduce using rule 72 (expression_list -> expression .)
    INTEGER         reduce using rule 72 (expression_list -> expression .)
    FLOAT           reduce using rule 72 (expression_list -> expression .)
    STRING          reduce using rule 72 (expression_list -> expression .)
    SYMBOL_COLON    reduce using rule 72 (expression_list -> expression .)
    DEFINEDQ        reduce using rule 72 (expression_list -> expression .)
    CONSTANT        reduce using rule 72 (expression_list -> expression .)
    LBRACKET        reduce using rule 72 (expression_list -> expression .)
    IF              reduce using rule 72 (expression_list -> expression .)
    DEF             reduce using rule 72 (expression_list -> expression .)
    WHILE           reduce using rule 72 (expression_list -> expression .)
    UNLESS          reduce using rule 72 (expression_list -> expression .)
    CASE            reduce using rule 72 (expression_list -> expression .)
    CLASS           reduce using rule 72 (expression_list -> expression .)
    $end            reduce using rule 72 (expression_list -> expression .)
    RBRACE          reduce using rule 72 (expression_list -> expression .)
    ELSIF           reduce using rule 72 (expression_list -> expression .)
    ELSE            reduce using rule 72 (expression_list -> expression .)
    END_KW          reduce using rule 72 (expression_list -> expression .)
    WHEN            reduce using rule 72 (expression_list -> expression .)
    RPAREN          reduce using rule 72 (expression_list -> expression .)
    RBRACKET        reduce using rule 72 (expression_list -> expression .)
    COMMA           reduce using rule 72 (expression_list -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! PLUS            [ reduce using rule 72 (expression_list -> expression .) ]
  ! MINUS           [ reduce using rule 72 (expression_list -> expression .) ]
  ! TIMES           [ reduce using rule 72 (expression_list -> expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression_list -> expression .) ]
  ! MODULO          [ reduce using rule 72 (expression_list -> expression .) ]
  ! POWER           [ reduce using rule 72 (expression_list -> expression .) ]
  ! LOGICAL_AND     [ reduce using rule 72 (expression_list -> expression .) ]
  ! LOGICAL_OR      [ reduce using rule 72 (expression_list -> expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 72 (expression_list -> expression .) ]
  ! NOT_EQUAL       [ reduce using rule 72 (expression_list -> expression .) ]
  ! GREATER_THAN    [ reduce using rule 72 (expression_list -> expression .) ]
  ! LESS_THAN       [ reduce using rule 72 (expression_list -> expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 72 (expression_list -> expression .) ]
  ! LESS_EQUAL      [ reduce using rule 72 (expression_list -> expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 72 (expression_list -> expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 72 (expression_list -> expression .) ]


state 162

    (94) elements -> elements COMMA expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    RBRACKET        reduce using rule 94 (elements -> elements COMMA expression .)
    COMMA           reduce using rule 94 (elements -> elements COMMA expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 163

    (85) param -> IDENTIFIER ASSIGN . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 185

state 164

    (61) function_def -> DEF IDENTIFIER LPAREN param_list_opt . RPAREN statement_list END_KW

    RPAREN          shift and go to state 186


state 165

    (63) function_def -> DEF IDENTIFIER param_list_opt statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 187
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 166

    (89) param_list -> param_list COMMA . param
    (84) param -> . IDENTIFIER
    (85) param -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 132

    param                          shift and go to state 188

state 167

    (64) function_def -> DEF SELF DOT IDENTIFIER . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 189
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 168

    (65) function_def -> DEF CONSTANT DOT IDENTIFIER . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 190
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 169

    (90) while_statement -> WHILE expression statement_list END_KW .

    RETURN          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    YIELD           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    ATTR_READER     reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    ATTR_WRITER     reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    BREAK           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    NEXT            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    PUTS            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    IDENTIFIER      reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    LPAREN          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    LBRACE          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    MINUS           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    INTEGER         reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    FLOAT           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    STRING          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    DEFINEDQ        reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    CONSTANT        reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    LBRACKET        reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    IF              reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    DEF             reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    WHILE           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    UNLESS          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    CASE            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    CLASS           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    $end            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    RBRACE          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    ELSIF           reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    ELSE            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    END_KW          reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)
    WHEN            reduce using rule 90 (while_statement -> WHILE expression statement_list END_KW .)


state 170

    (49) unless_statement -> UNLESS expression statement_list else_block_opt . END_KW

    END_KW          shift and go to state 191


state 171

    (58) else_block_opt -> ELSE . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 192
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 172

    (59) else_block_opt -> empty .

    END_KW          reduce using rule 59 (else_block_opt -> empty .)


state 173

    (50) case_statement -> CASE expression when_blocks else_block_opt . END_KW

    END_KW          shift and go to state 193


state 174

    (51) when_blocks -> when_blocks when_block .

    ELSE            reduce using rule 51 (when_blocks -> when_blocks when_block .)
    WHEN            reduce using rule 51 (when_blocks -> when_blocks when_block .)
    END_KW          reduce using rule 51 (when_blocks -> when_blocks when_block .)


state 175

    (53) when_block -> WHEN expression . statement_list
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    PLUS            shift and go to state 41
    MINUS           shift and go to state 112
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement_list                 shift and go to state 194
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 176

    (68) class_def -> CLASS CONSTANT statement_list END_KW .

    RETURN          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    YIELD           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    ATTR_READER     reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    ATTR_WRITER     reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    BREAK           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    NEXT            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    PUTS            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    IDENTIFIER      reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    LPAREN          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    LBRACE          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    MINUS           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    INTEGER         reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    FLOAT           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    STRING          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    DEFINEDQ        reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    CONSTANT        reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    LBRACKET        reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    IF              reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    DEF             reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    WHILE           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    UNLESS          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    CASE            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    CLASS           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    $end            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    RBRACE          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    ELSIF           reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    ELSE            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    END_KW          reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)
    WHEN            reduce using rule 68 (class_def -> CLASS CONSTANT statement_list END_KW .)


state 177

    (74) class_def -> CLASS CONSTANT LESS_THAN CONSTANT . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 195
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 178

    (48) if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt . END_KW

    END_KW          shift and go to state 196


state 179

    (56) elsif_blocks -> ELSIF expression . statement_list elsif_blocks
    (57) elsif_blocks -> ELSIF expression . statement_list
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    PLUS            shift and go to state 41
    MINUS           shift and go to state 112
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement_list                 shift and go to state 197
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 180

    (15) input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .

    RETURN          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    YIELD           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ATTR_ACCESSOR   reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ATTR_READER     reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ATTR_WRITER     reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    BREAK           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    NEXT            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    PUTS            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    INSTANCE_VAR    reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    LPAREN          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    LBRACE          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    MINUS           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    INTEGER         reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    FLOAT           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    STRING          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    SYMBOL_COLON    reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    DEFINEDQ        reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    CONSTANT        reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    LBRACKET        reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    IF              reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    DEF             reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    WHILE           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    UNLESS          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    CASE            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    CLASS           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    $end            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    RBRACE          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ELSIF           reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    ELSE            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    END_KW          reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)
    WHEN            reduce using rule 15 (input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER .)


state 181

    (80) expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list . RPAREN
    (81) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 199


state 182

    (82) arg_list -> expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    RPAREN          reduce using rule 82 (arg_list -> expression .)
    COMMA           reduce using rule 82 (arg_list -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 183

    (83) arg_list -> empty .

    RPAREN          reduce using rule 83 (arg_list -> empty .)
    COMMA           reduce using rule 83 (arg_list -> empty .)


state 184

    (73) expression_list -> expression_list COMMA . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 200

state 185

    (85) param -> IDENTIFIER ASSIGN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    YIELD           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    ATTR_ACCESSOR   reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    ATTR_READER     reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    ATTR_WRITER     reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    BREAK           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    NEXT            reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    PUTS            reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    INSTANCE_VAR    reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    LPAREN          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    LBRACE          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    INTEGER         reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    FLOAT           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    SYMBOL_COLON    reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    DEFINEDQ        reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    CONSTANT        reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    LBRACKET        reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    DEF             reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    UNLESS          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    CASE            reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    CLASS           reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! MINUS           [ reduce using rule 85 (param -> IDENTIFIER ASSIGN expression .) ]


state 186

    (61) function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN . statement_list END_KW
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement_list                 shift and go to state 201
    statement                      shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 187

    (63) function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .

    RETURN          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    YIELD           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    ATTR_READER     reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    ATTR_WRITER     reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    BREAK           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    NEXT            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    PUTS            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    IDENTIFIER      reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    LPAREN          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    LBRACE          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    MINUS           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    INTEGER         reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    FLOAT           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    STRING          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    DEFINEDQ        reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    CONSTANT        reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    LBRACKET        reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    IF              reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    DEF             reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    WHILE           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    UNLESS          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    CASE            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    CLASS           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    $end            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    RBRACE          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    ELSIF           reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    ELSE            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    END_KW          reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)
    WHEN            reduce using rule 63 (function_def -> DEF IDENTIFIER param_list_opt statement_list END_KW .)


state 188

    (89) param_list -> param_list COMMA param .

    COMMA           reduce using rule 89 (param_list -> param_list COMMA param .)
    RETURN          reduce using rule 89 (param_list -> param_list COMMA param .)
    YIELD           reduce using rule 89 (param_list -> param_list COMMA param .)
    ATTR_ACCESSOR   reduce using rule 89 (param_list -> param_list COMMA param .)
    ATTR_READER     reduce using rule 89 (param_list -> param_list COMMA param .)
    ATTR_WRITER     reduce using rule 89 (param_list -> param_list COMMA param .)
    BREAK           reduce using rule 89 (param_list -> param_list COMMA param .)
    NEXT            reduce using rule 89 (param_list -> param_list COMMA param .)
    PUTS            reduce using rule 89 (param_list -> param_list COMMA param .)
    IDENTIFIER      reduce using rule 89 (param_list -> param_list COMMA param .)
    INSTANCE_VAR    reduce using rule 89 (param_list -> param_list COMMA param .)
    LPAREN          reduce using rule 89 (param_list -> param_list COMMA param .)
    LBRACE          reduce using rule 89 (param_list -> param_list COMMA param .)
    MINUS           reduce using rule 89 (param_list -> param_list COMMA param .)
    INTEGER         reduce using rule 89 (param_list -> param_list COMMA param .)
    FLOAT           reduce using rule 89 (param_list -> param_list COMMA param .)
    STRING          reduce using rule 89 (param_list -> param_list COMMA param .)
    SYMBOL_COLON    reduce using rule 89 (param_list -> param_list COMMA param .)
    DEFINEDQ        reduce using rule 89 (param_list -> param_list COMMA param .)
    CONSTANT        reduce using rule 89 (param_list -> param_list COMMA param .)
    LBRACKET        reduce using rule 89 (param_list -> param_list COMMA param .)
    IF              reduce using rule 89 (param_list -> param_list COMMA param .)
    DEF             reduce using rule 89 (param_list -> param_list COMMA param .)
    WHILE           reduce using rule 89 (param_list -> param_list COMMA param .)
    UNLESS          reduce using rule 89 (param_list -> param_list COMMA param .)
    CASE            reduce using rule 89 (param_list -> param_list COMMA param .)
    CLASS           reduce using rule 89 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 89 (param_list -> param_list COMMA param .)


state 189

    (64) function_def -> DEF SELF DOT IDENTIFIER statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 202
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 190

    (65) function_def -> DEF CONSTANT DOT IDENTIFIER statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 203
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 191

    (49) unless_statement -> UNLESS expression statement_list else_block_opt END_KW .

    RETURN          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    YIELD           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    ATTR_ACCESSOR   reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    ATTR_READER     reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    ATTR_WRITER     reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    BREAK           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    NEXT            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    PUTS            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    IDENTIFIER      reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    INSTANCE_VAR    reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    LPAREN          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    LBRACE          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    MINUS           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    INTEGER         reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    FLOAT           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    STRING          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    SYMBOL_COLON    reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    DEFINEDQ        reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    CONSTANT        reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    LBRACKET        reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    IF              reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    DEF             reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    WHILE           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    UNLESS          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    CASE            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    CLASS           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    $end            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    RBRACE          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    ELSIF           reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    ELSE            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    END_KW          reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)
    WHEN            reduce using rule 49 (unless_statement -> UNLESS expression statement_list else_block_opt END_KW .)


state 192

    (58) else_block_opt -> ELSE statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          reduce using rule 58 (else_block_opt -> ELSE statement_list .)
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 193

    (50) case_statement -> CASE expression when_blocks else_block_opt END_KW .

    RETURN          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    YIELD           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    ATTR_ACCESSOR   reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    ATTR_READER     reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    ATTR_WRITER     reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    BREAK           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    NEXT            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    PUTS            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    IDENTIFIER      reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    INSTANCE_VAR    reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    LPAREN          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    LBRACE          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    MINUS           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    INTEGER         reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    FLOAT           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    STRING          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    SYMBOL_COLON    reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    DEFINEDQ        reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    CONSTANT        reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    LBRACKET        reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    IF              reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    DEF             reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    WHILE           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    UNLESS          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    CASE            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    CLASS           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    $end            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    RBRACE          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    ELSIF           reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    ELSE            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    END_KW          reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)
    WHEN            reduce using rule 50 (case_statement -> CASE expression when_blocks else_block_opt END_KW .)


state 194

    (53) when_block -> WHEN expression statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    ELSE            reduce using rule 53 (when_block -> WHEN expression statement_list .)
    WHEN            reduce using rule 53 (when_block -> WHEN expression statement_list .)
    END_KW          reduce using rule 53 (when_block -> WHEN expression statement_list .)
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 195

    (74) class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 204
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 196

    (48) if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .

    RETURN          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    YIELD           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    ATTR_ACCESSOR   reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    ATTR_READER     reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    ATTR_WRITER     reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    BREAK           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    NEXT            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    PUTS            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    IDENTIFIER      reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    INSTANCE_VAR    reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    LPAREN          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    LBRACE          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    MINUS           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    INTEGER         reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    FLOAT           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    STRING          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    SYMBOL_COLON    reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    DEFINEDQ        reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    CONSTANT        reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    LBRACKET        reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    IF              reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    DEF             reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    WHILE           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    UNLESS          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    CASE            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    CLASS           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    $end            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    RBRACE          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    ELSIF           reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    ELSE            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    END_KW          reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)
    WHEN            reduce using rule 48 (if_statement -> IF expression statement_list elsif_blocks_opt else_block_opt END_KW .)


state 197

    (56) elsif_blocks -> ELSIF expression statement_list . elsif_blocks
    (57) elsif_blocks -> ELSIF expression statement_list .
    (2) statement_list -> statement_list . statement
    (56) elsif_blocks -> . ELSIF expression statement_list elsif_blocks
    (57) elsif_blocks -> . ELSIF expression statement_list
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    ELSE            reduce using rule 57 (elsif_blocks -> ELSIF expression statement_list .)
    END_KW          reduce using rule 57 (elsif_blocks -> ELSIF expression statement_list .)
    ELSIF           shift and go to state 150
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    expression                     shift and go to state 7
    elsif_blocks                   shift and go to state 205
    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 198

    (80) expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .

    PLUS            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MODULO          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    POWER           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LOGICAL_AND     reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LOGICAL_OR      reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    EQUAL_EQUAL     reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NOT_EQUAL       reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GREATER_THAN    reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LESS_THAN       reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GREATER_EQUAL   reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LESS_EQUAL      reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RANGE_INCLUSIVE reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RANGE_EXCLUSIVE reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    YIELD           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    ATTR_ACCESSOR   reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    ATTR_READER     reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    ATTR_WRITER     reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NEXT            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    PUTS            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    INSTANCE_VAR    reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    INTEGER         reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FLOAT           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    STRING          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    SYMBOL_COLON    reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DEFINEDQ        reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    CONSTANT        reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DEF             reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    UNLESS          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    CASE            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    CLASS           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    ELSIF           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    END_KW          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WHEN            reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 80 (expression -> IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN .)


state 199

    (81) arg_list -> arg_list COMMA . expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression

    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    IDENTIFIER      shift and go to state 58
    INSTANCE_VAR    shift and go to state 59
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 206

state 200

    (73) expression_list -> expression_list COMMA expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for RANGE_INCLUSIVE resolved as shift
  ! shift/reduce conflict for RANGE_EXCLUSIVE resolved as shift
    RETURN          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    YIELD           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    ATTR_ACCESSOR   reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    ATTR_READER     reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    ATTR_WRITER     reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    BREAK           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    NEXT            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    PUTS            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    IDENTIFIER      reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    INSTANCE_VAR    reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    LPAREN          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    LBRACE          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    INTEGER         reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    FLOAT           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    STRING          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    SYMBOL_COLON    reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    DEFINEDQ        reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    CONSTANT        reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    LBRACKET        reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    IF              reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    DEF             reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    WHILE           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    UNLESS          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    CASE            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    CLASS           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    $end            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    RBRACE          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    ELSIF           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    END_KW          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    WHEN            reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56

  ! PLUS            [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! MINUS           [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! TIMES           [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! MODULO          [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! POWER           [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! LOGICAL_AND     [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! LOGICAL_OR      [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! NOT_EQUAL       [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! GREATER_THAN    [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! LESS_THAN       [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! RANGE_INCLUSIVE [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]
  ! RANGE_EXCLUSIVE [ reduce using rule 73 (expression_list -> expression_list COMMA expression .) ]


state 201

    (61) function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list . END_KW
    (2) statement_list -> statement_list . statement
    (4) statement -> . print
    (5) statement -> . input
    (6) statement -> . assignment
    (7) statement -> . expression
    (8) statement -> . if_statement
    (9) statement -> . function_def
    (10) statement -> . while_statement
    (11) statement -> . unless_statement
    (12) statement -> . case_statement
    (13) statement -> . class_def
    (62) statement -> . RETURN expression
    (66) statement -> . YIELD
    (67) statement -> . YIELD IF expression
    (75) statement -> . ATTR_ACCESSOR symbol_list
    (76) statement -> . ATTR_READER symbol_list
    (77) statement -> . ATTR_WRITER symbol_list
    (91) statement -> . BREAK
    (92) statement -> . NEXT
    (14) print -> . PUTS expression
    (15) input -> . IDENTIFIER ASSIGN GETS DOT IDENTIFIER
    (16) assignment -> . IDENTIFIER ASSIGN expression
    (17) assignment -> . IDENTIFIER PLUS_ASSIGN expression
    (18) assignment -> . IDENTIFIER MINUS_ASSIGN expression
    (19) assignment -> . IDENTIFIER TIMES_ASSIGN expression
    (20) assignment -> . IDENTIFIER DIVIDE_ASSIGN expression
    (21) assignment -> . IDENTIFIER OR_ASSIGN expression
    (22) assignment -> . IDENTIFIER AND_ASSIGN expression
    (39) assignment -> . INSTANCE_VAR ASSIGN expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . LBRACE statement_list RBRACE
    (25) expression -> . MINUS expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression MODULO expression
    (31) expression -> . expression POWER expression
    (32) expression -> . INTEGER
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . SYMBOL_COLON
    (36) expression -> . DEFINEDQ
    (37) expression -> . IDENTIFIER
    (38) expression -> . INSTANCE_VAR
    (40) expression -> . expression LOGICAL_AND expression
    (41) expression -> . expression LOGICAL_OR expression
    (42) expression -> . expression EQUAL_EQUAL expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN expression
    (45) expression -> . expression LESS_THAN expression
    (46) expression -> . expression GREATER_EQUAL expression
    (47) expression -> . expression LESS_EQUAL expression
    (69) expression -> . CONSTANT DOT NEW expression_list_opt
    (80) expression -> . IDENTIFIER DOT IDENTIFIER LPAREN arg_list RPAREN
    (93) expression -> . LBRACKET elements RBRACKET
    (97) expression -> . LBRACE hash_content RBRACE
    (103) expression -> . expression RANGE_INCLUSIVE expression
    (104) expression -> . expression RANGE_EXCLUSIVE expression
    (48) if_statement -> . IF expression statement_list elsif_blocks_opt else_block_opt END_KW
    (61) function_def -> . DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW
    (63) function_def -> . DEF IDENTIFIER param_list_opt statement_list END_KW
    (64) function_def -> . DEF SELF DOT IDENTIFIER statement_list END_KW
    (65) function_def -> . DEF CONSTANT DOT IDENTIFIER statement_list END_KW
    (90) while_statement -> . WHILE expression statement_list END_KW
    (49) unless_statement -> . UNLESS expression statement_list else_block_opt END_KW
    (50) case_statement -> . CASE expression when_blocks else_block_opt END_KW
    (68) class_def -> . CLASS CONSTANT statement_list END_KW
    (74) class_def -> . CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW

    END_KW          shift and go to state 207
    RETURN          shift and go to state 14
    YIELD           shift and go to state 15
    ATTR_ACCESSOR   shift and go to state 17
    ATTR_READER     shift and go to state 18
    ATTR_WRITER     shift and go to state 19
    BREAK           shift and go to state 20
    NEXT            shift and go to state 21
    PUTS            shift and go to state 22
    IDENTIFIER      shift and go to state 23
    INSTANCE_VAR    shift and go to state 24
    LPAREN          shift and go to state 25
    LBRACE          shift and go to state 26
    MINUS           shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_COLON    shift and go to state 31
    DEFINEDQ        shift and go to state 32
    CONSTANT        shift and go to state 33
    LBRACKET        shift and go to state 34
    IF              shift and go to state 16
    DEF             shift and go to state 35
    WHILE           shift and go to state 36
    UNLESS          shift and go to state 37
    CASE            shift and go to state 38
    CLASS           shift and go to state 39

    statement                      shift and go to state 40
    print                          shift and go to state 4
    input                          shift and go to state 5
    assignment                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    function_def                   shift and go to state 9
    while_statement                shift and go to state 10
    unless_statement               shift and go to state 11
    case_statement                 shift and go to state 12
    class_def                      shift and go to state 13

state 202

    (64) function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .

    RETURN          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    YIELD           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    ATTR_READER     reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    ATTR_WRITER     reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    BREAK           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    NEXT            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    PUTS            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    IDENTIFIER      reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    LPAREN          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    LBRACE          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    MINUS           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    INTEGER         reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    FLOAT           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    STRING          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    DEFINEDQ        reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    CONSTANT        reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    LBRACKET        reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    IF              reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    DEF             reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    WHILE           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    UNLESS          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    CASE            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    CLASS           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    $end            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    RBRACE          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    ELSIF           reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    ELSE            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    END_KW          reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)
    WHEN            reduce using rule 64 (function_def -> DEF SELF DOT IDENTIFIER statement_list END_KW .)


state 203

    (65) function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .

    RETURN          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    YIELD           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    ATTR_READER     reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    ATTR_WRITER     reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    BREAK           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    NEXT            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    PUTS            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    IDENTIFIER      reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    LPAREN          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    LBRACE          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    MINUS           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    INTEGER         reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    FLOAT           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    STRING          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    DEFINEDQ        reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    CONSTANT        reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    LBRACKET        reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    IF              reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    DEF             reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    WHILE           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    UNLESS          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    CASE            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    CLASS           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    $end            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    RBRACE          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    ELSIF           reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    ELSE            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    END_KW          reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)
    WHEN            reduce using rule 65 (function_def -> DEF CONSTANT DOT IDENTIFIER statement_list END_KW .)


state 204

    (74) class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .

    RETURN          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    YIELD           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    ATTR_READER     reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    ATTR_WRITER     reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    BREAK           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    NEXT            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    PUTS            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    IDENTIFIER      reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    LPAREN          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    LBRACE          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    MINUS           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    INTEGER         reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    FLOAT           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    STRING          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    DEFINEDQ        reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    CONSTANT        reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    LBRACKET        reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    IF              reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    DEF             reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    WHILE           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    UNLESS          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    CASE            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    CLASS           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    $end            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    RBRACE          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    ELSIF           reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    ELSE            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    END_KW          reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)
    WHEN            reduce using rule 74 (class_def -> CLASS CONSTANT LESS_THAN CONSTANT statement_list END_KW .)


state 205

    (56) elsif_blocks -> ELSIF expression statement_list elsif_blocks .

    ELSE            reduce using rule 56 (elsif_blocks -> ELSIF expression statement_list elsif_blocks .)
    END_KW          reduce using rule 56 (elsif_blocks -> ELSIF expression statement_list elsif_blocks .)


state 206

    (81) arg_list -> arg_list COMMA expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . MODULO expression
    (31) expression -> expression . POWER expression
    (40) expression -> expression . LOGICAL_AND expression
    (41) expression -> expression . LOGICAL_OR expression
    (42) expression -> expression . EQUAL_EQUAL expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN expression
    (45) expression -> expression . LESS_THAN expression
    (46) expression -> expression . GREATER_EQUAL expression
    (47) expression -> expression . LESS_EQUAL expression
    (103) expression -> expression . RANGE_INCLUSIVE expression
    (104) expression -> expression . RANGE_EXCLUSIVE expression

    RPAREN          reduce using rule 81 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 81 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MODULO          shift and go to state 45
    POWER           shift and go to state 46
    LOGICAL_AND     shift and go to state 47
    LOGICAL_OR      shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    NOT_EQUAL       shift and go to state 50
    GREATER_THAN    shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_EQUAL   shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    RANGE_INCLUSIVE shift and go to state 55
    RANGE_EXCLUSIVE shift and go to state 56


state 207

    (61) function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .

    RETURN          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    YIELD           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    ATTR_ACCESSOR   reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    ATTR_READER     reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    ATTR_WRITER     reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    BREAK           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    NEXT            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    PUTS            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    IDENTIFIER      reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    INSTANCE_VAR    reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    LPAREN          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    LBRACE          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    MINUS           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    INTEGER         reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    FLOAT           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    STRING          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    SYMBOL_COLON    reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    DEFINEDQ        reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    CONSTANT        reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    LBRACKET        reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    IF              reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    DEF             reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    WHILE           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    UNLESS          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    CASE            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    CLASS           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    $end            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    RBRACE          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    ELSIF           reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    ELSE            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    END_KW          reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)
    WHEN            reduce using rule 61 (function_def -> DEF IDENTIFIER LPAREN param_list_opt RPAREN statement_list END_KW .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 108 resolved as shift
WARNING: shift/reduce conflict for POWER in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 108 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 109 resolved as shift
WARNING: shift/reduce conflict for POWER in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 109 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 129 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 129 resolved as shift
WARNING: shift/reduce conflict for STRING in state 129 resolved as shift
WARNING: shift/reduce conflict for SYMBOL_COLON in state 129 resolved as shift
WARNING: shift/reduce conflict for DEFINEDQ in state 129 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 129 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 129 resolved as shift
WARNING: shift/reduce conflict for CONSTANT in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 161 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 161 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 161 resolved as shift
WARNING: shift/reduce conflict for POWER in state 161 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 161 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 161 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 200 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 200 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 200 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 200 resolved as shift
WARNING: shift/reduce conflict for POWER in state 200 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 200 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for RANGE_INCLUSIVE in state 200 resolved as shift
WARNING: shift/reduce conflict for RANGE_EXCLUSIVE in state 200 resolved as shift
WARNING: reduce/reduce conflict in state 151 resolved using rule (expression -> MINUS expression)
WARNING: rejected rule (expression -> expression MINUS expression) in state 151
