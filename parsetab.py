
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programALIAS AMPERSAND AND AND_ASSIGN ASSIGN BEGIN_KW BREAK CASE CLASS CLASS_VAR COMMA CONSTANT DEF DEFINEDQ DIVIDE DIVIDE_ASSIGN DO DOT ELSE ELSIF END_KW ENSURE EQUAL_EQUAL FALSE FLOAT FOR GETS GLOBAL_VAR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INSTANCE_VAR INTEGER LBRACE LBRACKET LESS_EQUAL LESS_THAN LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MATCH_REGEX MINUS MINUS_ASSIGN MODULE MODULO NEXT NIL NOT NOT_EQUAL NOT_MATCH_REGEX OR OR_ASSIGN PLUS PLUS_ASSIGN POWER PUTS RANGE_EXCLUSIVE RANGE_INCLUSIVE RBRACE RBRACKET REDO RESCUE RETRY RETURN RPAREN SELF SEMICOLON STRING SUPER SYMBOL_COLON TERNARY_COLON TERNARY_Q THEN TIMES TIMES_ASSIGN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : print\n                 | input\n                 | assignment\n                 | expression\n                 | if_statementprint : PUTS expressioninput : IDENTIFIER ASSIGN GETS DOT IDENTIFIERassignment : IDENTIFIER ASSIGN expressionassignment : IDENTIFIER PLUS_ASSIGN expression\n                  | IDENTIFIER MINUS_ASSIGN expression\n                  | IDENTIFIER TIMES_ASSIGN expression\n                  | IDENTIFIER DIVIDE_ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression MODULO expressionexpression : INTEGER\n                  | FLOATexpression : STRINGexpression : IDENTIFIERcondition : expression LOGICAL_AND expression\n                 | expression LOGICAL_OR expression condition : expression EQUAL_EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression LESS_THAN expression\n                  | expression GREATER_EQUAL expression\n                  | expression LESS_EQUAL expressionif_statement : IF condition statement_list elsif_blocks_opt else_block_opt END_KWelsif_blocks_opt : elsif_blocks\n                        | emptyelsif_blocks :  elsif_blocks ELSIF condition statement_list\n                    | ELSIF condition statement_listelse_block_opt : ELSE statement_list\n                      | emptyempty : statement : WHILE condition statement_list END_KWexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n                | expression\n                | empty'
    
_lr_action_items = {'WHILE':([0,2,3,4,5,6,7,8,11,12,13,14,17,24,26,27,36,37,38,39,40,41,42,43,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,76,78,81,82,83,84,85,86,],[9,9,-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,9,-25,-9,9,-16,-17,-18,-19,-20,-21,9,-11,-12,-13,-14,-15,-43,9,-42,-26,-27,-28,-29,-30,-31,-32,-33,-10,9,9,-34,9,9,9,9,]),'PUTS':([0,2,3,4,5,6,7,8,11,12,13,14,17,24,26,27,36,37,38,39,40,41,42,43,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,76,78,81,82,83,84,85,86,],[10,10,-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,10,-25,-9,10,-16,-17,-18,-19,-20,-21,10,-11,-12,-13,-14,-15,-43,10,-42,-26,-27,-28,-29,-30,-31,-32,-33,-10,10,10,-34,10,10,10,10,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,78,80,81,82,83,84,85,86,],[11,11,-3,-4,-5,-6,-7,-8,26,26,-25,-22,-23,-24,26,26,-2,26,26,26,26,26,26,11,-25,-9,26,26,26,26,26,11,-16,-17,-18,-19,-20,-21,11,26,26,26,26,26,26,26,26,-11,-12,-13,-14,-15,-43,26,11,-42,-26,-27,-28,-29,-30,-31,-32,-33,76,26,-10,11,26,11,-34,11,11,11,11,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,78,80,81,82,83,84,85,86,],[12,12,-3,-4,-5,-6,-7,-8,12,12,-25,-22,-23,-24,12,12,-2,12,12,12,12,12,12,12,-25,-9,12,12,12,12,12,12,-16,-17,-18,-19,-20,-21,12,12,12,12,12,12,12,12,12,-11,-12,-13,-14,-15,-43,12,12,-42,-26,-27,-28,-29,-30,-31,-32,-33,12,-10,12,12,12,-34,12,12,12,12,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,78,80,81,82,83,84,85,86,],[13,13,-3,-4,-5,-6,-7,-8,13,13,-25,-22,-23,-24,13,13,-2,13,13,13,13,13,13,13,-25,-9,13,13,13,13,13,13,-16,-17,-18,-19,-20,-21,13,13,13,13,13,13,13,13,13,-11,-12,-13,-14,-15,-43,13,13,-42,-26,-27,-28,-29,-30,-31,-32,-33,13,-10,13,13,13,-34,13,13,13,13,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,78,80,81,82,83,84,85,86,],[14,14,-3,-4,-5,-6,-7,-8,14,14,-25,-22,-23,-24,14,14,-2,14,14,14,14,14,14,14,-25,-9,14,14,14,14,14,14,-16,-17,-18,-19,-20,-21,14,14,14,14,14,14,14,14,14,-11,-12,-13,-14,-15,-43,14,14,-42,-26,-27,-28,-29,-30,-31,-32,-33,14,-10,14,14,14,-34,14,14,14,14,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,78,80,81,82,83,84,85,86,],[15,15,-3,-4,-5,-6,-7,-8,15,15,-25,-22,-23,-24,15,15,-2,15,15,15,15,15,15,15,-25,-9,15,15,15,15,15,15,-16,-17,-18,-19,-20,-21,15,15,15,15,15,15,15,15,15,-11,-12,-13,-14,-15,-43,15,15,-42,-26,-27,-28,-29,-30,-31,-32,-33,15,-10,15,15,15,-34,15,15,15,15,]),'IF':([0,2,3,4,5,6,7,8,11,12,13,14,17,24,26,27,36,37,38,39,40,41,42,43,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,76,78,81,82,83,84,85,86,],[16,16,-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,16,-25,-9,16,-16,-17,-18,-19,-20,-21,16,-11,-12,-13,-14,-15,-43,16,-42,-26,-27,-28,-29,-30,-31,-32,-33,-10,16,16,-34,16,16,16,16,]),'$end':([1,2,3,4,5,6,7,8,11,12,13,14,17,26,27,37,38,39,40,41,42,53,54,55,56,57,58,61,76,82,],[0,-1,-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,-25,-9,-16,-17,-18,-19,-20,-21,-11,-12,-13,-14,-15,-43,-42,-10,-34,]),'END_KW':([3,4,5,6,7,8,11,12,13,14,17,26,27,37,38,39,40,41,42,43,53,54,55,56,57,58,60,61,72,73,74,76,77,79,82,83,85,86,],[-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,-25,-9,-16,-17,-18,-19,-20,-21,61,-11,-12,-13,-14,-15,-43,-41,-42,-41,-35,-36,-10,82,-40,-34,-39,-38,-37,]),'ELSIF':([3,4,5,6,7,8,11,12,13,14,17,26,27,37,38,39,40,41,42,53,54,55,56,57,58,60,61,73,76,82,85,86,],[-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,-25,-9,-16,-17,-18,-19,-20,-21,-11,-12,-13,-14,-15,-43,75,-42,80,-10,-34,-38,-37,]),'ELSE':([3,4,5,6,7,8,11,12,13,14,17,26,27,37,38,39,40,41,42,53,54,55,56,57,58,60,61,72,73,74,76,82,85,86,],[-3,-4,-5,-6,-7,-8,-25,-22,-23,-24,-2,-25,-9,-16,-17,-18,-19,-20,-21,-11,-12,-13,-14,-15,-43,-41,-42,78,-35,-36,-10,-34,-38,-37,]),'PLUS':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[18,-25,-22,-23,-24,18,-25,18,18,18,18,18,18,18,18,18,18,18,18,18,-43,18,18,18,18,18,18,18,18,18,]),'MINUS':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[19,-25,-22,-23,-24,19,-25,19,19,19,19,19,19,19,19,19,19,19,19,19,-43,19,19,19,19,19,19,19,19,19,]),'TIMES':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[20,-25,-22,-23,-24,20,-25,20,20,20,20,20,20,20,20,20,20,20,20,20,-43,20,20,20,20,20,20,20,20,20,]),'DIVIDE':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[21,-25,-22,-23,-24,21,-25,21,21,21,21,21,21,21,21,21,21,21,21,21,-43,21,21,21,21,21,21,21,21,21,]),'POWER':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[22,-25,-22,-23,-24,22,-25,22,22,22,22,22,22,22,22,22,22,22,22,22,-43,22,22,22,22,22,22,22,22,22,]),'MODULO':([7,11,12,13,14,25,26,27,34,37,38,39,40,41,42,53,54,55,56,57,58,62,63,64,65,66,67,68,69,71,],[23,-25,-22,-23,-24,23,-25,23,23,23,23,23,23,23,23,23,23,23,23,23,-43,23,23,23,23,23,23,23,23,23,]),'ASSIGN':([11,],[28,]),'PLUS_ASSIGN':([11,],[29,]),'MINUS_ASSIGN':([11,],[30,]),'TIMES_ASSIGN':([11,],[31,]),'DIVIDE_ASSIGN':([11,],[32,]),'LOGICAL_AND':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,44,-25,-16,-17,-18,-19,-20,-21,-43,]),'LOGICAL_OR':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,45,-25,-16,-17,-18,-19,-20,-21,-43,]),'EQUAL_EQUAL':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,46,-25,-16,-17,-18,-19,-20,-21,-43,]),'NOT_EQUAL':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,47,-25,-16,-17,-18,-19,-20,-21,-43,]),'GREATER_THAN':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,48,-25,-16,-17,-18,-19,-20,-21,-43,]),'LESS_THAN':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,49,-25,-16,-17,-18,-19,-20,-21,-43,]),'GREATER_EQUAL':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,50,-25,-16,-17,-18,-19,-20,-21,-43,]),'LESS_EQUAL':([12,13,14,25,26,37,38,39,40,41,42,58,],[-22,-23,-24,51,-25,-16,-17,-18,-19,-20,-21,-43,]),'RBRACKET':([12,13,14,15,26,33,34,35,37,38,39,40,41,42,58,71,],[-22,-23,-24,-41,-25,58,-45,-46,-16,-17,-18,-19,-20,-21,-43,-44,]),'COMMA':([12,13,14,15,26,33,34,35,37,38,39,40,41,42,58,71,],[-22,-23,-24,-41,-25,59,-45,-46,-16,-17,-18,-19,-20,-21,-43,-44,]),'GETS':([28,],[52,]),'DOT':([52,],[70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,36,78,81,84,],[2,43,60,83,85,86,]),'statement':([0,2,24,36,43,60,78,81,83,84,85,86,],[3,17,3,3,17,17,3,3,17,3,17,17,]),'print':([0,2,24,36,43,60,78,81,83,84,85,86,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'input':([0,2,24,36,43,60,78,81,83,84,85,86,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,24,36,43,60,78,81,83,84,85,86,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'expression':([0,2,9,10,15,16,18,19,20,21,22,23,24,28,29,30,31,32,36,43,44,45,46,47,48,49,50,51,59,60,75,78,80,81,83,84,85,86,],[7,7,25,27,34,25,37,38,39,40,41,42,7,53,54,55,56,57,7,7,62,63,64,65,66,67,68,69,71,7,25,7,25,7,7,7,7,7,]),'if_statement':([0,2,24,36,43,60,78,81,83,84,85,86,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'condition':([9,16,75,80,],[24,36,81,84,]),'elements':([15,],[33,]),'empty':([15,60,72,],[35,74,79,]),'elsif_blocks_opt':([60,],[72,]),'elsif_blocks':([60,],[73,]),'else_block_opt':([72,],[77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','sintactico.py',18),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sintactico.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',24),
  ('statement -> print','statement',1,'p_statement','sintactico.py',36),
  ('statement -> input','statement',1,'p_statement','sintactico.py',37),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',38),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',39),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',40),
  ('print -> PUTS expression','print',2,'p_print','sintactico.py',44),
  ('input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER','input',5,'p_input','sintactico.py',48),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','sintactico.py',52),
  ('assignment -> IDENTIFIER PLUS_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',56),
  ('assignment -> IDENTIFIER MINUS_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',57),
  ('assignment -> IDENTIFIER TIMES_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',58),
  ('assignment -> IDENTIFIER DIVIDE_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',59),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','sintactico.py',63),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','sintactico.py',64),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','sintactico.py',65),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','sintactico.py',66),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','sintactico.py',67),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','sintactico.py',68),
  ('expression -> INTEGER','expression',1,'p_expression_number','sintactico.py',72),
  ('expression -> FLOAT','expression',1,'p_expression_number','sintactico.py',73),
  ('expression -> STRING','expression',1,'p_expression_string','sintactico.py',77),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','sintactico.py',81),
  ('condition -> expression LOGICAL_AND expression','condition',3,'p_condition_logical','sintactico.py',85),
  ('condition -> expression LOGICAL_OR expression','condition',3,'p_condition_logical','sintactico.py',86),
  ('condition -> expression EQUAL_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',95),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',96),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition_comparison','sintactico.py',97),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition_comparison','sintactico.py',98),
  ('condition -> expression GREATER_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',99),
  ('condition -> expression LESS_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',100),
  ('if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW','if_statement',6,'p_if_statement','sintactico.py',105),
  ('elsif_blocks_opt -> elsif_blocks','elsif_blocks_opt',1,'p_elsif_blocks_opt','sintactico.py',109),
  ('elsif_blocks_opt -> empty','elsif_blocks_opt',1,'p_elsif_blocks_opt','sintactico.py',110),
  ('elsif_blocks -> elsif_blocks ELSIF condition statement_list','elsif_blocks',4,'p_elsif_blocks','sintactico.py',114),
  ('elsif_blocks -> ELSIF condition statement_list','elsif_blocks',3,'p_elsif_blocks','sintactico.py',115),
  ('else_block_opt -> ELSE statement_list','else_block_opt',2,'p_else_block_opt','sintactico.py',122),
  ('else_block_opt -> empty','else_block_opt',1,'p_else_block_opt','sintactico.py',123),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',130),
  ('statement -> WHILE condition statement_list END_KW','statement',4,'p_while_loop','sintactico.py',139),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_array','sintactico.py',145),
  ('elements -> elements COMMA expression','elements',3,'p_elements','sintactico.py',149),
  ('elements -> expression','elements',1,'p_elements','sintactico.py',150),
  ('elements -> empty','elements',1,'p_elements','sintactico.py',151),
]
