
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftLOGICAL_ORleftLOGICAL_ANDleftEQUAL_EQUALNOT_EQUALGREATER_THANLESS_THANGREATER_EQUALLESS_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightPOWERrightUMINUSALIAS AMPERSAND AND AND_ASSIGN ASSIGN BEGIN_KW BREAK CASE CLASS CLASS_VAR COMMA CONSTANT DEF DEFINEDQ DIVIDE DIVIDE_ASSIGN DO DOT ELSE ELSIF END_KW ENSURE EQUAL_EQUAL FALSE FLOAT FOR GETS GLOBAL_VAR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INSTANCE_VAR INTEGER LBRACE LBRACKET LESS_EQUAL LESS_THAN LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MATCH_REGEX MINUS MINUS_ASSIGN MODULE MODULO NEXT NIL NOT NOT_EQUAL NOT_MATCH_REGEX OR OR_ASSIGN PLUS PLUS_ASSIGN POWER PUTS RANGE_EXCLUSIVE RANGE_INCLUSIVE RBRACE RBRACKET REDO RESCUE RETRY RETURN RPAREN SELF SEMICOLON STRING SUPER SYMBOL_COLON TERNARY_COLON TERNARY_Q THEN TIMES TIMES_ASSIGN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDprogram : statement_liststatement_list : statement_list statement\n| statementstatement : print\n| input\n| assignment\n| expression\n| if_statementprint : PUTS expressioninput : IDENTIFIER ASSIGN GETS DOT IDENTIFIERassignment : IDENTIFIER ASSIGN expressionassignment : IDENTIFIER PLUS_ASSIGN expression\n| IDENTIFIER MINUS_ASSIGN expression\n| IDENTIFIER TIMES_ASSIGN expression\n| IDENTIFIER DIVIDE_ASSIGN expressionassignment : IDENTIFIER OR_ASSIGN expression\n| IDENTIFIER AND_ASSIGN expressionexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MODULO expression\n| expression POWER expressionexpression : INTEGER\n| FLOATexpression : STRINGexpression : IDENTIFIERexpression : expression LOGICAL_AND expression\n| expression LOGICAL_OR expression\n| expression EQUAL_EQUAL expression\n| expression NOT_EQUAL expression\n| expression GREATER_THAN expression\n| expression LESS_THAN expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expressioncondition : expression EQUAL_EQUAL expression\n| expression NOT_EQUAL expression\n| expression GREATER_THAN expression\n| expression LESS_THAN expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expressionif_statement : IF condition statement_list elsif_blocks_opt else_block_opt END_KWelsif_blocks_opt : elsif_blocks\n| emptyelsif_blocks :  elsif_blocks ELSIF condition statement_list\n| ELSIF condition statement_listelse_block_opt : ELSE statement_list\n| emptyempty : statement : WHILE condition statement_list END_KWexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| expression\n| empty'
    
_lr_action_items = {'WHILE':([0,2,3,4,5,6,7,8,11,14,15,16,19,34,36,37,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,97,99,102,103,104,105,106,107,],[9,9,-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,9,-29,-9,-19,9,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,9,-11,-12,-13,-14,-15,-16,-17,-18,-53,9,-52,-38,-39,-40,-41,-42,-43,-10,9,9,-44,9,9,9,9,]),'PUTS':([0,2,3,4,5,6,7,8,11,14,15,16,19,34,36,37,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,97,99,102,103,104,105,106,107,],[10,10,-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,10,-29,-9,-19,10,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,10,-11,-12,-13,-14,-15,-16,-17,-18,-53,10,-52,-38,-39,-40,-41,-42,-43,-10,10,10,-44,10,10,10,10,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,97,99,101,102,103,104,105,106,107,],[11,11,-3,-4,-5,-6,-7,-8,36,36,-29,36,36,-26,-27,-28,36,36,-2,36,36,36,36,36,36,36,36,36,36,36,36,36,36,11,-29,-9,36,36,36,36,36,36,36,-19,11,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,11,36,36,36,36,36,36,-11,-12,-13,-14,-15,-16,-17,-18,-53,36,11,-52,-38,-39,-40,-41,-42,-43,97,36,-10,11,36,11,-44,11,11,11,11,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,101,102,103,104,105,106,107,],[12,12,-3,-4,-5,-6,-7,-8,12,12,-29,12,12,-26,-27,-28,12,12,-2,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-29,-9,12,12,12,12,12,12,12,-19,12,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,12,12,12,12,12,12,12,-11,-12,-13,-14,-15,-16,-17,-18,-53,12,12,-52,-38,-39,-40,-41,-42,-43,12,-10,12,12,12,-44,12,12,12,12,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,96,97,99,101,102,103,104,105,106,107,],[13,13,-3,-4,-5,-6,21,-8,13,13,-29,13,13,-26,-27,-28,13,13,-2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,21,-29,21,13,13,13,13,13,13,13,21,-19,21,13,-20,-21,-22,-23,-24,-25,21,21,21,21,21,21,21,21,13,13,13,13,13,13,13,21,21,21,21,21,21,21,-18,-53,13,13,-52,21,21,21,21,21,21,21,13,-10,13,13,13,-44,13,13,13,13,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,101,102,103,104,105,106,107,],[14,14,-3,-4,-5,-6,-7,-8,14,14,-29,14,14,-26,-27,-28,14,14,-2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-29,-9,14,14,14,14,14,14,14,-19,14,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,14,14,14,14,14,14,14,-11,-12,-13,-14,-15,-16,-17,-18,-53,14,14,-52,-38,-39,-40,-41,-42,-43,14,-10,14,14,14,-44,14,14,14,14,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,101,102,103,104,105,106,107,],[15,15,-3,-4,-5,-6,-7,-8,15,15,-29,15,15,-26,-27,-28,15,15,-2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-29,-9,15,15,15,15,15,15,15,-19,15,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,15,15,15,15,15,15,15,-11,-12,-13,-14,-15,-16,-17,-18,-53,15,15,-52,-38,-39,-40,-41,-42,-43,15,-10,15,15,15,-44,15,15,15,15,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,101,102,103,104,105,106,107,],[16,16,-3,-4,-5,-6,-7,-8,16,16,-29,16,16,-26,-27,-28,16,16,-2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-29,-9,16,16,16,16,16,16,16,-19,16,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,16,16,16,16,16,16,16,-11,-12,-13,-14,-15,-16,-17,-18,-53,16,16,-52,-38,-39,-40,-41,-42,-43,16,-10,16,16,16,-44,16,16,16,16,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,101,102,103,104,105,106,107,],[17,17,-3,-4,-5,-6,-7,-8,17,17,-29,17,17,-26,-27,-28,17,17,-2,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-29,-9,17,17,17,17,17,17,17,-19,17,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,17,17,17,17,17,17,17,-11,-12,-13,-14,-15,-16,-17,-18,-53,17,17,-52,-38,-39,-40,-41,-42,-43,17,-10,17,17,17,-44,17,17,17,17,]),'IF':([0,2,3,4,5,6,7,8,11,14,15,16,19,34,36,37,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,97,99,102,103,104,105,106,107,],[18,18,-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,18,-29,-9,-19,18,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,18,-11,-12,-13,-14,-15,-16,-17,-18,-53,18,-52,-38,-39,-40,-41,-42,-43,-10,18,18,-44,18,18,18,18,]),'$end':([1,2,3,4,5,6,7,8,11,14,15,16,19,36,37,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,84,97,103,],[0,-1,-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,-29,-9,-19,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-11,-12,-13,-14,-15,-16,-17,-18,-53,-52,-10,-44,]),'END_KW':([3,4,5,6,7,8,11,14,15,16,19,36,37,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,75,76,77,78,79,80,81,83,84,93,94,95,97,98,100,103,104,106,107,],[-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,-29,-9,-19,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,84,-11,-12,-13,-14,-15,-16,-17,-18,-53,-51,-52,-51,-45,-46,-10,103,-50,-44,-49,-48,-47,]),'ELSIF':([3,4,5,6,7,8,11,14,15,16,19,36,37,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,83,84,94,97,103,106,107,],[-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,-29,-9,-19,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-11,-12,-13,-14,-15,-16,-17,-18,-53,96,-52,101,-10,-44,-48,-47,]),'ELSE':([3,4,5,6,7,8,11,14,15,16,19,36,37,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,83,84,93,94,95,97,103,106,107,],[-3,-4,-5,-6,-7,-8,-29,-26,-27,-28,-2,-29,-9,-19,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-11,-12,-13,-14,-15,-16,-17,-18,-53,-51,-52,99,-45,-46,-10,-44,-48,-47,]),'PLUS':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[20,-29,-26,-27,-28,20,-29,20,20,-19,20,-20,-21,-22,-23,-24,-25,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-18,-53,20,20,20,20,20,20,20,]),'TIMES':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[22,-29,-26,-27,-28,22,-29,22,22,-19,22,22,22,-22,-23,-24,-25,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-18,-53,22,22,22,22,22,22,22,]),'DIVIDE':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[23,-29,-26,-27,-28,23,-29,23,23,-19,23,23,23,-22,-23,-24,-25,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-18,-53,23,23,23,23,23,23,23,]),'MODULO':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[24,-29,-26,-27,-28,24,-29,24,24,-19,24,24,24,-22,-23,-24,-25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-18,-53,24,24,24,24,24,24,24,]),'POWER':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[25,-29,-26,-27,-28,25,-29,25,25,-19,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-18,-53,25,25,25,25,25,25,25,]),'LOGICAL_AND':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[26,-29,-26,-27,-28,26,-29,26,26,-19,26,-20,-21,-22,-23,-24,-25,-30,26,-32,-33,-34,-35,-36,-37,26,26,26,26,26,26,26,-18,-53,-32,-33,-34,-35,-36,-37,26,]),'LOGICAL_OR':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[27,-29,-26,-27,-28,27,-29,27,27,-19,27,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,27,27,27,27,27,27,27,-18,-53,-32,-33,-34,-35,-36,-37,27,]),'EQUAL_EQUAL':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[28,-29,-26,-27,-28,66,-29,28,28,-19,28,-20,-21,-22,-23,-24,-25,28,28,-32,-33,-34,-35,-36,-37,28,28,28,28,28,28,28,-18,-53,-32,-33,-34,-35,-36,-37,28,]),'NOT_EQUAL':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[29,-29,-26,-27,-28,67,-29,29,29,-19,29,-20,-21,-22,-23,-24,-25,29,29,-32,-33,-34,-35,-36,-37,29,29,29,29,29,29,29,-18,-53,-32,-33,-34,-35,-36,-37,29,]),'GREATER_THAN':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[30,-29,-26,-27,-28,68,-29,30,30,-19,30,-20,-21,-22,-23,-24,-25,30,30,-32,-33,-34,-35,-36,-37,30,30,30,30,30,30,30,-18,-53,-32,-33,-34,-35,-36,-37,30,]),'LESS_THAN':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[31,-29,-26,-27,-28,69,-29,31,31,-19,31,-20,-21,-22,-23,-24,-25,31,31,-32,-33,-34,-35,-36,-37,31,31,31,31,31,31,31,-18,-53,-32,-33,-34,-35,-36,-37,31,]),'GREATER_EQUAL':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[32,-29,-26,-27,-28,70,-29,32,32,-19,32,-20,-21,-22,-23,-24,-25,32,32,-32,-33,-34,-35,-36,-37,32,32,32,32,32,32,32,-18,-53,-32,-33,-34,-35,-36,-37,32,]),'LESS_EQUAL':([7,11,14,15,16,35,36,37,45,46,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,85,86,87,88,89,90,92,],[33,-29,-26,-27,-28,71,-29,33,33,-19,33,-20,-21,-22,-23,-24,-25,33,33,-32,-33,-34,-35,-36,-37,33,33,33,33,33,33,33,-18,-53,-32,-33,-34,-35,-36,-37,33,]),'ASSIGN':([11,],[38,]),'PLUS_ASSIGN':([11,],[39,]),'MINUS_ASSIGN':([11,],[40,]),'TIMES_ASSIGN':([11,],[41,]),'DIVIDE_ASSIGN':([11,],[42,]),'OR_ASSIGN':([11,],[43,]),'AND_ASSIGN':([11,],[44,]),'RPAREN':([14,15,16,36,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,80,81,],[-26,-27,-28,-29,80,-19,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-18,-53,]),'RBRACKET':([14,15,16,17,36,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,80,81,92,],[-26,-27,-28,-51,-29,-19,81,-55,-56,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-18,-53,-54,]),'COMMA':([14,15,16,17,36,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,80,81,92,],[-26,-27,-28,-51,-29,-19,82,-55,-56,-20,-21,-22,-23,-24,-25,-30,-31,-32,-33,-34,-35,-36,-37,-18,-53,-54,]),'GETS':([38,],[72,]),'DOT':([72,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,34,50,99,102,105,],[2,65,83,104,106,107,]),'statement':([0,2,34,50,65,83,99,102,104,105,106,107,],[3,19,3,3,19,19,3,3,19,3,19,19,]),'print':([0,2,34,50,65,83,99,102,104,105,106,107,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'input':([0,2,34,50,65,83,99,102,104,105,106,107,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,34,50,65,83,99,102,104,105,106,107,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'expression':([0,2,9,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,50,65,66,67,68,69,70,71,82,83,96,99,101,102,104,105,106,107,],[7,7,35,37,45,46,48,35,51,52,53,54,55,56,57,58,59,60,61,62,63,64,7,73,74,75,76,77,78,79,7,7,85,86,87,88,89,90,92,7,35,7,35,7,7,7,7,7,]),'if_statement':([0,2,34,50,65,83,99,102,104,105,106,107,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'condition':([9,18,96,101,],[34,50,102,105,]),'elements':([17,],[47,]),'empty':([17,83,93,],[49,95,100,]),'elsif_blocks_opt':([83,],[93,]),'elsif_blocks':([83,],[94,]),'else_block_opt':([93,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','sintactico.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sintactico.py',36),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',37),
  ('statement -> print','statement',1,'p_statement','sintactico.py',49),
  ('statement -> input','statement',1,'p_statement','sintactico.py',50),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',51),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',52),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',53),
  ('print -> PUTS expression','print',2,'p_print','sintactico.py',57),
  ('input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER','input',5,'p_input','sintactico.py',61),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','sintactico.py',65),
  ('assignment -> IDENTIFIER PLUS_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',69),
  ('assignment -> IDENTIFIER MINUS_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',70),
  ('assignment -> IDENTIFIER TIMES_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',71),
  ('assignment -> IDENTIFIER DIVIDE_ASSIGN expression','assignment',3,'p_assignment_composed','sintactico.py',72),
  ('assignment -> IDENTIFIER OR_ASSIGN expression','assignment',3,'p_assignment_logical_op','sintactico.py',77),
  ('assignment -> IDENTIFIER AND_ASSIGN expression','assignment',3,'p_assignment_logical_op','sintactico.py',78),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','sintactico.py',83),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','sintactico.py',87),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','sintactico.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','sintactico.py',94),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','sintactico.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','sintactico.py',96),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','sintactico.py',97),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','sintactico.py',98),
  ('expression -> INTEGER','expression',1,'p_expression_number','sintactico.py',102),
  ('expression -> FLOAT','expression',1,'p_expression_number','sintactico.py',103),
  ('expression -> STRING','expression',1,'p_expression_string','sintactico.py',107),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','sintactico.py',111),
  ('expression -> expression LOGICAL_AND expression','expression',3,'p_expression_condition','sintactico.py',123),
  ('expression -> expression LOGICAL_OR expression','expression',3,'p_expression_condition','sintactico.py',124),
  ('expression -> expression EQUAL_EQUAL expression','expression',3,'p_expression_condition','sintactico.py',125),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression_condition','sintactico.py',126),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_condition','sintactico.py',127),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_condition','sintactico.py',128),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_condition','sintactico.py',129),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_condition','sintactico.py',130),
  ('condition -> expression EQUAL_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',139),
  ('condition -> expression NOT_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',140),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition_comparison','sintactico.py',141),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition_comparison','sintactico.py',142),
  ('condition -> expression GREATER_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',143),
  ('condition -> expression LESS_EQUAL expression','condition',3,'p_condition_comparison','sintactico.py',144),
  ('if_statement -> IF condition statement_list elsif_blocks_opt else_block_opt END_KW','if_statement',6,'p_if_statement','sintactico.py',149),
  ('elsif_blocks_opt -> elsif_blocks','elsif_blocks_opt',1,'p_elsif_blocks_opt','sintactico.py',153),
  ('elsif_blocks_opt -> empty','elsif_blocks_opt',1,'p_elsif_blocks_opt','sintactico.py',154),
  ('elsif_blocks -> elsif_blocks ELSIF condition statement_list','elsif_blocks',4,'p_elsif_blocks','sintactico.py',158),
  ('elsif_blocks -> ELSIF condition statement_list','elsif_blocks',3,'p_elsif_blocks','sintactico.py',159),
  ('else_block_opt -> ELSE statement_list','else_block_opt',2,'p_else_block_opt','sintactico.py',166),
  ('else_block_opt -> empty','else_block_opt',1,'p_else_block_opt','sintactico.py',167),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',174),
  ('statement -> WHILE condition statement_list END_KW','statement',4,'p_while_loop','sintactico.py',183),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_array','sintactico.py',189),
  ('elements -> elements COMMA expression','elements',3,'p_elements','sintactico.py',193),
  ('elements -> expression','elements',1,'p_elements','sintactico.py',194),
  ('elements -> empty','elements',1,'p_elements','sintactico.py',195),
]
