
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementALIAS AND AND_ASSIGN ASSIGN BEGIN BREAK CASE CLASS CLASS_VAR COMMA CONSTANT DEF DEFINEDQ DIVIDE DIVIDE_ASSIGN DO DOT ELSE ELSIF END ENSURE EQUAL_EQUAL FALSE FLOAT FOR GETS GLOBAL_VAR GREATER_EQUAL GREATER_THAN IDENTIFIER IF IN INSTANCE_VAR INTEGER LBRACE LBRACKET LESS_EQUAL LESS_THAN LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MATCH_REGEX MINUS MINUS_ASSIGN MODULE MODULO NEXT NIL NOT NOT_EQUAL NOT_MATCH_REGEX OR OR_ASSIGN PLUS PLUS_ASSIGN POWER PUTS RANGE_EXCLUSIVE RANGE_INCLUSIVE RBRACE RBRACKET REDO RESCUE RETRY RETURN RPAREN SELF SEMICOLON STRING SUPER THEN TIMES TIMES_ASSIGN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDstatement : print\n                 | input\n                 | assignment\n                 | expressionprint : PUTS expressioninput : IDENTIFIER ASSIGN GETS DOT IDENTIFIERassignment : IDENTIFIER ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression MODULO expressionexpression : INTEGER\n                  | FLOATexpression : STRINGexpression : IDENTIFIERcondition : expression LOGICAL_AND expression\n                 | expression LOGICAL_OR expression'
    
_lr_action_items = {'PUTS':([0,],[6,]),'IDENTIFIER':([0,6,11,12,13,14,15,16,19,28,],[7,18,18,18,18,18,18,18,18,29,]),'INTEGER':([0,6,11,12,13,14,15,16,19,],[8,8,8,8,8,8,8,8,8,]),'FLOAT':([0,6,11,12,13,14,15,16,19,],[9,9,9,9,9,9,9,9,9,]),'STRING':([0,6,11,12,13,14,15,16,19,],[10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,5,7,8,9,10,17,18,20,21,22,23,24,25,27,29,],[0,-1,-2,-3,-4,-17,-14,-15,-16,-5,-17,-8,-9,-10,-11,-12,-13,-7,-6,]),'PLUS':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[11,-17,-14,-15,-16,11,-17,11,11,11,11,11,11,11,]),'MINUS':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[12,-17,-14,-15,-16,12,-17,12,12,12,12,12,12,12,]),'TIMES':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[13,-17,-14,-15,-16,13,-17,13,13,13,13,13,13,13,]),'DIVIDE':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[14,-17,-14,-15,-16,14,-17,14,14,14,14,14,14,14,]),'POWER':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[15,-17,-14,-15,-16,15,-17,15,15,15,15,15,15,15,]),'MODULO':([5,7,8,9,10,17,18,20,21,22,23,24,25,27,],[16,-17,-14,-15,-16,16,-17,16,16,16,16,16,16,16,]),'ASSIGN':([7,],[19,]),'GETS':([19,],[26,]),'DOT':([26,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'print':([0,],[2,]),'input':([0,],[3,]),'assignment':([0,],[4,]),'expression':([0,6,11,12,13,14,15,16,19,],[5,17,20,21,22,23,24,25,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> print','statement',1,'p_statement','sintactico.py',14),
  ('statement -> input','statement',1,'p_statement','sintactico.py',15),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',16),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',17),
  ('print -> PUTS expression','print',2,'p_print','sintactico.py',21),
  ('input -> IDENTIFIER ASSIGN GETS DOT IDENTIFIER','input',5,'p_input','sintactico.py',25),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','sintactico.py',29),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','sintactico.py',33),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','sintactico.py',34),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','sintactico.py',35),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','sintactico.py',36),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','sintactico.py',37),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','sintactico.py',38),
  ('expression -> INTEGER','expression',1,'p_expression_number','sintactico.py',42),
  ('expression -> FLOAT','expression',1,'p_expression_number','sintactico.py',43),
  ('expression -> STRING','expression',1,'p_expression_string','sintactico.py',47),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','sintactico.py',51),
  ('condition -> expression LOGICAL_AND expression','condition',3,'p_condition_logical','sintactico.py',55),
  ('condition -> expression LOGICAL_OR expression','condition',3,'p_condition_logical','sintactico.py',56),
]
